{
  "info": {
	"_postman_id": "7aa83fdd-3e74-484a-bf44-059956793169",
	"name": "Arc APIs Postman Collection",
	"description": "A collection of API requests for Arc Publishing that's useful for content management or content migrations.\n\n# Setup\nIn order to properly setup this question you must first:\n\n1. Import the collection\n2. Create a new environment\n3. Add the following environment variables\n - **baseUrl** - *[ENV]*.*[ORG-NAME]*.arcpublishing.com\n - **token** - an access token generated from your Developer Center. *NOTE: An admin token is required for POST/PUT requests.*\n - **website** - the multisite website ID that you want to run these API commands for\n - **search_key** - the key for your provisioned Arc search, this is provided by your TAM or TDM\n4. Save your changes\n5. Select your environment from the Postman dropdown box\n6. Identify the API endpoint you want to use, click on it\n7. In the tab that opens, modify the *Query* and *Path* variables to suit your needs\n8. Modify the *Body* section to add/edit/delete the proper information (if applicable)",
	"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
	{
	  "name": "Content API",
	  "item": [
		{
		  "name": "Get content by ID",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "GET",
			"header": [],
			"url": {
			  "raw": "https://api.{{baseUrl}}/content/v4/?website={{website}}&_id=<string>",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"content",
				"v4",
				""
			  ],
			  "query": [
				{
				  "key": "website",
				  "value": "{{website}}",
				  "description": "Website ID"
				},
				{
				  "key": "_id",
				  "value": "<string>",
				  "description": "The _id of the content"
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Generic Get Collection",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "GET",
			"header": [],
			"url": {
			  "raw": "https://api.{{baseUrl}}/content/v4/collections?_id=<string>&website={{website}}&published=true",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"content",
				"v4",
				"collections"
			  ],
			  "query": [
				{
				  "key": "_id",
				  "value": "<string>",
				  "description": "The _id of the content"
				},
				{
				  "key": "website",
				  "value": "{{website}}",
				  "description": "Website ID"
				},
				{
				  "key": "published",
				  "value": "true",
				  "description": "Whether or not this content is published"
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Generic Get by url",
		  "event": [
			{
			  "listen": "test",
			  "script": {
				"id": "1e53edfe-56a0-46a6-a9a4-c0711b6b2cfa",
				"exec": [
				  ""
				],
				"type": "text/javascript"
			  }
			}
		  ],
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "GET",
			"header": [],
			"url": {
			  "raw": "https://api.{{baseUrl}}/content/v4/?website={{website}}&website_url=<string>",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"content",
				"v4",
				""
			  ],
			  "query": [
				{
				  "key": "website",
				  "value": "{{website}}",
				  "description": "Website ID"
				},
				{
				  "key": "website_url",
				  "value": "<string>",
				  "description": "The canonical url of the website content"
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Generic search",
		  "event": [
			{
			  "listen": "test",
			  "script": {
				"id": "1e53edfe-56a0-46a6-a9a4-c0711b6b2cfa",
				"exec": [
				  ""
				],
				"type": "text/javascript"
			  }
			}
		  ],
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "GET",
			"header": [],
			"url": {
			  "raw": "https://api.{{baseUrl}}/content/v4/search/published?website={{website}}&q=<string>",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"content",
				"v4",
				"search",
				"published"
			  ],
			  "query": [
				{
				  "key": "website",
				  "value": "{{website}}",
				  "description": "Website ID"
				},
				{
				  "key": "q",
				  "value": "<string>",
				  "description": "Query to search for"
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Search by source.source_id",
		  "event": [
			{
			  "listen": "test",
			  "script": {
				"id": "1e53edfe-56a0-46a6-a9a4-c0711b6b2cfa",
				"exec": [
				  ""
				],
				"type": "text/javascript"
			  }
			}
		  ],
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "GET",
			"header": [],
			"url": {
			  "raw": "https://api.{{baseUrl}}/content/v4/search?q=source.source_id=<string>&website={{website}}&published=true",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"content",
				"v4",
				"search"
			  ],
			  "query": [
				{
				  "key": "q",
				  "value": "source.source_id=<string>",
				  "description": "Find content by it's source ID value"
				},
				{
				  "key": "website",
				  "value": "{{website}}",
				  "description": "Website ID"
				},
				{
				  "key": "published",
				  "value": "true",
				  "description": "Whether or not this content is published"
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Stories from past 2 days",
		  "event": [
			{
			  "listen": "test",
			  "script": {
				"id": "1e53edfe-56a0-46a6-a9a4-c0711b6b2cfa",
				"exec": [
				  ""
				],
				"type": "text/javascript"
			  }
			}
		  ],
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "GET",
			"header": [],
			"url": {
			  "raw": "https://api.{{baseUrl}}/content/v4/search/published?website={{website}}&q=type:story+ AND+created_date:[now-2d%20TO%20now]&sort=publish_date:asc&size=20&from=0",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"content",
				"v4",
				"search",
				"published"
			  ],
			  "query": [
				{
				  "key": "website",
				  "value": "{{website}}",
				  "description": "Website ID"
				},
				{
				  "key": "q",
				  "value": "type:story+ AND+created_date:[now-2d%20TO%20now]",
				  "description": "The query to search for"
				},
				{
				  "key": "sort",
				  "value": "publish_date:asc",
				  "description": "How to sort the results"
				},
				{
				  "key": "size",
				  "value": "20",
				  "description": "How many results to return"
				},
				{
				  "key": "from",
				  "value": "0",
				  "description": "Starting from this result number"
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Get content by type",
		  "event": [
			{
			  "listen": "test",
			  "script": {
				"id": "1e53edfe-56a0-46a6-a9a4-c0711b6b2cfa",
				"exec": [
				  ""
				],
				"type": "text/javascript"
			  }
			}
		  ],
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "GET",
			"header": [],
			"url": {
			  "raw": "https://api.{{baseUrl}}/content/v4/search/published?website={{website}}&sort=publish_date:asc&size=20&from=0&q=type:story",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"content",
				"v4",
				"search",
				"published"
			  ],
			  "query": [
				{
				  "key": "website",
				  "value": "{{website}}",
				  "description": "Website ID"
				},
				{
				  "key": "sort",
				  "value": "publish_date:asc",
				  "description": "How to sort the results"
				},
				{
				  "key": "size",
				  "value": "20",
				  "description": "Number of records to return"
				},
				{
				  "key": "from",
				  "value": "0",
				  "description": "Record to start from"
				},
				{
				  "key": "q",
				  "value": "type:story",
				  "description": "Type of content to look for (story|photo|video|gallery)"
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Get content with oembeds",
		  "event": [
			{
			  "listen": "test",
			  "script": {
				"id": "1e53edfe-56a0-46a6-a9a4-c0711b6b2cfa",
				"exec": [
				  ""
				],
				"type": "text/javascript"
			  }
			}
		  ],
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "GET",
			"header": [],
			"url": {
			  "raw": "https://api.{{baseUrl}}/content/v4/search/published?website={{website}}&q=type:story+AND+revision.published:true+AND+content_elements.type:oembed_response&sort=publish_date:asc&size=20&from=0",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"content",
				"v4",
				"search",
				"published"
			  ],
			  "query": [
				{
				  "key": "website",
				  "value": "{{website}}",
				  "description": "Website ID"
				},
				{
				  "key": "q",
				  "value": "type:story+AND+revision.published:true+AND+content_elements.type:oembed_response",
				  "description": "Search for all oembeds"
				},
				{
				  "key": "sort",
				  "value": "publish_date:asc",
				  "description": "Sort by published date"
				},
				{
				  "key": "size",
				  "value": "20",
				  "description": "Number of results to return"
				},
				{
				  "key": "from",
				  "value": "0",
				  "description": "Starting from this result"
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Generic Refresh Document (retry deletion/update)",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "POST",
			"header": [
			  {
				"key": "Content-Type",
				"name": "Content-Type",
				"value": "application/json",
				"type": "text"
			  },
			  {
				"key": "ARC_ORG_NAME",
				"value": "gfrmedia",
				"type": "text"
			  }
			],
			"body": {
			  "mode": "raw",
			  "raw": "",
			  "options": {
				"raw": {}
			  }
			},
			"url": {
			  "raw": "https://api.{{baseUrl}}/api/v1/refresh/story/draft/:_id/",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"api",
				"v1",
				"refresh",
				"story",
				"draft",
				":_id",
				""
			  ],
			  "variable": [
				{
				  "description": "The _id of the content",
				  "key": "_id",
				  "type": "string",
				  "value": "<string>"
				}
			  ]
			}
		  },
		  "response": []
		}
	  ],
	  "description": "Documentation is available at: https://redirector.arcpublishing.com/alc/docs/swagger/?url=./arc-products/content-api.json",
	  "event": [
		{
		  "listen": "prerequest",
		  "script": {
			"id": "659caddd-6119-4ee8-99f0-e53db113eaeb",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		},
		{
		  "listen": "test",
		  "script": {
			"id": "446978d7-2cde-4242-a755-cbd6c0022799",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		}
	  ],
	  "protocolProfileBehavior": {}
	},
	{
	  "name": "Draft API",
	  "item": [
		{
		  "name": "v1",
		  "item": [
			{
			  "name": "{type}",
			  "item": [
				{
				  "name": "{id}",
				  "item": [
					{
					  "name": "revisions",
					  "item": [
						{
						  "name": "published",
						  "item": [
							{
							  "name": "Publish a Document",
							  "request": {
								"auth": {
								  "type": "bearer",
								  "bearer": [
									{
									  "key": "token",
									  "value": "{{token}}",
									  "type": "string"
									}
								  ]
								},
								"method": "POST",
								"header": [],
								"url": {
								  "raw": "https://api.{{baseUrl}}/draft/v1/:type/:id/revisions/published",
								  "protocol": "https",
								  "host": [
									"api",
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									":type",
									":id",
									"revisions",
									"published"
								  ],
								  "variable": [
									{
									  "description": "Type of the `Document`.\n",
									  "key": "type",
									  "type": "string",
									  "value": "<string>"
									},
									{
									  "description": "Id of the `Document`.\n",
									  "key": "id",
									  "type": "string",
									  "value": "<string>"
									}
								  ]
								},
								"description": "Publishes the `Document`'s current draft `Revision` by creating a clone of the current draft `Revision` and setting it as the `Document`'s published `Revision`. A new clone of the current draft `Revision` is also created.\n\nThis API returns the new published `Revision`.\n"
							  },
							  "response": [
								{
								  "name": "Not Found",
								  "originalRequest": {
									"method": "POST",
									"header": [],
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/published",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"revisions",
										"published"
									  ]
									}
								  },
								  "status": "Not Found",
								  "code": 404,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
								},
								{
								  "name": "Internal Server Error",
								  "originalRequest": {
									"method": "POST",
									"header": [],
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/published",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"revisions",
										"published"
									  ]
									}
								  },
								  "status": "Internal Server Error",
								  "code": 500,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
								},
								{
								  "name": "A `Revision` object",
								  "originalRequest": {
									"method": "POST",
									"header": [],
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/published",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"revisions",
										"published"
									  ]
									}
								  },
								  "status": "OK",
								  "code": 200,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"id\": \"<string>\",\n \"created_at\": \"<string>\",\n \"updated_at\": \"<string>\",\n \"document_id\": \"<string>\",\n \"ans\": \"<object>\",\n \"type\": \"<string>\"\n}"
								}
							  ]
							},
							{
							  "name": "Unpublish a Document",
							  "request": {
								"auth": {
								  "type": "bearer",
								  "bearer": [
									{
									  "key": "token",
									  "value": "{{token}}",
									  "type": "string"
									}
								  ]
								},
								"method": "DELETE",
								"header": [],
								"url": {
								  "raw": "https://api.{{baseUrl}}/draft/v1/:type/:id/revisions/published",
								  "protocol": "https",
								  "host": [
									"api",
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									":type",
									":id",
									"revisions",
									"published"
								  ],
								  "variable": [
									{
									  "description": "Type of the `Document`.\n",
									  "key": "type",
									  "type": "string",
									  "value": "<string>"
									},
									{
									  "description": "Id of the `Document`.\n",
									  "key": "id",
									  "type": "string",
									  "value": "<string>"
									}
								  ]
								},
								"description": "Unpublishes the published `Revision` for the specified `Document`.\n"
							  },
							  "response": [
								{
								  "name": "A `Revision` object",
								  "originalRequest": {
									"method": "DELETE",
									"header": [],
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/published",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"revisions",
										"published"
									  ]
									}
								  },
								  "status": "OK",
								  "code": 200,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"id\": \"<string>\",\n \"created_at\": \"<string>\",\n \"updated_at\": \"<string>\",\n \"document_id\": \"<string>\",\n \"ans\": \"<object>\",\n \"type\": \"<string>\"\n}"
								},
								{
								  "name": "Internal Server Error",
								  "originalRequest": {
									"method": "DELETE",
									"header": [],
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/published",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"revisions",
										"published"
									  ]
									}
								  },
								  "status": "Internal Server Error",
								  "code": 500,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
								},
								{
								  "name": "Not Found",
								  "originalRequest": {
									"method": "DELETE",
									"header": [],
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/published",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"revisions",
										"published"
									  ]
									}
								  },
								  "status": "Not Found",
								  "code": 404,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
								}
							  ]
							}
						  ],
						  "protocolProfileBehavior": {},
						  "_postman_isSubFolder": true
						},
						{
						  "name": "Retrieve a Document's Revisions",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/draft/v1/:type/:id/revisions",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								":type",
								":id",
								"revisions"
							  ],
							  "variable": [
								{
								  "description": "Type of the `Document`.\n",
								  "key": "type",
								  "type": "string",
								  "value": "<string>"
								},
								{
								  "description": "Id of the `Document`.\n",
								  "key": "id",
								  "type": "string",
								  "value": "<string>"
								}
							  ]
							},
							"description": "Retrieves all `Revisions` that belong to the `Document` specified by `type` and `id`.\n"
						  },
						  "response": [
							{
							  "name": "Bad Request",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions"
								  ]
								}
							  },
							  "status": "Bad Request",
							  "code": 400,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error\": \"<string>\"\n}"
							},
							{
							  "name": "Internal Server Error",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions"
								  ]
								}
							  },
							  "status": "Internal Server Error",
							  "code": 500,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							},
							{
							  "name": "Not Found",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions"
								  ]
								}
							  },
							  "status": "Not Found",
							  "code": 404,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							},
							{
							  "name": "Array of `Revisions`",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions"
								  ]
								}
							  },
							  "status": "OK",
							  "code": 200,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"revisions\": [\n  {\n   \"id\": \"<string>\",\n   \"created_at\": \"<string>\",\n   \"updated_at\": \"<string>\",\n   \"document_id\": \"<string>\",\n   \"ans\": \"<object>\",\n   \"type\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"created_at\": \"<string>\",\n   \"updated_at\": \"<string>\",\n   \"document_id\": \"<string>\",\n   \"ans\": \"<object>\",\n   \"type\": \"<string>\"\n  }\n ],\n \"last\": \"<string>\"\n}"
							}
						  ]
						},
						{
						  "name": "Retrieve a Document's Revision",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/draft/v1/:type/:id/revisions/:revision_id",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								":type",
								":id",
								"revisions",
								":revision_id"
							  ],
							  "variable": [
								{
								  "description": "Type of the `Document`.\n",
								  "key": "type",
								  "type": "string",
								  "value": "<string>"
								},
								{
								  "description": "Id of the `Document`.\n",
								  "key": "id",
								  "type": "string",
								  "value": "<string>"
								},
								{
								  "description": "Id of required `Revision`.\n",
								  "key": "revision_id",
								  "type": "string",
								  "value": "<string>"
								}
							  ]
							},
							"description": "Retrieves the specified `Revision` that belongs to the `Document` specified by `type` and `id`.\n"
						  },
						  "response": [
							{
							  "name": "A `Revision` object",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions",
									"<string>"
								  ]
								}
							  },
							  "status": "OK",
							  "code": 200,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"id\": \"<string>\",\n \"created_at\": \"<string>\",\n \"updated_at\": \"<string>\",\n \"document_id\": \"<string>\",\n \"ans\": \"<object>\",\n \"type\": \"<string>\"\n}"
							},
							{
							  "name": "Bad Request",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions",
									"<string>"
								  ]
								}
							  },
							  "status": "Bad Request",
							  "code": 400,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error\": \"<string>\"\n}"
							},
							{
							  "name": "Not Found",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions",
									"<string>"
								  ]
								}
							  },
							  "status": "Not Found",
							  "code": 404,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							},
							{
							  "name": "Internal Server Error",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions",
									"<string>"
								  ]
								}
							  },
							  "status": "Internal Server Error",
							  "code": 500,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							}
						  ]
						},
						{
						  "name": "Update a Document's draft Revision",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "PUT",
							"header": [
							  {
								"key": "Content-Type",
								"value": "application/json"
							  }
							],
							"body": {
							  "mode": "raw",
							  "raw": "{\n    \"ans\": \"<object>\",\n    \"id\": \"<string>\",\n    \"document_id\": \"<string>\",\n    \"type\": \"<string>\"\n}",
							  "options": {
								"raw": {}
							  }
							},
							"url": {
							  "raw": "https://api.{{baseUrl}}/draft/v1/:type/:id/revisions/draft",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								":type",
								":id",
								"revisions",
								"draft"
							  ],
							  "variable": [
								{
								  "description": "Type of the `Document`.\n",
								  "key": "type",
								  "type": "string",
								  "value": "<string>"
								},
								{
								  "description": "Id of the `Document`.\n",
								  "key": "id",
								  "type": "string",
								  "value": "<string>"
								}
							  ]
							},
							"description": "Creates a new draft `Revision` from the request body Revision and sets it as the specified `Document`'s draft `Revision`.\n\nThis API returns the new draft `Revision`.\n\nThis endpoint will reject any object received in input if the following fields are set:\n\n  - ans.websites\n  - ans.canonical_url\n  - ans.taxonomy.sections\n  - ans.taxonomy.sites\n  - ans.taxonomy.primary_section\n  - ans.taxonomy.primary_site\n\nANS > `0.10` is required.\n"
						  },
						  "response": [
							{
							  "name": "Not Found",
							  "originalRequest": {
								"method": "PUT",
								"header": [
								  {
									"key": "Content-Type",
									"value": "application/json"
								  }
								],
								"body": {
								  "mode": "raw",
								  "raw": "{\n    \"ans\": \"<object>\",\n    \"id\": \"<string>\",\n    \"document_id\": \"<string>\",\n    \"type\": \"<string>\"\n}"
								},
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/draft",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions",
									"draft"
								  ]
								}
							  },
							  "status": "Not Found",
							  "code": 404,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							},
							{
							  "name": "Bad Request",
							  "originalRequest": {
								"method": "PUT",
								"header": [
								  {
									"key": "Content-Type",
									"value": "application/json"
								  }
								],
								"body": {
								  "mode": "raw",
								  "raw": "{\n    \"ans\": \"<object>\",\n    \"id\": \"<string>\",\n    \"document_id\": \"<string>\",\n    \"type\": \"<string>\"\n}"
								},
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/draft",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions",
									"draft"
								  ]
								}
							  },
							  "status": "Bad Request",
							  "code": 400,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error\": \"<string>\"\n}"
							},
							{
							  "name": "A `Revision` object",
							  "originalRequest": {
								"method": "PUT",
								"header": [
								  {
									"key": "Content-Type",
									"value": "application/json"
								  }
								],
								"body": {
								  "mode": "raw",
								  "raw": "{\n    \"ans\": \"<object>\",\n    \"id\": \"<string>\",\n    \"document_id\": \"<string>\",\n    \"type\": \"<string>\"\n}"
								},
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/draft",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions",
									"draft"
								  ]
								}
							  },
							  "status": "OK",
							  "code": 200,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"id\": \"<string>\",\n \"created_at\": \"<string>\",\n \"updated_at\": \"<string>\",\n \"document_id\": \"<string>\",\n \"ans\": \"<object>\",\n \"type\": \"<string>\"\n}"
							},
							{
							  "name": "Internal Server Error",
							  "originalRequest": {
								"method": "PUT",
								"header": [
								  {
									"key": "Content-Type",
									"value": "application/json"
								  }
								],
								"body": {
								  "mode": "raw",
								  "raw": "{\n    \"ans\": \"<object>\",\n    \"id\": \"<string>\",\n    \"document_id\": \"<string>\",\n    \"type\": \"<string>\"\n}"
								},
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/draft",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions",
									"draft"
								  ]
								}
							  },
							  "status": "Internal Server Error",
							  "code": 500,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							}
						  ]
						},
						{
						  "name": "Revert a Document's draft Revision",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/draft/v1/:type/:id/revisions/revert",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								":type",
								":id",
								"revisions",
								"revert"
							  ],
							  "variable": [
								{
								  "description": "Type of the `Document`.\n",
								  "key": "type",
								  "type": "string",
								  "value": "<string>"
								},
								{
								  "description": "Id of the `Document`.\n",
								  "key": "id",
								  "type": "string",
								  "value": "<string>"
								}
							  ]
							},
							"description": "Creates a new draft `Revision` from the current published `Revision` for the `Document` specified by `type` and `id`.  This operation does not affect the current published `Revision`.\n\nThis API returns the new draft `Revision`.\n"
						  },
						  "response": [
							{
							  "name": "Bad Request",
							  "originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/revert",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions",
									"revert"
								  ]
								}
							  },
							  "status": "Bad Request",
							  "code": 400,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error\": \"<string>\"\n}"
							},
							{
							  "name": "Internal Server Error",
							  "originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/revert",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions",
									"revert"
								  ]
								}
							  },
							  "status": "Internal Server Error",
							  "code": 500,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							},
							{
							  "name": "A `Revision` object",
							  "originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/revert",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions",
									"revert"
								  ]
								}
							  },
							  "status": "OK",
							  "code": 200,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"id\": \"<string>\",\n \"created_at\": \"<string>\",\n \"updated_at\": \"<string>\",\n \"document_id\": \"<string>\",\n \"ans\": \"<object>\",\n \"type\": \"<string>\"\n}"
							},
							{
							  "name": "Not Found",
							  "originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/revisions/revert",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"revisions",
									"revert"
								  ]
								}
							  },
							  "status": "Not Found",
							  "code": 404,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							}
						  ]
						}
					  ],
					  "protocolProfileBehavior": {},
					  "_postman_isSubFolder": true
					},
					{
					  "name": "circulations",
					  "item": [
						{
						  "name": "{website}",
						  "item": [
							{
							  "name": "Circulate a Document",
							  "request": {
								"auth": {
								  "type": "bearer",
								  "bearer": [
									{
									  "key": "token",
									  "value": "{{token}}",
									  "type": "string"
									}
								  ]
								},
								"method": "PUT",
								"header": [
								  {
									"key": "Content-Type",
									"value": "application/json"
								  }
								],
								"body": {
								  "mode": "raw",
								  "raw": "{\n    \"document_id\": \"<string>\",\n    \"website_id\": \"<string>\",\n    \"website_url\": \"<string>\",\n    \"website_primary_section\": \"<object>\",\n    \"website_sections\": \"<array>\"\n}",
								  "options": {
									"raw": {}
								  }
								},
								"url": {
								  "raw": "https://api.{{baseUrl}}/draft/v1/:type/:id/circulations/:website?collision_behavior=<string>",
								  "protocol": "https",
								  "host": [
									"api",
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									":type",
									":id",
									"circulations",
									":website"
								  ],
								  "query": [
									{
									  "key": "collision_behavior",
									  "value": "<string>",
									  "description": "Query parameter to allow an auto-incremented URL over a failure condition in case of URL collision.\n"
									}
								  ],
								  "variable": [
									{
									  "description": "Type of the `Document`.\n",
									  "key": "type",
									  "type": "string",
									  "value": "<string>"
									},
									{
									  "description": "Id of the `Document`.\n",
									  "key": "id",
									  "type": "string",
									  "value": "<string>"
									},
									{
									  "description": "Website ID from Site Service\n",
									  "key": "website",
									  "type": "string",
									  "value": "{{website}}"
									}
								  ]
								},
								"description": "Creates or updates a `Circulation`. The `website_url` field may be omitted to trigger (re)generation based on pre-configured formatting rules.\n\nIf the `website_url` value changes, a new `Redirect` is created to forward from the old value to the new. If the new value of `website_url` matches an existing `Redirect`, the existing `Redirect` is converted to the `Circulation`'s primary URL.\n"
							  },
							  "response": [
								{
								  "name": "Internal Server Error",
								  "originalRequest": {
									"method": "PUT",
									"header": [
									  {
										"key": "Content-Type",
										"value": "application/json"
									  }
									],
									"body": {
									  "mode": "raw",
									  "raw": "{\n    \"document_id\": \"<string>\",\n    \"website_id\": \"<string>\",\n    \"website_url\": \"<string>\",\n    \"website_primary_section\": \"<object>\",\n    \"website_sections\": \"<array>\"\n}"
									},
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/circulations/<string>?collision_behavior=<string>",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"circulations",
										"<string>"
									  ],
									  "query": [
										{
										  "key": "collision_behavior",
										  "value": "<string>"
										}
									  ]
									}
								  },
								  "status": "Internal Server Error",
								  "code": 500,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
								},
								{
								  "name": "A `Circulation` object",
								  "originalRequest": {
									"method": "PUT",
									"header": [
									  {
										"key": "Content-Type",
										"value": "application/json"
									  }
									],
									"body": {
									  "mode": "raw",
									  "raw": "{\n    \"document_id\": \"<string>\",\n    \"website_id\": \"<string>\",\n    \"website_url\": \"<string>\",\n    \"website_primary_section\": \"<object>\",\n    \"website_sections\": \"<array>\"\n}"
									},
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/circulations/<string>?collision_behavior=<string>",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"circulations",
										"<string>"
									  ],
									  "query": [
										{
										  "key": "collision_behavior",
										  "value": "<string>"
										}
									  ]
									}
								  },
								  "status": "OK",
								  "code": 200,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"document_id\": \"<string>\",\n \"website_id\": \"<string>\",\n \"website_url\": \"<string>\",\n \"website_primary_section\": \"<object>\",\n \"website_sections\": \"<array>\"\n}"
								},
								{
								  "name": "Not Found",
								  "originalRequest": {
									"method": "PUT",
									"header": [
									  {
										"key": "Content-Type",
										"value": "application/json"
									  }
									],
									"body": {
									  "mode": "raw",
									  "raw": "{\n    \"document_id\": \"<string>\",\n    \"website_id\": \"<string>\",\n    \"website_url\": \"<string>\",\n    \"website_primary_section\": \"<object>\",\n    \"website_sections\": \"<array>\"\n}"
									},
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/circulations/<string>?collision_behavior=<string>",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"circulations",
										"<string>"
									  ],
									  "query": [
										{
										  "key": "collision_behavior",
										  "value": "<string>"
										}
									  ]
									}
								  },
								  "status": "Not Found",
								  "code": 404,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
								},
								{
								  "name": "Bad Request",
								  "originalRequest": {
									"method": "PUT",
									"header": [
									  {
										"key": "Content-Type",
										"value": "application/json"
									  }
									],
									"body": {
									  "mode": "raw",
									  "raw": "{\n    \"document_id\": \"<string>\",\n    \"website_id\": \"<string>\",\n    \"website_url\": \"<string>\",\n    \"website_primary_section\": \"<object>\",\n    \"website_sections\": \"<array>\"\n}"
									},
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/circulations/<string>?collision_behavior=<string>",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"circulations",
										"<string>"
									  ],
									  "query": [
										{
										  "key": "collision_behavior",
										  "value": "<string>"
										}
									  ]
									}
								  },
								  "status": "Bad Request",
								  "code": 400,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"error\": \"<string>\"\n}"
								}
							  ]
							},
							{
							  "name": "Decirculate a Document",
							  "request": {
								"auth": {
								  "type": "bearer",
								  "bearer": [
									{
									  "key": "token",
									  "value": "{{token}}",
									  "type": "string"
									}
								  ]
								},
								"method": "DELETE",
								"header": [],
								"url": {
								  "raw": "https://api.{{baseUrl}}/draft/v1/:type/:id/circulations/:website",
								  "protocol": "https",
								  "host": [
									"api",
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									":type",
									":id",
									"circulations",
									":website"
								  ],
								  "variable": [
									{
									  "description": "Type of the `Document`.\n",
									  "key": "type",
									  "type": "string",
									  "value": "<string>"
									},
									{
									  "description": "Id of the `Document`.\n",
									  "key": "id",
									  "type": "string",
									  "value": "<string>"
									},
									{
									  "description": "Website ID from Site Service\n",
									  "key": "website",
									  "type": "string",
									  "value": "{{website}}"
									}
								  ]
								},
								"description": "Deletes the `Circulation`  of the given `Document` for a website.\n"
							  },
							  "response": [
								{
								  "name": "Internal Server Error",
								  "originalRequest": {
									"method": "DELETE",
									"header": [],
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/circulations/<string>",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"circulations",
										"<string>"
									  ]
									}
								  },
								  "status": "Internal Server Error",
								  "code": 500,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
								},
								{
								  "name": "Not Found",
								  "originalRequest": {
									"method": "DELETE",
									"header": [],
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/circulations/<string>",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"circulations",
										"<string>"
									  ]
									}
								  },
								  "status": "Not Found",
								  "code": 404,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
								},
								{
								  "name": "A `Circulation` object",
								  "originalRequest": {
									"method": "DELETE",
									"header": [],
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/circulations/<string>",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"circulations",
										"<string>"
									  ]
									}
								  },
								  "status": "OK",
								  "code": 200,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"document_id\": \"<string>\",\n \"website_id\": \"<string>\",\n \"website_url\": \"<string>\",\n \"website_primary_section\": \"<object>\",\n \"website_sections\": \"<array>\"\n}"
								}
							  ]
							},
							{
							  "name": "Fetch a Document's Circulation",
							  "request": {
								"auth": {
								  "type": "bearer",
								  "bearer": [
									{
									  "key": "token",
									  "value": "{{token}}",
									  "type": "string"
									}
								  ]
								},
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "https://api.{{baseUrl}}/draft/v1/:type/:id/circulations/:website",
								  "protocol": "https",
								  "host": [
									"api",
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									":type",
									":id",
									"circulations",
									":website"
								  ],
								  "variable": [
									{
									  "description": "Type of the `Document`.\n",
									  "key": "type",
									  "type": "string",
									  "value": "<string>"
									},
									{
									  "description": "Id of the `Document`.\n",
									  "key": "id",
									  "type": "string",
									  "value": "<string>"
									},
									{
									  "description": "Website ID from Site Service\n",
									  "key": "website",
									  "type": "string",
									  "value": "{{website}}"
									}
								  ]
								},
								"description": "Retrieves a `Circulation` for a given `Document` and website.\n"
							  },
							  "response": [
								{
								  "name": "Not Found",
								  "originalRequest": {
									"method": "GET",
									"header": [],
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/circulations/<string>",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"circulations",
										"<string>"
									  ]
									}
								  },
								  "status": "Not Found",
								  "code": 404,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
								},
								{
								  "name": "A `Circulation` object",
								  "originalRequest": {
									"method": "GET",
									"header": [],
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/circulations/<string>",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"circulations",
										"<string>"
									  ]
									}
								  },
								  "status": "OK",
								  "code": 200,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"document_id\": \"<string>\",\n \"website_id\": \"<string>\",\n \"website_url\": \"<string>\",\n \"website_primary_section\": \"<object>\",\n \"website_sections\": \"<array>\"\n}"
								},
								{
								  "name": "Internal Server Error",
								  "originalRequest": {
									"method": "GET",
									"header": [],
									"url": {
									  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/circulations/<string>",
									  "host": [
										"{{baseUrl}}"
									  ],
									  "path": [
										"draft",
										"v1",
										"<string>",
										"<string>",
										"circulations",
										"<string>"
									  ]
									}
								  },
								  "status": "Internal Server Error",
								  "code": 500,
								  "_postman_previewlanguage": "json",
								  "header": [
									{
									  "key": "Content-Type",
									  "value": "application/json"
									}
								  ],
								  "cookie": [],
								  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
								}
							  ]
							}
						  ],
						  "protocolProfileBehavior": {},
						  "_postman_isSubFolder": true
						},
						{
						  "name": "List a Document's Circulations",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/draft/v1/:type/:id/circulations?after=<string>",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								":type",
								":id",
								"circulations"
							  ],
							  "query": [
								{
								  "key": "after",
								  "value": "<string>",
								  "description": "Pagination cursor returned in `last` field from a previous response\n"
								}
							  ],
							  "variable": [
								{
								  "description": "Type of the `Document`.\n",
								  "key": "type",
								  "type": "string",
								  "value": "<string>"
								},
								{
								  "description": "Id of the `Document`.\n",
								  "key": "id",
								  "type": "string",
								  "value": "<string>"
								}
							  ]
							},
							"description": "Retrieves a paginated list of `Circulation` objects for the given document. If the result length is too long, Draft API may return a `last` pagination cursor to supply in `after` parameter with a subsequent call for the next page.\n"
						  },
						  "response": [
							{
							  "name": "Internal Server Error",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/circulations?after=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"circulations"
								  ],
								  "query": [
									{
									  "key": "after",
									  "value": "<string>"
									}
								  ]
								}
							  },
							  "status": "Internal Server Error",
							  "code": 500,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							},
							{
							  "name": "Not Found",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/circulations?after=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"circulations"
								  ],
								  "query": [
									{
									  "key": "after",
									  "value": "<string>"
									}
								  ]
								}
							  },
							  "status": "Not Found",
							  "code": 404,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							},
							{
							  "name": "Array of `Circulations`",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/circulations?after=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"<string>",
									"<string>",
									"circulations"
								  ],
								  "query": [
									{
									  "key": "after",
									  "value": "<string>"
									}
								  ]
								}
							  },
							  "status": "OK",
							  "code": 200,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"circulations\": [\n  {\n   \"document_id\": \"<string>\",\n   \"website_id\": \"<string>\",\n   \"website_url\": \"<string>\",\n   \"website_primary_section\": \"<object>\",\n   \"website_sections\": \"<array>\"\n  },\n  {\n   \"document_id\": \"<string>\",\n   \"website_id\": \"<string>\",\n   \"website_url\": \"<string>\",\n   \"website_primary_section\": \"<object>\",\n   \"website_sections\": \"<array>\"\n  }\n ],\n \"last\": \"<string>\"\n}"
							}
						  ]
						}
					  ],
					  "protocolProfileBehavior": {},
					  "_postman_isSubFolder": true
					},
					{
					  "name": "Retrieve a Document",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/draft/v1/:type/:id",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"draft",
							"v1",
							":type",
							":id"
						  ],
						  "variable": [
							{
							  "description": "Type of the `Document`.\n",
							  "key": "type",
							  "type": "string",
							  "value": "<string>"
							},
							{
							  "description": "Id of the `Document`.\n",
							  "key": "id",
							  "type": "string",
							  "value": "<string>"
							}
						  ]
						},
						"description": "Retrieves the `Document` specified by `type` and `id`.\n"
					  },
					  "response": [
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/<string>/<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"<string>",
								"<string>"
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
						},
						{
						  "name": "Internal Server Error",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/<string>/<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"<string>",
								"<string>"
							  ]
							}
						  },
						  "status": "Internal Server Error",
						  "code": 500,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
						},
						{
						  "name": "A `Document` object",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/<string>/<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"<string>",
								"<string>"
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"id\": \"<string>\",\n \"draft_revision_id\": \"<string>\",\n \"published_revision_id\": \"<string>\",\n \"first_published_at\": \"<string>\",\n \"last_published_at\": \"<string>\",\n \"created_at\": \"<string>\",\n \"updated_at\": \"<string>\",\n \"first_unpublished_at\": \"<string>\",\n \"last_unpublished_at\": \"<string>\",\n \"type\": \"<string>\"\n}"
						}
					  ]
					},
					{
					  "name": "List a Document's Redirects",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/draft/v1/:type/:id/redirects/:website?website={{website}}&after=<string>",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"draft",
							"v1",
							":type",
							":id",
							"redirects",
							":website"
						  ],
						  "query": [
							{
							  "key": "website",
							  "value": "{{website}}",
							  "description": "Website ID from Site Service\n"
							},
							{
							  "key": "after",
							  "value": "<string>",
							  "description": "Pagination cursor returned in `last` field from a previous response\n"
							}
						  ],
						  "variable": [
							{
							  "description": "Type of the `Document`.\n",
							  "key": "type",
							  "type": "string",
							  "value": "<string>"
							},
							{
							  "description": "Id of the `Document`.\n",
							  "key": "id",
							  "type": "string",
							  "value": "<string>"
							},
							{
							  "description": "The website ID",
							  "key": "website",
							  "type": "string",
							  "value": "{{website}}"
							}
						  ]
						},
						"description": "Retrieves a paginated list of `Redirect` objects for the given `Document`.  The returned `Redirects` can be a `Document Redirect` or an `External Redirect` that resolves to the `Document`.  If the result length is too long, Draft API may return a `last` pagination cursor to supply in `after` parameter with a subsequent call for the next page.  Results are sorted by `updated_at` in descending order.\n"
					  },
					  "response": [
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/redirects/:website?website=<string>&after=<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"<string>",
								"<string>",
								"redirects",
								":website"
							  ],
							  "query": [
								{
								  "key": "website",
								  "value": "<string>"
								},
								{
								  "key": "after",
								  "value": "<string>"
								}
							  ],
							  "variable": [
								{
								  "key": "website"
								}
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
						},
						{
						  "name": "Internal Server Error",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/redirects/:website?website=<string>&after=<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"<string>",
								"<string>",
								"redirects",
								":website"
							  ],
							  "query": [
								{
								  "key": "website",
								  "value": "<string>"
								},
								{
								  "key": "after",
								  "value": "<string>"
								}
							  ],
							  "variable": [
								{
								  "key": "website"
								}
							  ]
							}
						  },
						  "status": "Internal Server Error",
						  "code": 500,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
						},
						{
						  "name": "Array of `Redirects`",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/<string>/<string>/redirects/:website?website=<string>&after=<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"<string>",
								"<string>",
								"redirects",
								":website"
							  ],
							  "query": [
								{
								  "key": "website",
								  "value": "<string>"
								},
								{
								  "key": "after",
								  "value": "<string>"
								}
							  ],
							  "variable": [
								{
								  "key": "website"
								}
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"redirects\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ],\n \"last\": \"<string>\"\n}"
						}
					  ]
					}
				  ],
				  "protocolProfileBehavior": {},
				  "_postman_isSubFolder": true
				},
				{
				  "name": "Create a Document",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "POST",
					"header": [
					  {
						"key": "Content-Type",
						"value": "application/json"
					  }
					],
					"body": {
					  "mode": "raw",
					  "raw": "{\n    \"type\": \"<string>\",\n    \"version\": \"<string>\",\n    \"created_date\": \"<dateTime>\",\n    \"last_updated_date\": \"<dateTime>\"\n}",
					  "options": {
						"raw": {}
					  }
					},
					"url": {
					  "raw": "{{baseUrl}}/draft/v1/:type",
					  "host": [
						"{{baseUrl}}"
					  ],
					  "path": [
						"draft",
						"v1",
						":type"
					  ],
					  "variable": [
						{
						  "description": "Type of the `Document`.\n",
						  "id": "cc8c93ba-ed0c-4b89-964d-105471d07218",
						  "key": "type",
						  "type": "string",
						  "value": "<string>"
						}
					  ]
					},
					"description": "Creates a new `Document` of the specified `type`.  An ANS document (> `0.10`) must be specified in the HTTP body which will be used draft `Revision`.\n\nThis endpoint will reject any object received in input if the following fields are set.\n  - websites\n  - canonical_url\n  - taxonomy.sections\n  - taxonomy.sites\n  - taxonomy.primary_section\n  - taxonomy.primary_site\n"
				  },
				  "response": [
					{
					  "name": "Bad Request",
					  "originalRequest": {
						"method": "POST",
						"header": [
						  {
							"key": "Content-Type",
							"value": "application/json"
						  }
						],
						"body": {
						  "mode": "raw",
						  "raw": "{\n    \"type\": \"<string>\",\n    \"version\": \"<string>\",\n    \"created_date\": \"<dateTime>\",\n    \"last_updated_date\": \"<dateTime>\"\n}"
						},
						"url": {
						  "raw": "{{baseUrl}}/draft/v1/<string>",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"draft",
							"v1",
							"<string>"
						  ]
						}
					  },
					  "status": "Bad Request",
					  "code": 400,
					  "_postman_previewlanguage": "json",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "application/json"
						}
					  ],
					  "cookie": [],
					  "body": "{\n \"error\": \"<string>\"\n}"
					},
					{
					  "name": "Internal Server Error",
					  "originalRequest": {
						"method": "POST",
						"header": [
						  {
							"key": "Content-Type",
							"value": "application/json"
						  }
						],
						"body": {
						  "mode": "raw",
						  "raw": "{\n    \"type\": \"<string>\",\n    \"version\": \"<string>\",\n    \"created_date\": \"<dateTime>\",\n    \"last_updated_date\": \"<dateTime>\"\n}"
						},
						"url": {
						  "raw": "{{baseUrl}}/draft/v1/<string>",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"draft",
							"v1",
							"<string>"
						  ]
						}
					  },
					  "status": "Internal Server Error",
					  "code": 500,
					  "_postman_previewlanguage": "json",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "application/json"
						}
					  ],
					  "cookie": [],
					  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
					},
					{
					  "name": "A `Document` object",
					  "originalRequest": {
						"method": "POST",
						"header": [
						  {
							"key": "Content-Type",
							"value": "application/json"
						  }
						],
						"body": {
						  "mode": "raw",
						  "raw": "{\n    \"type\": \"<string>\",\n    \"version\": \"<string>\",\n    \"created_date\": \"<dateTime>\",\n    \"last_updated_date\": \"<dateTime>\"\n}"
						},
						"url": {
						  "raw": "{{baseUrl}}/draft/v1/<string>",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"draft",
							"v1",
							"<string>"
						  ]
						}
					  },
					  "status": "OK",
					  "code": 200,
					  "_postman_previewlanguage": "json",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "application/json"
						}
					  ],
					  "cookie": [],
					  "body": "{\n \"id\": \"<string>\",\n \"draft_revision_id\": \"<string>\",\n \"published_revision_id\": \"<string>\",\n \"first_published_at\": \"<string>\",\n \"last_published_at\": \"<string>\",\n \"created_at\": \"<string>\",\n \"updated_at\": \"<string>\",\n \"first_unpublished_at\": \"<string>\",\n \"last_unpublished_at\": \"<string>\",\n \"type\": \"<string>\"\n}"
					}
				  ]
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			},
			{
			  "name": "redirects",
			  "item": [
				{
				  "name": "{website}",
				  "item": [
					{
					  "name": "{website url}",
					  "item": [
						{
						  "name": "Fetch a Redirect",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/draft/v1/redirects/:website/:website_url?website={{website}}",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"redirects",
								":website",
								":website_url"
							  ],
							  "query": [
								{
								  "key": "website",
								  "value": "{{website}}",
								  "description": "Website ID from Site Service\n"
								}
							  ],
							  "variable": [
								{
								  "description": "Website ID",
								  "key": "website",
								  "type": "string",
								  "value": "{{website}}"
								},
								{
								  "description": "Relative URL served by the Arc Platform\n",
								  "key": "website_url",
								  "type": "string",
								  "value": "<string>"
								}
							  ]
							},
							"description": "Fetches a `Redirect` resolving `website_url` on the given website.  `Redirect` can be a `Document Redirect` or an `External Redirect`\n"
						  },
						  "response": [
							{
							  "name": "Internal Server Error",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/redirects/:website/<string>?website=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"redirects",
									":website",
									"<string>"
								  ],
								  "query": [
									{
									  "key": "website",
									  "value": "<string>"
									}
								  ],
								  "variable": [
									{
									  "key": "website"
									}
								  ]
								}
							  },
							  "status": "Internal Server Error",
							  "code": 500,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							},
							{
							  "name": "Not Found",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/redirects/:website/<string>?website=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"redirects",
									":website",
									"<string>"
								  ],
								  "query": [
									{
									  "key": "website",
									  "value": "<string>"
									}
								  ],
								  "variable": [
									{
									  "key": "website"
									}
								  ]
								}
							  },
							  "status": "Not Found",
							  "code": 404,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							},
							{
							  "name": "A `Redirect` object",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/redirects/:website/<string>?website=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"redirects",
									":website",
									"<string>"
								  ],
								  "query": [
									{
									  "key": "website",
									  "value": "<string>"
									}
								  ],
								  "variable": [
									{
									  "key": "website"
									}
								  ]
								}
							  },
							  "status": "OK",
							  "code": 200,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"website_id\": \"<string>\",\n \"website_url\": \"<string>\",\n \"redirect_to\": \"<string>\",\n \"created_at\": \"<string>\",\n \"updated_at\": \"<string>\"\n}"
							}
						  ]
						},
						{
						  "name": "Update a Redirect",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "PUT",
							"header": [
							  {
								"key": "Content-Type",
								"value": "application/json"
							  }
							],
							"body": {
							  "mode": "raw",
							  "raw": "{\n    \"redirect_to\": \"<string>\"\n}",
							  "options": {
								"raw": {}
							  }
							},
							"url": {
							  "raw": "https://api.{{baseUrl}}/draft/v1/redirects/:website/:website_url?website={{website}}",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"redirects",
								":website",
								":website_url"
							  ],
							  "query": [
								{
								  "key": "website",
								  "value": "{{website}}",
								  "description": "Website ID from Site Service\n"
								}
							  ],
							  "variable": [
								{
								  "description": "Website ID",
								  "key": "website",
								  "type": "string",
								  "value": "{{website}}"
								},
								{
								  "description": "Relative URL served by the Arc Platform\n",
								  "key": "website_url",
								  "type": "string",
								  "value": "<string>"
								}
							  ]
							},
							"description": "Updates a `Redirect`. Either `redirect_to` or `document_id` must be supplied for the target URL. The `redirect_to` field specifies a redirection rule pointing at an arbitrary URL (aka an External Redirect). `document_id` defines a redirect that always points to a `Document`'s current Circulation URL (aka a Document Redirect).\n"
						  },
						  "response": [
							{
							  "name": "Internal Server Error",
							  "originalRequest": {
								"method": "PUT",
								"header": [
								  {
									"key": "Content-Type",
									"value": "application/json"
								  }
								],
								"body": {
								  "mode": "raw",
								  "raw": "{\n    \"redirect_to\": \"<string>\"\n}"
								},
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/redirects/:website/<string>?website=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"redirects",
									":website",
									"<string>"
								  ],
								  "query": [
									{
									  "key": "website",
									  "value": "<string>"
									}
								  ],
								  "variable": [
									{
									  "key": "website"
									}
								  ]
								}
							  },
							  "status": "Internal Server Error",
							  "code": 500,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							},
							{
							  "name": "Not Found",
							  "originalRequest": {
								"method": "PUT",
								"header": [
								  {
									"key": "Content-Type",
									"value": "application/json"
								  }
								],
								"body": {
								  "mode": "raw",
								  "raw": "{\n    \"redirect_to\": \"<string>\"\n}"
								},
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/redirects/:website/<string>?website=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"redirects",
									":website",
									"<string>"
								  ],
								  "query": [
									{
									  "key": "website",
									  "value": "<string>"
									}
								  ],
								  "variable": [
									{
									  "key": "website"
									}
								  ]
								}
							  },
							  "status": "Not Found",
							  "code": 404,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							},
							{
							  "name": "A `Redirect` object",
							  "originalRequest": {
								"method": "PUT",
								"header": [
								  {
									"key": "Content-Type",
									"value": "application/json"
								  }
								],
								"body": {
								  "mode": "raw",
								  "raw": "{\n    \"redirect_to\": \"<string>\"\n}"
								},
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/redirects/:website/<string>?website=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"redirects",
									":website",
									"<string>"
								  ],
								  "query": [
									{
									  "key": "website",
									  "value": "<string>"
									}
								  ],
								  "variable": [
									{
									  "key": "website"
									}
								  ]
								}
							  },
							  "status": "OK",
							  "code": 200,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"website_id\": \"<string>\",\n \"website_url\": \"<string>\",\n \"redirect_to\": \"<string>\",\n \"created_at\": \"<string>\",\n \"updated_at\": \"<string>\"\n}"
							}
						  ]
						},
						{
						  "name": "Create a Redirect",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "POST",
							"header": [
							  {
								"key": "Content-Type",
								"value": "application/json"
							  }
							],
							"body": {
							  "mode": "raw",
							  "raw": "{\n    \"redirect_to\": \"<string>\"\n}",
							  "options": {
								"raw": {}
							  }
							},
							"url": {
							  "raw": "https://api.{{baseUrl}}/draft/v1/redirects/:website/:website_url?website={{website}}",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"redirects",
								":website",
								":website_url"
							  ],
							  "query": [
								{
								  "key": "website",
								  "value": "{{website}}",
								  "description": "Website ID from Site Service\n"
								}
							  ],
							  "variable": [
								{
								  "description": "Website ID",
								  "key": "website",
								  "type": "string",
								  "value": "{{website}}"
								},
								{
								  "description": "Relative URL served by the Arc Platform\n",
								  "key": "website_url",
								  "type": "string",
								  "value": "<string>"
								}
							  ]
							},
							"description": "Creates a `Redirect`. Either `redirect_to` or `document_id` must be supplied for the target URL. The `redirect_to` field specifies a redirection rule pointing at an arbitrary URL (aka an External Redirect). `document_id` defines a redirect that always points to a `Document`'s current Circulation URL (aka a Document Redirect).\n"
						  },
						  "response": [
							{
							  "name": "A `Redirect` object",
							  "originalRequest": {
								"method": "POST",
								"header": [
								  {
									"key": "Content-Type",
									"value": "application/json"
								  }
								],
								"body": {
								  "mode": "raw",
								  "raw": "{\n    \"redirect_to\": \"<string>\"\n}"
								},
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/redirects/:website/<string>?website=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"redirects",
									":website",
									"<string>"
								  ],
								  "query": [
									{
									  "key": "website",
									  "value": "<string>"
									}
								  ],
								  "variable": [
									{
									  "key": "website"
									}
								  ]
								}
							  },
							  "status": "OK",
							  "code": 200,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"website_id\": \"<string>\",\n \"website_url\": \"<string>\",\n \"redirect_to\": \"<string>\",\n \"created_at\": \"<string>\",\n \"updated_at\": \"<string>\"\n}"
							},
							{
							  "name": "Internal Server Error",
							  "originalRequest": {
								"method": "POST",
								"header": [
								  {
									"key": "Content-Type",
									"value": "application/json"
								  }
								],
								"body": {
								  "mode": "raw",
								  "raw": "{\n    \"redirect_to\": \"<string>\"\n}"
								},
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/redirects/:website/<string>?website=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"redirects",
									":website",
									"<string>"
								  ],
								  "query": [
									{
									  "key": "website",
									  "value": "<string>"
									}
								  ],
								  "variable": [
									{
									  "key": "website"
									}
								  ]
								}
							  },
							  "status": "Internal Server Error",
							  "code": 500,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							},
							{
							  "name": "Not Found",
							  "originalRequest": {
								"method": "POST",
								"header": [
								  {
									"key": "Content-Type",
									"value": "application/json"
								  }
								],
								"body": {
								  "mode": "raw",
								  "raw": "{\n    \"redirect_to\": \"<string>\"\n}"
								},
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/redirects/:website/<string>?website=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"redirects",
									":website",
									"<string>"
								  ],
								  "query": [
									{
									  "key": "website",
									  "value": "<string>"
									}
								  ],
								  "variable": [
									{
									  "key": "website"
									}
								  ]
								}
							  },
							  "status": "Not Found",
							  "code": 404,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							}
						  ]
						},
						{
						  "name": "Delete a Redirect",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/draft/v1/redirects/:website/:website_url?website={{website}}",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"redirects",
								":website",
								":website_url"
							  ],
							  "query": [
								{
								  "key": "website",
								  "value": "{{website}}",
								  "description": "Website ID from Site Service\n"
								}
							  ],
							  "variable": [
								{
								  "description": "Website ID",
								  "key": "website",
								  "type": "string",
								  "value": "{{website}}"
								},
								{
								  "description": "Relative URL served by the Arc Platform\n",
								  "key": "website_url",
								  "type": "string",
								  "value": "<string>"
								}
							  ]
							},
							"description": "Unsets a redirect resolving `url` on the given website.\n"
						  },
						  "response": [
							{
							  "name": "A `Redirect` object",
							  "originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/redirects/:website/<string>?website=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"redirects",
									":website",
									"<string>"
								  ],
								  "query": [
									{
									  "key": "website",
									  "value": "<string>"
									}
								  ],
								  "variable": [
									{
									  "key": "website"
									}
								  ]
								}
							  },
							  "status": "OK",
							  "code": 200,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"website_id\": \"<string>\",\n \"website_url\": \"<string>\",\n \"redirect_to\": \"<string>\",\n \"created_at\": \"<string>\",\n \"updated_at\": \"<string>\"\n}"
							},
							{
							  "name": "Internal Server Error",
							  "originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/redirects/:website/<string>?website=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"redirects",
									":website",
									"<string>"
								  ],
								  "query": [
									{
									  "key": "website",
									  "value": "<string>"
									}
								  ],
								  "variable": [
									{
									  "key": "website"
									}
								  ]
								}
							  },
							  "status": "Internal Server Error",
							  "code": 500,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							},
							{
							  "name": "Not Found",
							  "originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/draft/v1/redirects/:website/<string>?website=<string>",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"draft",
									"v1",
									"redirects",
									":website",
									"<string>"
								  ],
								  "query": [
									{
									  "key": "website",
									  "value": "<string>"
									}
								  ],
								  "variable": [
									{
									  "key": "website"
									}
								  ]
								}
							  },
							  "status": "Not Found",
							  "code": 404,
							  "_postman_previewlanguage": "json",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "application/json"
								}
							  ],
							  "cookie": [],
							  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
							}
						  ]
						}
					  ],
					  "protocolProfileBehavior": {},
					  "_postman_isSubFolder": true
					}
				  ],
				  "protocolProfileBehavior": {},
				  "_postman_isSubFolder": true
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			},
			{
			  "name": "url-format-rules",
			  "item": [
				{
				  "name": "{website}",
				  "item": [
					{
					  "name": "List URL Format Rules\n",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/draft/v1/url-format-rules/:website?after={{website}}",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"draft",
							"v1",
							"url-format-rules",
							":website"
						  ],
						  "query": [
							{
							  "key": "after",
							  "value": "{{website}}",
							  "description": "Pagination cursor returned in `last` field from a previous response\n"
							}
						  ],
						  "variable": [
							{
							  "description": "Website ID from Site Service\n",
							  "key": "website",
							  "type": "string",
							  "value": "{{website}}"
							}
						  ]
						},
						"description": "Lists URL Format Rules for the given website. A pagination cursor may be returned in the `last` for fetching subsequent pages via the `after` parameter."
					  },
					  "response": [
						{
						  "name": "Array of `FormatRule`",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/url-format-rules/<string>?after=<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"url-format-rules",
								"<string>"
							  ],
							  "query": [
								{
								  "key": "after",
								  "value": "<string>"
								}
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"rules\": [\n  {\n   \"id\": \"<string>\",\n   \"format\": \"<string>\",\n   \"priority\": \"<integer>\",\n   \"criteria\": \"<object>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"format\": \"<string>\",\n   \"priority\": \"<integer>\",\n   \"criteria\": \"<object>\"\n  }\n ],\n \"last\": \"<string>\"\n}"
						},
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/url-format-rules/<string>?after=<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"url-format-rules",
								"<string>"
							  ],
							  "query": [
								{
								  "key": "after",
								  "value": "<string>"
								}
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
						},
						{
						  "name": "Internal Server Error",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/url-format-rules/<string>?after=<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"url-format-rules",
								"<string>"
							  ],
							  "query": [
								{
								  "key": "after",
								  "value": "<string>"
								}
							  ]
							}
						  },
						  "status": "Internal Server Error",
						  "code": 500,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
						}
					  ]
					},
					{
					  "name": "Create an URL Format Rule",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "POST",
						"header": [
						  {
							"key": "Content-Type",
							"value": "application/json"
						  }
						],
						"body": {
						  "mode": "raw",
						  "raw": "{\n    \"id\": \"<string>\",\n    \"format\": \"<string>\",\n    \"priority\": \"<integer>\",\n    \"criteria\": \"<object>\"\n}",
						  "options": {
							"raw": {}
						  }
						},
						"url": {
						  "raw": "https://api.{{baseUrl}}/draft/v1/url-format-rules/:website?website={{website}}",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"draft",
							"v1",
							"url-format-rules",
							":website"
						  ],
						  "query": [
							{
							  "key": "website",
							  "value": "{{website}}",
							  "description": "Website ID from Site Service\n"
							}
						  ],
						  "variable": [
							{
							  "description": "Website ID",
							  "key": "website",
							  "type": "string",
							  "value": "{{website}}"
							}
						  ]
						},
						"description": "Creates a new URL Format Rule from a given formatting expression. The request accepts a Unique ID for a given website. If not present in the request JSON, a unique value will be set automatically. Can be `default`.\n"
					  },
					  "response": [
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "POST",
							"header": [
							  {
								"key": "Content-Type",
								"value": "application/json"
							  }
							],
							"body": {
							  "mode": "raw",
							  "raw": "{\n    \"id\": \"<string>\",\n    \"format\": \"<string>\",\n    \"priority\": \"<integer>\",\n    \"criteria\": \"<object>\"\n}"
							},
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/url-format-rules/:website?website=<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"url-format-rules",
								":website"
							  ],
							  "query": [
								{
								  "key": "website",
								  "value": "<string>"
								}
							  ],
							  "variable": [
								{
								  "key": "website"
								}
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"error_code\": \"ErrNotFound\",\n \"error_message\": \"Website '{website}' not found\",\n \"request_id\": \"d2e958bb-a499-4cba-aae9-c2c78ceca607\"\n}"
						},
						{
						  "name": "A `Format` object",
						  "originalRequest": {
							"method": "POST",
							"header": [
							  {
								"key": "Content-Type",
								"value": "application/json"
							  }
							],
							"body": {
							  "mode": "raw",
							  "raw": "{\n    \"id\": \"<string>\",\n    \"format\": \"<string>\",\n    \"priority\": \"<integer>\",\n    \"criteria\": \"<object>\"\n}"
							},
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/url-format-rules/:website?website=<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"url-format-rules",
								":website"
							  ],
							  "query": [
								{
								  "key": "website",
								  "value": "<string>"
								}
							  ],
							  "variable": [
								{
								  "key": "website"
								}
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"id\": \"<string>\",\n \"format\": \"<string>\",\n \"priority\": \"<integer>\",\n \"criteria\": \"<object>\"\n}"
						},
						{
						  "name": "Bad Request",
						  "originalRequest": {
							"method": "POST",
							"header": [
							  {
								"key": "Content-Type",
								"value": "application/json"
							  }
							],
							"body": {
							  "mode": "raw",
							  "raw": "{\n    \"id\": \"<string>\",\n    \"format\": \"<string>\",\n    \"priority\": \"<integer>\",\n    \"criteria\": \"<object>\"\n}"
							},
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/url-format-rules/:website?website=<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"url-format-rules",
								":website"
							  ],
							  "query": [
								{
								  "key": "website",
								  "value": "<string>"
								}
							  ],
							  "variable": [
								{
								  "key": "website"
								}
							  ]
							}
						  },
						  "status": "Bad Request",
						  "code": 400,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"error_code\": \"ErrInvalidParam\",\n \"error_message\": \"Request body is missing the required field 'format'\",\n \"request_id\": \"6b16d16d-62d7-408f-820f-a9a991c2c44b\"\n}"
						},
						{
						  "name": "Internal Server Error",
						  "originalRequest": {
							"method": "POST",
							"header": [
							  {
								"key": "Content-Type",
								"value": "application/json"
							  }
							],
							"body": {
							  "mode": "raw",
							  "raw": "{\n    \"id\": \"<string>\",\n    \"format\": \"<string>\",\n    \"priority\": \"<integer>\",\n    \"criteria\": \"<object>\"\n}"
							},
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/url-format-rules/:website?website=<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"url-format-rules",
								":website"
							  ],
							  "query": [
								{
								  "key": "website",
								  "value": "<string>"
								}
							  ],
							  "variable": [
								{
								  "key": "website"
								}
							  ]
							}
						  },
						  "status": "Internal Server Error",
						  "code": 500,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
						}
					  ]
					},
					{
					  "name": "Delete an URL Format Rule",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "DELETE",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/draft/v1/url-format-rules/:website/:id",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"draft",
							"v1",
							"url-format-rules",
							":website",
							":id"
						  ],
						  "variable": [
							{
							  "description": "Website ID from Site Service\n",
							  "key": "website",
							  "type": "string",
							  "value": "{{website}}"
							},
							{
							  "description": "Id of the Format Rule.\n",
							  "key": "id",
							  "type": "string",
							  "value": "<string>"
							}
						  ]
						},
						"description": "Deletes an URL Format Rule on the given website\n"
					  },
					  "response": [
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/url-format-rules/<string>/<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"url-format-rules",
								"<string>",
								"<string>"
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"error_code\": \"ErrNotFound\",\n \"error_message\": \"Format '{id}' not found on website '{website}'\",\n \"request_id\": \"d2e958bb-a499-4cba-aae9-c2c78ceca607\"\n}"
						},
						{
						  "name": "A `Format` object",
						  "originalRequest": {
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/url-format-rules/<string>/<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"url-format-rules",
								"<string>",
								"<string>"
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"id\": \"<string>\",\n \"format\": \"<string>\",\n \"priority\": \"<integer>\",\n \"criteria\": \"<object>\"\n}"
						},
						{
						  "name": "Internal Server Error",
						  "originalRequest": {
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/url-format-rules/<string>/<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"url-format-rules",
								"<string>",
								"<string>"
							  ]
							}
						  },
						  "status": "Internal Server Error",
						  "code": 500,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"error_code\": \"<string>\",\n \"request_id\": \"<string>\"\n}"
						},
						{
						  "name": "Bad Request",
						  "originalRequest": {
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/draft/v1/url-format-rules/<string>/<string>",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"draft",
								"v1",
								"url-format-rules",
								"<string>",
								"<string>"
							  ]
							}
						  },
						  "status": "Bad Request",
						  "code": 400,
						  "_postman_previewlanguage": "json",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "application/json"
							}
						  ],
						  "cookie": [],
						  "body": "{\n \"error_code\": \"ErrInvalidParam\",\n \"error_message\": \"cannot delete the default format\",\n \"request_id\": \"6b16d16d-62d7-408f-820f-a9a991c2c44b\"\n}"
						}
					  ]
					}
				  ],
				  "protocolProfileBehavior": {},
				  "_postman_isSubFolder": true
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			}
		  ],
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		}
	  ],
	  "description": "Documentation is also available at: https://redirector.arcpublishing.com/alc/docs/swagger/?url=./arc-products/draft.json",
	  "event": [
		{
		  "listen": "prerequest",
		  "script": {
			"id": "e35d01a4-3b56-460d-878f-f63aa8ac19a0",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		},
		{
		  "listen": "test",
		  "script": {
			"id": "490f4d0c-7b58-4ff2-b2f9-8277ef9b968c",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		}
	  ],
	  "protocolProfileBehavior": {}
	},
	{
	  "name": "Search API",
	  "item": [
		{
		  "name": "Autocomplete",
		  "item": [
			{
			  "name": "by keyword",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://search.arcpublishing.com/autocomplete?q=omaba&key={{search_key}}",
				  "protocol": "https",
				  "host": [
					"search",
					"arcpublishing",
					"com"
				  ],
				  "path": [
					"autocomplete"
				  ],
				  "query": [
					{
					  "key": "q",
					  "value": "omaba",
					  "description": "What to autocomplete"
					},
					{
					  "key": "key",
					  "value": "{{search_key}}",
					  "description": "Your search key, provided by your TAM or TDM"
					}
				  ]
				}
			  },
			  "response": [
				{
				  "name": "by keyword",
				  "originalRequest": {
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://search.arcpublishing.com/autocomplete?q=omaba&key=<string>",
					  "protocol": "https",
					  "host": [
						"search",
						"arcpublishing",
						"com"
					  ],
					  "path": [
						"autocomplete"
					  ],
					  "query": [
						{
						  "key": "q",
						  "value": "omaba",
						  "description": "What to autocomplete"
						},
						{
						  "key": "key",
						  "value": "<string>",
						  "description": "Your search key, provided by your TAM or TDM"
						}
					  ]
					}
				  },
				  "status": "OK",
				  "code": 200,
				  "_postman_previewlanguage": null,
				  "header": null,
				  "cookie": [],
				  "body": "{\n    \"metadata\": {\n        \"q\": \"omaba\",\n        \"took\": 73\n    },\n    \"data\": [\n        {\n            \"value\": \"obama\"\n        },\n        {\n            \"value\": \"omaha\"\n        },\n        {\n            \"value\": \"ohara\"\n        },\n        {\n            \"value\": \"omega\"\n        },\n        {\n            \"value\": \"ocala\"\n        }\n    ]\n}"
				}
			  ]
			}
		  ],
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		},
		{
		  "name": "Sorted Items by Date",
		  "request": {
			"method": "GET",
			"header": [
			  {
				"key": "Authorization",
				"value": "Basic c2ZyOjNiZjM1MzIwNTRhOGViYmQwNTc2OGY3YjNlZTBiZDUwNTg4Y2JiMmQxN2JkZDYxMzdmZGViNmQyMTE4ZTg3NDdjZGU2MTQzMTYzMjkwODdh"
			  }
			],
			"url": {
			  "raw": "https://search.arcpublishing.com/search?key={{search_key}}&data=items&q=test&s=date",
			  "protocol": "https",
			  "host": [
				"search",
				"arcpublishing",
				"com"
			  ],
			  "path": [
				"search"
			  ],
			  "query": [
				{
				  "key": "key",
				  "value": "{{search_key}}",
				  "description": "Your search key, provided by your TAM or TDM"
				},
				{
				  "key": "data",
				  "value": "items",
				  "description": "What ANS object to search in"
				},
				{
				  "key": "q",
				  "value": "test",
				  "description": "What to query for"
				},
				{
				  "key": "s",
				  "value": "date",
				  "description": "Sorted by: date or score"
				},
				{
				  "key": "website_id",
				  "value": "{{website}}",
				  "description": "If not provided will contain your default website",
				  "disabled": true
				},
				{
				  "key": "t",
				  "value": "story",
				  "description": "Type: gallery, story or video",
				  "disabled": true
				},
				{
				  "key": "page",
				  "value": "1",
				  "description": "The page of results, defaults to 1",
				  "disabled": true
				},
				{
				  "key": "per_page",
				  "value": "10",
				  "description": "How many results per page, defaults to 10. Range of 1 to 100.",
				  "disabled": true
				},
				{
				  "key": "timeframe",
				  "value": "1|w",
				  "description": "Timeframe for the results, defaults to 1 week",
				  "disabled": true
				},
				{
				  "key": "canonical_website",
				  "value": "<string>",
				  "description": "Canonical url ",
				  "disabled": true
				},
				{
				  "key": "sections",
				  "value": "<string[]>",
				  "description": "Limit results to these sections",
				  "disabled": true
				},
				{
				  "key": "authors",
				  "value": "<string[]>",
				  "description": "Results by these authors",
				  "disabled": true
				},
				{
				  "key": "metadata",
				  "value": "metadata",
				  "description": "What metadata object to search in",
				  "disabled": true
				},
				{
				  "key": "aggregations",
				  "value": "aggregations",
				  "disabled": true
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Sorted Paginated Content Elements by Date",
		  "request": {
			"method": "GET",
			"header": [],
			"url": {
			  "raw": "https://search.arcpublishing.com/search?q=test&timeframe=1|year&t=story&page=1&per_page=20&data=content_elements&key={{search_key}}&s=date",
			  "protocol": "https",
			  "host": [
				"search",
				"arcpublishing",
				"com"
			  ],
			  "path": [
				"search"
			  ],
			  "query": [
				{
				  "key": "q",
				  "value": "test",
				  "description": "What to search for"
				},
				{
				  "key": "timeframe",
				  "value": "1|year",
				  "description": "Timeframe for the search results"
				},
				{
				  "key": "t",
				  "value": "story",
				  "description": "Type: gallery, story or video"
				},
				{
				  "key": "page",
				  "value": "1",
				  "description": "Page to start on"
				},
				{
				  "key": "per_page",
				  "value": "20",
				  "description": "Number of results per page"
				},
				{
				  "key": "data",
				  "value": "content_elements",
				  "description": "What ANS fields to look in"
				},
				{
				  "key": "key",
				  "value": "{{search_key}}",
				  "description": "Your search key, provided by your TAM or TDM"
				},
				{
				  "key": "s",
				  "value": "date",
				  "description": "Sorted by: date or score"
				},
				{
				  "key": "website_id",
				  "value": "{{website}}",
				  "description": "If not provided will contain your default website",
				  "disabled": true
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Sorted Content Elements by Date Descending",
		  "request": {
			"method": "GET",
			"header": [],
			"url": {
			  "raw": "https://search.arcpublishing.com/search?data=content_elements&q=test&s=date:desc&key={{search_key}}",
			  "protocol": "https",
			  "host": [
				"search",
				"arcpublishing",
				"com"
			  ],
			  "path": [
				"search"
			  ],
			  "query": [
				{
				  "key": "data",
				  "value": "content_elements",
				  "description": "What ANS fields to look in"
				},
				{
				  "key": "q",
				  "value": "test",
				  "description": "What to search for"
				},
				{
				  "key": "s",
				  "value": "date:desc",
				  "description": "How to sort the results"
				},
				{
				  "key": "key",
				  "value": "{{search_key}}",
				  "description": "Your search key, provided by your TAM or TDM"
				},
				{
				  "key": "t",
				  "value": "story",
				  "description": "Type: gallery, story or video",
				  "disabled": true
				},
				{
				  "key": "website_id",
				  "value": "{{website}}",
				  "description": "If not provided will contain your default website",
				  "disabled": true
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Sorted Content Elements Within Timeframe By Date",
		  "request": {
			"method": "GET",
			"header": [
			  {
				"key": "Authorization",
				"value": "Basic c2ZyOjNiZjM1MzIwNTRhOGViYmQwNTc2OGY3YjNlZTBiZDUwNTg4Y2JiMmQxN2JkZDYxMzdmZGViNmQyMTE4ZTg3NDdjZGU2MTQzMTYzMjkwODdh"
			  }
			],
			"url": {
			  "raw": "https://search.arcpublishing.com/search?q=test&t=story&page=1&per_page=20&timeframe=1|year&s=date&data=content_elements&key={{search_key}}",
			  "protocol": "https",
			  "host": [
				"search",
				"arcpublishing",
				"com"
			  ],
			  "path": [
				"search"
			  ],
			  "query": [
				{
				  "key": "q",
				  "value": "test",
				  "description": "What to search for"
				},
				{
				  "key": "t",
				  "value": "story",
				  "description": "Type: gallery, story or video"
				},
				{
				  "key": "page",
				  "value": "1",
				  "description": "Starting page"
				},
				{
				  "key": "per_page",
				  "value": "20",
				  "description": "Number per page"
				},
				{
				  "key": "timeframe",
				  "value": "1|year",
				  "description": "Time frame to search in"
				},
				{
				  "key": "s",
				  "value": "date",
				  "description": "Sorted by"
				},
				{
				  "key": "data",
				  "value": "content_elements",
				  "description": "What to search in"
				},
				{
				  "key": "key",
				  "value": "{{search_key}}",
				  "description": "Your search key (get from your TAM or TDM)"
				},
				{
				  "key": "website_id",
				  "value": "{{website}}",
				  "description": "If not provided will contain your default website",
				  "disabled": true
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Basic Content Element Search",
		  "request": {
			"method": "GET",
			"header": [],
			"url": {
			  "raw": "https://search.arcpublishing.com/search?data=content_elements&key={{search_key}}&q=test",
			  "protocol": "https",
			  "host": [
				"search",
				"arcpublishing",
				"com"
			  ],
			  "path": [
				"search"
			  ],
			  "query": [
				{
				  "key": "data",
				  "value": "content_elements",
				  "description": "What ANS field to search in"
				},
				{
				  "key": "key",
				  "value": "{{search_key}}",
				  "description": "Your search key, provided by your TAM or TDM"
				},
				{
				  "key": "q",
				  "value": "test",
				  "description": "What to look for"
				},
				{
				  "key": "t",
				  "value": "story",
				  "description": "Type: gallery, story or video",
				  "disabled": true
				},
				{
				  "key": "website_id",
				  "value": "{{website}}",
				  "description": "If not provided will contain your default website",
				  "disabled": true
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Basic Items Search",
		  "request": {
			"method": "GET",
			"header": [
			  {
				"key": "Authorization",
				"value": "Basic c2ZyOjNiZjM1MzIwNTRhOGViYmQwNTc2OGY3YjNlZTBiZDUwNTg4Y2JiMmQxN2JkZDYxMzdmZGViNmQyMTE4ZTg3NDdjZGU2MTQzMTYzMjkwODdh"
			  }
			],
			"url": {
			  "raw": "https://search.arcpublishing.com/search?key={{search_key}}&data=items&q=test",
			  "protocol": "https",
			  "host": [
				"search",
				"arcpublishing",
				"com"
			  ],
			  "path": [
				"search"
			  ],
			  "query": [
				{
				  "key": "key",
				  "value": "{{search_key}}",
				  "description": "Your search key, provided by your TAM or TDM"
				},
				{
				  "key": "data",
				  "value": "items",
				  "description": "What ANS object to search in"
				},
				{
				  "key": "q",
				  "value": "test",
				  "description": "What to query for"
				},
				{
				  "key": "s",
				  "value": "date",
				  "description": "Sorted by",
				  "disabled": true
				},
				{
				  "key": "t",
				  "value": "story",
				  "description": "Type: gallery, story or video",
				  "disabled": true
				},
				{
				  "key": "website_id",
				  "value": "{{website}}",
				  "description": "If not provided will contain your default website",
				  "disabled": true
				}
			  ]
			}
		  },
		  "response": []
		}
	  ],
	  "protocolProfileBehavior": {}
	},
	{
	  "name": "Site Service API",
	  "item": [
		{
		  "name": "{website}",
		  "item": [
			{
			  "name": "{id}",
			  "item": [
				{
				  "name": "Get Section By ID",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/site/v3/website/{{website}}/section/:_id",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"site",
						"v3",
						"website",
						"{{website}}",
						"section",
						":_id"
					  ],
					  "variable": [
						{
						  "key": "_id",
						  "type": "string",
						  "value": "/testSection"
						}
					  ]
					}
				  },
				  "response": []
				},
				{
				  "name": "Delete Section By ID",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "DELETE",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/site/v3/website/{{website}}/section/?_id=/testSection",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"site",
						"v3",
						"website",
						"{{website}}",
						"section",
						""
					  ],
					  "query": [
						{
						  "key": "_id",
						  "value": "/testSection"
						}
					  ]
					}
				  },
				  "response": []
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			},
			{
			  "name": "Update Website",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "PUT",
				"header": [
				  {
					"key": "Content-Type",
					"name": "Content-Type",
					"value": "application/json",
					"type": "text"
				  }
				],
				"body": {
				  "mode": "raw",
				  "raw": " {\n        \"_id\": \"{{website}}\",\n        \"display_name\": \"{{website}}\",\n        \"base_path\": \"/\",\n        \"is_default_website\": true,\n        \"domains\": []\n}",
				  "options": {
					"raw": {}
				  }
				},
				"url": {
				  "raw": "https://api.{{baseUrl}}/site/v3/website/{{website}}",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"site",
					"v3",
					"website",
					"{{website}}"
				  ]
				}
			  },
			  "response": []
			}
		  ],
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		},
		{
		  "name": "Get Websites",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "GET",
			"header": [],
			"url": {
			  "raw": "https://api.{{baseUrl}}/site/v3/website/",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"site",
				"v3",
				"website",
				""
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Delete a Website",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "DELETE",
			"header": [],
			"url": {
			  "raw": "https://api.{{baseUrl}}/site/v3/website/{{website}}",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"site",
				"v3",
				"website",
				"{{website}}"
			  ]
			}
		  },
		  "response": []
		}
	  ],
	  "description": "Documentation is available at: https://redirector.arcpublishing.com/alc/docs/swagger/?url=./arc-products/site-api.json",
	  "event": [
		{
		  "listen": "prerequest",
		  "script": {
			"id": "9f7f5a97-c848-4da9-b8f8-7890bf1e41c1",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		},
		{
		  "listen": "test",
		  "script": {
			"id": "e63ac2ea-4c63-40bd-b010-e718e4cdbdf3",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		}
	  ],
	  "protocolProfileBehavior": {}
	},
	{
	  "name": "Photo API",
	  "item": [
		{
		  "name": "v2",
		  "item": [
			{
			  "name": "galleries",
			  "item": [
				{
				  "name": "{gallery Id}",
				  "item": [
					{
					  "name": "photos",
					  "item": [
						{
						  "name": "Add a list of photos to an existing gallery",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/photo/api/v2/galleries/:galleryId/photos",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"photo",
								"api",
								"v2",
								"galleries",
								":galleryId",
								"photos"
							  ],
							  "variable": [
								{
								  "description": "gallery id",
								  "key": "galleryId",
								  "type": "string",
								  "value": "schema type not provided"
								}
							  ]
							}
						  },
						  "response": [
							{
							  "name": "Not Found",
							  "originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"galleries",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Not Found",
							  "code": 404,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Forbidden",
							  "originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"galleries",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Forbidden",
							  "code": 403,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Unauthorized",
							  "originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"galleries",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Unauthorized",
							  "code": 401,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Created",
							  "originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"galleries",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Created",
							  "code": 201,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							}
						  ]
						},
						{
						  "name": "Update several photos in a gallery",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/photo/api/v2/galleries/:galleryId/photos",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"photo",
								"api",
								"v2",
								"galleries",
								":galleryId",
								"photos"
							  ],
							  "variable": [
								{
								  "description": "gallery id",
								  "key": "galleryId",
								  "type": "string",
								  "value": "schema type not provided"
								}
							  ]
							}
						  },
						  "response": [
							{
							  "name": "Forbidden",
							  "originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"galleries",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Forbidden",
							  "code": 403,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "OK",
							  "originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"galleries",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "OK",
							  "code": 200,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Not Found",
							  "originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"galleries",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Not Found",
							  "code": 404,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Created",
							  "originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"galleries",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Created",
							  "code": 201,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Unauthorized",
							  "originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"galleries",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Unauthorized",
							  "code": 401,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							}
						  ]
						},
						{
						  "name": "Remove a list of photos from a gallery",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/photo/api/v2/galleries/:galleryId/photos",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"photo",
								"api",
								"v2",
								"galleries",
								":galleryId",
								"photos"
							  ],
							  "variable": [
								{
								  "description": "galleryId",
								  "key": "galleryId",
								  "type": "string",
								  "value": "schema type not provided"
								}
							  ]
							}
						  },
						  "response": [
							{
							  "name": "Forbidden",
							  "originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"galleries",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Forbidden",
							  "code": 403,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "No Content",
							  "originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"galleries",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "No Content",
							  "code": 204,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Unauthorized",
							  "originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"galleries",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Unauthorized",
							  "code": 401,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							}
						  ]
						}
					  ],
					  "protocolProfileBehavior": {},
					  "_postman_isSubFolder": true
					},
					{
					  "name": "Return a gallery by ID",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/galleries/:galleryId",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"galleries",
							":galleryId"
						  ],
						  "query": [
							{
							  "key": "trim",
							  "value": "",
							  "description": "Remove surrounding space in images using either `topleft` or `bottomright` pixel color",
							  "disabled": true
							},
							{
							  "key": "trimTolerance",
							  "value": "",
							  "description": "The tolerance, between 0 and 442, for trimming",
							  "disabled": true
							},
							{
							  "key": "crop",
							  "value": "",
							  "description": "How to crop the photo, in the form `LxT:RxB`",
							  "disabled": true
							},
							{
							  "key": "fitIn",
							  "value": "",
							  "description": "How to fit into a space, either `normal` `full` or `adaptive`",
							  "disabled": true
							},
							{
							  "key": "halign",
							  "value": "",
							  "description": "The horizontal alignment of the crop, either `left` `center` or `right`",
							  "disabled": true
							},
							{
							  "key": "valign",
							  "value": "",
							  "description": "The vertical alignment of the crop, either `top` `middle` or `bottom`",
							  "disabled": true
							},
							{
							  "key": "smart",
							  "value": "",
							  "description": "If the crop should be smart (finding focal points) or not",
							  "disabled": true
							},
							{
							  "key": "maxWidth",
							  "value": "",
							  "description": "The desired width of the image",
							  "disabled": true
							},
							{
							  "key": "maxHeight",
							  "value": "",
							  "description": "The desired height of the image",
							  "disabled": true
							},
							{
							  "key": "brightness",
							  "value": "",
							  "description": "The brightness, between -100 and 100",
							  "disabled": true
							},
							{
							  "key": "contrast",
							  "value": "",
							  "description": "The contrast, , between -100 and 100",
							  "disabled": true
							},
							{
							  "key": "colorize",
							  "value": "",
							  "description": "A colorize parameter, of the form `red:green:blue:fill`, each of -100 to 100",
							  "disabled": true
							},
							{
							  "key": "equalize",
							  "value": "",
							  "description": "If the color distribution of the image should be equalized",
							  "disabled": true
							},
							{
							  "key": "filling",
							  "value": "",
							  "description": "The color to fill in empty parts of the iamge",
							  "disabled": true
							},
							{
							  "key": "format",
							  "value": "",
							  "description": "Return in a new format, either `webp`, `jpeg`, `gif`, or `png`",
							  "disabled": true
							},
							{
							  "key": "grayscale",
							  "value": "",
							  "description": "If the image should be gray-scaled",
							  "disabled": true
							},
							{
							  "key": "maxBytes",
							  "value": "",
							  "description": "Automatically degrades the quality of the image until it is no larger than this",
							  "disabled": true
							},
							{
							  "key": "noise",
							  "value": "",
							  "description": "Adds noise to an image, between 0 and 100",
							  "disabled": true
							},
							{
							  "key": "noUpscale",
							  "value": "",
							  "description": "Do not upscale the image to bigger dimensions",
							  "disabled": true
							},
							{
							  "key": "quality",
							  "value": "",
							  "description": "The overall quality of a JPEG, between 0 and 100",
							  "disabled": true
							},
							{
							  "key": "rgb",
							  "value": "",
							  "description": "Changes the color of the image, in the form r:g:b, each between -100 and 100",
							  "disabled": true
							},
							{
							  "key": "roundCorners",
							  "value": "",
							  "description": "Round the corners with a color background, of form `radius:background`",
							  "disabled": true
							},
							{
							  "key": "rotate",
							  "value": "",
							  "description": "Rotate the image in degrees, either 0 90 180 or 270",
							  "disabled": true
							},
							{
							  "key": "saturation",
							  "value": "",
							  "description": "Scales the saturation of the image between 0 and 100",
							  "disabled": true
							},
							{
							  "key": "stripIcc",
							  "value": "",
							  "description": "Remove any ICC information from the image",
							  "disabled": true
							},
							{
							  "key": "watermark",
							  "value": "",
							  "description": "Watermark the image, of form `url::horiz position::vert position::transparency`",
							  "disabled": true
							},
							{
							  "key": "blur",
							  "value": "",
							  "description": "Add Gaussian blur, of the form `radius[:sigma]`",
							  "disabled": true
							},
							{
							  "key": "sharpen",
							  "value": "",
							  "description": "Sharpen the image, in the form `amount:radius:luminance`",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "description": "gallery id",
							  "key": "galleryId",
							  "type": "string",
							  "value": "schema type not provided"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "trim",
								  "value": ""
								},
								{
								  "key": "trimTolerance",
								  "value": ""
								},
								{
								  "key": "crop",
								  "value": ""
								},
								{
								  "key": "fitIn",
								  "value": ""
								},
								{
								  "key": "halign",
								  "value": ""
								},
								{
								  "key": "valign",
								  "value": ""
								},
								{
								  "key": "smart",
								  "value": ""
								},
								{
								  "key": "maxWidth",
								  "value": ""
								},
								{
								  "key": "maxHeight",
								  "value": ""
								},
								{
								  "key": "brightness",
								  "value": ""
								},
								{
								  "key": "contrast",
								  "value": ""
								},
								{
								  "key": "colorize",
								  "value": ""
								},
								{
								  "key": "equalize",
								  "value": ""
								},
								{
								  "key": "filling",
								  "value": ""
								},
								{
								  "key": "format",
								  "value": ""
								},
								{
								  "key": "grayscale",
								  "value": ""
								},
								{
								  "key": "maxBytes",
								  "value": ""
								},
								{
								  "key": "noise",
								  "value": ""
								},
								{
								  "key": "noUpscale",
								  "value": ""
								},
								{
								  "key": "quality",
								  "value": ""
								},
								{
								  "key": "rgb",
								  "value": ""
								},
								{
								  "key": "roundCorners",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								},
								{
								  "key": "saturation",
								  "value": ""
								},
								{
								  "key": "stripIcc",
								  "value": ""
								},
								{
								  "key": "watermark",
								  "value": ""
								},
								{
								  "key": "blur",
								  "value": ""
								},
								{
								  "key": "sharpen",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "trim",
								  "value": ""
								},
								{
								  "key": "trimTolerance",
								  "value": ""
								},
								{
								  "key": "crop",
								  "value": ""
								},
								{
								  "key": "fitIn",
								  "value": ""
								},
								{
								  "key": "halign",
								  "value": ""
								},
								{
								  "key": "valign",
								  "value": ""
								},
								{
								  "key": "smart",
								  "value": ""
								},
								{
								  "key": "maxWidth",
								  "value": ""
								},
								{
								  "key": "maxHeight",
								  "value": ""
								},
								{
								  "key": "brightness",
								  "value": ""
								},
								{
								  "key": "contrast",
								  "value": ""
								},
								{
								  "key": "colorize",
								  "value": ""
								},
								{
								  "key": "equalize",
								  "value": ""
								},
								{
								  "key": "filling",
								  "value": ""
								},
								{
								  "key": "format",
								  "value": ""
								},
								{
								  "key": "grayscale",
								  "value": ""
								},
								{
								  "key": "maxBytes",
								  "value": ""
								},
								{
								  "key": "noise",
								  "value": ""
								},
								{
								  "key": "noUpscale",
								  "value": ""
								},
								{
								  "key": "quality",
								  "value": ""
								},
								{
								  "key": "rgb",
								  "value": ""
								},
								{
								  "key": "roundCorners",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								},
								{
								  "key": "saturation",
								  "value": ""
								},
								{
								  "key": "stripIcc",
								  "value": ""
								},
								{
								  "key": "watermark",
								  "value": ""
								},
								{
								  "key": "blur",
								  "value": ""
								},
								{
								  "key": "sharpen",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "trim",
								  "value": ""
								},
								{
								  "key": "trimTolerance",
								  "value": ""
								},
								{
								  "key": "crop",
								  "value": ""
								},
								{
								  "key": "fitIn",
								  "value": ""
								},
								{
								  "key": "halign",
								  "value": ""
								},
								{
								  "key": "valign",
								  "value": ""
								},
								{
								  "key": "smart",
								  "value": ""
								},
								{
								  "key": "maxWidth",
								  "value": ""
								},
								{
								  "key": "maxHeight",
								  "value": ""
								},
								{
								  "key": "brightness",
								  "value": ""
								},
								{
								  "key": "contrast",
								  "value": ""
								},
								{
								  "key": "colorize",
								  "value": ""
								},
								{
								  "key": "equalize",
								  "value": ""
								},
								{
								  "key": "filling",
								  "value": ""
								},
								{
								  "key": "format",
								  "value": ""
								},
								{
								  "key": "grayscale",
								  "value": ""
								},
								{
								  "key": "maxBytes",
								  "value": ""
								},
								{
								  "key": "noise",
								  "value": ""
								},
								{
								  "key": "noUpscale",
								  "value": ""
								},
								{
								  "key": "quality",
								  "value": ""
								},
								{
								  "key": "rgb",
								  "value": ""
								},
								{
								  "key": "roundCorners",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								},
								{
								  "key": "saturation",
								  "value": ""
								},
								{
								  "key": "stripIcc",
								  "value": ""
								},
								{
								  "key": "watermark",
								  "value": ""
								},
								{
								  "key": "blur",
								  "value": ""
								},
								{
								  "key": "sharpen",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "OK",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "trim",
								  "value": ""
								},
								{
								  "key": "trimTolerance",
								  "value": ""
								},
								{
								  "key": "crop",
								  "value": ""
								},
								{
								  "key": "fitIn",
								  "value": ""
								},
								{
								  "key": "halign",
								  "value": ""
								},
								{
								  "key": "valign",
								  "value": ""
								},
								{
								  "key": "smart",
								  "value": ""
								},
								{
								  "key": "maxWidth",
								  "value": ""
								},
								{
								  "key": "maxHeight",
								  "value": ""
								},
								{
								  "key": "brightness",
								  "value": ""
								},
								{
								  "key": "contrast",
								  "value": ""
								},
								{
								  "key": "colorize",
								  "value": ""
								},
								{
								  "key": "equalize",
								  "value": ""
								},
								{
								  "key": "filling",
								  "value": ""
								},
								{
								  "key": "format",
								  "value": ""
								},
								{
								  "key": "grayscale",
								  "value": ""
								},
								{
								  "key": "maxBytes",
								  "value": ""
								},
								{
								  "key": "noise",
								  "value": ""
								},
								{
								  "key": "noUpscale",
								  "value": ""
								},
								{
								  "key": "quality",
								  "value": ""
								},
								{
								  "key": "rgb",
								  "value": ""
								},
								{
								  "key": "roundCorners",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								},
								{
								  "key": "saturation",
								  "value": ""
								},
								{
								  "key": "stripIcc",
								  "value": ""
								},
								{
								  "key": "watermark",
								  "value": ""
								},
								{
								  "key": "blur",
								  "value": ""
								},
								{
								  "key": "sharpen",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					},
					{
					  "name": "Create a gallery with a specific ID",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/galleries/:galleryId",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"galleries",
							":galleryId"
						  ],
						  "variable": [
							{
							  "description": "gallery Id",
							  "key": "galleryId",
							  "type": "string",
							  "value": "schema type not provided"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Created",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Created",
						  "code": 201,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "OK",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					},
					{
					  "name": "Update gallery metadata and photos",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "PUT",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/galleries/:galleryId?photos=",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"galleries",
							":galleryId"
						  ],
						  "query": [
							{
							  "key": "photos",
							  "value": "",
							  "description": "updatePhotos"
							}
						  ],
						  "variable": [
							{
							  "description": "gallery Id",
							  "key": "galleryId",
							  "type": "string",
							  "value": "schema type not provided"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided?photos=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "photos",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Created",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided?photos=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "photos",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Created",
						  "code": 201,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided?photos=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "photos",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "OK",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided?photos=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "photos",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided?photos=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "photos",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					},
					{
					  "name": "Delete a gallery",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "DELETE",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/galleries/:galleryId",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"galleries",
							":galleryId"
						  ],
						  "variable": [
							{
							  "description": "gallery Id",
							  "key": "galleryId",
							  "type": "string",
							  "value": "schema type not provided"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "No Content",
						  "originalRequest": {
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "No Content",
						  "code": 204,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					},
					{
					  "name": "Update a specific photo in a gallery",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "PUT",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/galleries/:galleryId/photo/:photoId",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"galleries",
							":galleryId",
							"photo",
							":photoId"
						  ],
						  "variable": [
							{
							  "description": "gallery Id",
							  "key": "galleryId",
							  "type": "string",
							  "value": "schema type not provided"
							},
							{
							  "description": "photo Id",
							  "key": "photoId",
							  "type": "string",
							  "value": "schema type not provided"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "Created",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photo/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided",
								"photo",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Created",
						  "code": 201,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photo/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided",
								"photo",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photo/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided",
								"photo",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "OK",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photo/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided",
								"photo",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/galleries/schema type not provided/photo/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"galleries",
								"schema type not provided",
								"photo",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					}
				  ],
				  "protocolProfileBehavior": {},
				  "_postman_isSubFolder": true
				},
				{
				  "name": "Return a list of galleries",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/photo/api/v2/galleries?websites={{website}}",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"photo",
						"api",
						"v2",
						"galleries"
					  ],
					  "query": [
						{
						  "key": "websites",
						  "value": "{{website}}",
						  "description": "Websites on which the gallery appears"
						},
						{
						  "key": "description",
						  "value": "",
						  "description": "A description of the gallery",
						  "disabled": true
						},
						{
						  "key": "workflowStatus",
						  "value": "",
						  "description": "The gallery's current workflow status",
						  "disabled": true
						},
						{
						  "key": "ownerName",
						  "value": "",
						  "description": "The name of the user who created the gallery",
						  "disabled": true
						},
						{
						  "key": "userOwner",
						  "value": "",
						  "description": "The email address of the user who created the gallery",
						  "disabled": true
						},
						{
						  "key": "creators",
						  "value": "",
						  "description": "The credited creators responsible for building the gallery",
						  "disabled": true
						},
						{
						  "key": "envelope",
						  "value": "",
						  "description": "True if you want the responses in an envelope of paging data",
						  "disabled": true
						},
						{
						  "key": "distributorCategory",
						  "value": "",
						  "description": "A list of distributor categories for the gallery",
						  "disabled": true
						},
						{
						  "key": "distributorName",
						  "value": "",
						  "description": "The name of the custom entity that distributed the gallery",
						  "disabled": true
						},
						{
						  "key": "startDateUploaded",
						  "value": "",
						  "description": "The start date that an item was uploaded to Anglerfish",
						  "disabled": true
						},
						{
						  "key": "endDateUploaded",
						  "value": "",
						  "description": "The end date that an item was uploaded to Anglerfish",
						  "disabled": true
						},
						{
						  "key": "slug",
						  "value": "",
						  "description": "The item slug",
						  "disabled": true
						},
						{
						  "key": "title",
						  "value": "",
						  "description": "The title of the item",
						  "disabled": true
						},
						{
						  "key": "published",
						  "value": "",
						  "description": "If the item must be, or must not be, published",
						  "disabled": true
						},
						{
						  "key": "sponsored",
						  "value": "",
						  "description": "If the item must be, or must not be, sponsored",
						  "disabled": true
						},
						{
						  "key": "uuid",
						  "value": "",
						  "description": "The Arc ID",
						  "disabled": true
						},
						{
						  "key": "fullTextQuery",
						  "value": "",
						  "description": "A natural language search query that matches multiple fields",
						  "disabled": true
						},
						{
						  "key": "operator",
						  "value": "",
						  "description": "Whether the terms are or'd or and'd together, default and",
						  "disabled": true
						},
						{
						  "key": "offset",
						  "value": "",
						  "description": "Where in the sorted resultset to start the response at",
						  "disabled": true
						},
						{
						  "key": "limit",
						  "value": "",
						  "description": "How many items to return",
						  "disabled": true
						},
						{
						  "key": "total",
						  "value": "",
						  "description": "The total number of items that match the search parameters",
						  "disabled": true
						},
						{
						  "key": "sort",
						  "value": "",
						  "description": "The sort order, for example -title or +caption",
						  "disabled": true
						},
						{
						  "key": "trim",
						  "value": "",
						  "description": "Remove surrounding space in images using either `topleft` or `bottomright` pixel color",
						  "disabled": true
						},
						{
						  "key": "trimTolerance",
						  "value": "",
						  "description": "The tolerance, between 0 and 442, for trimming",
						  "disabled": true
						},
						{
						  "key": "crop",
						  "value": "",
						  "description": "How to crop the photo, in the form `LxT:RxB`",
						  "disabled": true
						},
						{
						  "key": "fitIn",
						  "value": "",
						  "description": "How to fit into a space, either `normal` `full` or `adaptive`",
						  "disabled": true
						},
						{
						  "key": "halign",
						  "value": "",
						  "description": "The horizontal alignment of the crop, either `left` `center` or `right`",
						  "disabled": true
						},
						{
						  "key": "valign",
						  "value": "",
						  "description": "The vertical alignment of the crop, either `top` `middle` or `bottom`",
						  "disabled": true
						},
						{
						  "key": "smart",
						  "value": "",
						  "description": "If the crop should be smart (finding focal points) or not",
						  "disabled": true
						},
						{
						  "key": "maxWidth",
						  "value": "",
						  "description": "The desired width of the image",
						  "disabled": true
						},
						{
						  "key": "maxHeight",
						  "value": "",
						  "description": "The desired height of the image",
						  "disabled": true
						},
						{
						  "key": "brightness",
						  "value": "",
						  "description": "The brightness, between -100 and 100",
						  "disabled": true
						},
						{
						  "key": "contrast",
						  "value": "",
						  "description": "The contrast, , between -100 and 100",
						  "disabled": true
						},
						{
						  "key": "colorize",
						  "value": "",
						  "description": "A colorize parameter, of the form `red:green:blue:fill`, each of -100 to 100",
						  "disabled": true
						},
						{
						  "key": "equalize",
						  "value": "",
						  "description": "If the color distribution of the image should be equalized",
						  "disabled": true
						},
						{
						  "key": "filling",
						  "value": "",
						  "description": "The color to fill in empty parts of the iamge",
						  "disabled": true
						},
						{
						  "key": "format",
						  "value": "",
						  "description": "Return in a new format, either `webp`, `jpeg`, `gif`, or `png`",
						  "disabled": true
						},
						{
						  "key": "grayscale",
						  "value": "",
						  "description": "If the image should be gray-scaled",
						  "disabled": true
						},
						{
						  "key": "maxBytes",
						  "value": "",
						  "description": "Automatically degrades the quality of the image until it is no larger than this",
						  "disabled": true
						},
						{
						  "key": "noise",
						  "value": "",
						  "description": "Adds noise to an image, between 0 and 100",
						  "disabled": true
						},
						{
						  "key": "noUpscale",
						  "value": "",
						  "description": "Do not upscale the image to bigger dimensions",
						  "disabled": true
						},
						{
						  "key": "quality",
						  "value": "",
						  "description": "The overall quality of a JPEG, between 0 and 100",
						  "disabled": true
						},
						{
						  "key": "rgb",
						  "value": "",
						  "description": "Changes the color of the image, in the form r:g:b, each between -100 and 100",
						  "disabled": true
						},
						{
						  "key": "roundCorners",
						  "value": "",
						  "description": "Round the corners with a color background, of form `radius:background`",
						  "disabled": true
						},
						{
						  "key": "rotate",
						  "value": "",
						  "description": "Rotate the image in degrees, either 0 90 180 or 270",
						  "disabled": true
						},
						{
						  "key": "saturation",
						  "value": "",
						  "description": "Scales the saturation of the image between 0 and 100",
						  "disabled": true
						},
						{
						  "key": "stripIcc",
						  "value": "",
						  "description": "Remove any ICC information from the image",
						  "disabled": true
						},
						{
						  "key": "watermark",
						  "value": "",
						  "description": "Watermark the image, of form `url::horiz position::vert position::transparency`",
						  "disabled": true
						},
						{
						  "key": "blur",
						  "value": "",
						  "description": "Add Gaussian blur, of the form `radius[:sigma]`",
						  "disabled": true
						},
						{
						  "key": "sharpen",
						  "value": "",
						  "description": "Sharpen the image, in the form `amount:radius:luminance`",
						  "disabled": true
						}
					  ]
					}
				  },
				  "response": [
					{
					  "name": "Forbidden",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/galleries?description=&workflowStatus=&ownerName=&userOwner=&creators=&websites=&envelope=&distributorCategory=&distributorName=&startDateUploaded=&endDateUploaded=&slug=&title=&published=&sponsored=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=&trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"galleries"
						  ],
						  "query": [
							{
							  "key": "description",
							  "value": ""
							},
							{
							  "key": "workflowStatus",
							  "value": ""
							},
							{
							  "key": "ownerName",
							  "value": ""
							},
							{
							  "key": "userOwner",
							  "value": ""
							},
							{
							  "key": "creators",
							  "value": ""
							},
							{
							  "key": "websites",
							  "value": ""
							},
							{
							  "key": "envelope",
							  "value": ""
							},
							{
							  "key": "distributorCategory",
							  "value": ""
							},
							{
							  "key": "distributorName",
							  "value": ""
							},
							{
							  "key": "startDateUploaded",
							  "value": ""
							},
							{
							  "key": "endDateUploaded",
							  "value": ""
							},
							{
							  "key": "slug",
							  "value": ""
							},
							{
							  "key": "title",
							  "value": ""
							},
							{
							  "key": "published",
							  "value": ""
							},
							{
							  "key": "sponsored",
							  "value": ""
							},
							{
							  "key": "uuid",
							  "value": ""
							},
							{
							  "key": "fullTextQuery",
							  "value": ""
							},
							{
							  "key": "operator",
							  "value": ""
							},
							{
							  "key": "offset",
							  "value": ""
							},
							{
							  "key": "limit",
							  "value": ""
							},
							{
							  "key": "total",
							  "value": ""
							},
							{
							  "key": "sort",
							  "value": ""
							},
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "Forbidden",
					  "code": 403,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Unauthorized",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/galleries?description=&workflowStatus=&ownerName=&userOwner=&creators=&websites=&envelope=&distributorCategory=&distributorName=&startDateUploaded=&endDateUploaded=&slug=&title=&published=&sponsored=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=&trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"galleries"
						  ],
						  "query": [
							{
							  "key": "description",
							  "value": ""
							},
							{
							  "key": "workflowStatus",
							  "value": ""
							},
							{
							  "key": "ownerName",
							  "value": ""
							},
							{
							  "key": "userOwner",
							  "value": ""
							},
							{
							  "key": "creators",
							  "value": ""
							},
							{
							  "key": "websites",
							  "value": ""
							},
							{
							  "key": "envelope",
							  "value": ""
							},
							{
							  "key": "distributorCategory",
							  "value": ""
							},
							{
							  "key": "distributorName",
							  "value": ""
							},
							{
							  "key": "startDateUploaded",
							  "value": ""
							},
							{
							  "key": "endDateUploaded",
							  "value": ""
							},
							{
							  "key": "slug",
							  "value": ""
							},
							{
							  "key": "title",
							  "value": ""
							},
							{
							  "key": "published",
							  "value": ""
							},
							{
							  "key": "sponsored",
							  "value": ""
							},
							{
							  "key": "uuid",
							  "value": ""
							},
							{
							  "key": "fullTextQuery",
							  "value": ""
							},
							{
							  "key": "operator",
							  "value": ""
							},
							{
							  "key": "offset",
							  "value": ""
							},
							{
							  "key": "limit",
							  "value": ""
							},
							{
							  "key": "total",
							  "value": ""
							},
							{
							  "key": "sort",
							  "value": ""
							},
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "Unauthorized",
					  "code": 401,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "OK",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/galleries?description=&workflowStatus=&ownerName=&userOwner=&creators=&websites=&envelope=&distributorCategory=&distributorName=&startDateUploaded=&endDateUploaded=&slug=&title=&published=&sponsored=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=&trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"galleries"
						  ],
						  "query": [
							{
							  "key": "description",
							  "value": ""
							},
							{
							  "key": "workflowStatus",
							  "value": ""
							},
							{
							  "key": "ownerName",
							  "value": ""
							},
							{
							  "key": "userOwner",
							  "value": ""
							},
							{
							  "key": "creators",
							  "value": ""
							},
							{
							  "key": "websites",
							  "value": ""
							},
							{
							  "key": "envelope",
							  "value": ""
							},
							{
							  "key": "distributorCategory",
							  "value": ""
							},
							{
							  "key": "distributorName",
							  "value": ""
							},
							{
							  "key": "startDateUploaded",
							  "value": ""
							},
							{
							  "key": "endDateUploaded",
							  "value": ""
							},
							{
							  "key": "slug",
							  "value": ""
							},
							{
							  "key": "title",
							  "value": ""
							},
							{
							  "key": "published",
							  "value": ""
							},
							{
							  "key": "sponsored",
							  "value": ""
							},
							{
							  "key": "uuid",
							  "value": ""
							},
							{
							  "key": "fullTextQuery",
							  "value": ""
							},
							{
							  "key": "operator",
							  "value": ""
							},
							{
							  "key": "offset",
							  "value": ""
							},
							{
							  "key": "limit",
							  "value": ""
							},
							{
							  "key": "total",
							  "value": ""
							},
							{
							  "key": "sort",
							  "value": ""
							},
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "OK",
					  "code": 200,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Not Found",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/galleries?description=&workflowStatus=&ownerName=&userOwner=&creators=&websites=&envelope=&distributorCategory=&distributorName=&startDateUploaded=&endDateUploaded=&slug=&title=&published=&sponsored=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=&trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"galleries"
						  ],
						  "query": [
							{
							  "key": "description",
							  "value": ""
							},
							{
							  "key": "workflowStatus",
							  "value": ""
							},
							{
							  "key": "ownerName",
							  "value": ""
							},
							{
							  "key": "userOwner",
							  "value": ""
							},
							{
							  "key": "creators",
							  "value": ""
							},
							{
							  "key": "websites",
							  "value": ""
							},
							{
							  "key": "envelope",
							  "value": ""
							},
							{
							  "key": "distributorCategory",
							  "value": ""
							},
							{
							  "key": "distributorName",
							  "value": ""
							},
							{
							  "key": "startDateUploaded",
							  "value": ""
							},
							{
							  "key": "endDateUploaded",
							  "value": ""
							},
							{
							  "key": "slug",
							  "value": ""
							},
							{
							  "key": "title",
							  "value": ""
							},
							{
							  "key": "published",
							  "value": ""
							},
							{
							  "key": "sponsored",
							  "value": ""
							},
							{
							  "key": "uuid",
							  "value": ""
							},
							{
							  "key": "fullTextQuery",
							  "value": ""
							},
							{
							  "key": "operator",
							  "value": ""
							},
							{
							  "key": "offset",
							  "value": ""
							},
							{
							  "key": "limit",
							  "value": ""
							},
							{
							  "key": "total",
							  "value": ""
							},
							{
							  "key": "sort",
							  "value": ""
							},
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "Not Found",
					  "code": 404,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					}
				  ]
				},
				{
				  "name": "Create a gallery",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "POST",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/photo/api/v2/galleries",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"photo",
						"api",
						"v2",
						"galleries"
					  ]
					}
				  },
				  "response": [
					{
					  "name": "Not Found",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/galleries",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"galleries"
						  ]
						}
					  },
					  "status": "Not Found",
					  "code": 404,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Unauthorized",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/galleries",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"galleries"
						  ]
						}
					  },
					  "status": "Unauthorized",
					  "code": 401,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Forbidden",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/galleries",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"galleries"
						  ]
						}
					  },
					  "status": "Forbidden",
					  "code": 403,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "OK",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/galleries",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"galleries"
						  ]
						}
					  },
					  "status": "OK",
					  "code": 200,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Created",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/galleries",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"galleries"
						  ]
						}
					  },
					  "status": "Created",
					  "code": 201,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					}
				  ]
				},
				{
				  "name": "Return a list of gallery names and IDs that share a prefix",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/photo/api/v2/galleries/names/:prefix",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"photo",
						"api",
						"v2",
						"galleries",
						"names",
						":prefix"
					  ],
					  "variable": [
						{
						  "description": "prefix",
						  "id": "830685cf-0087-4a11-a265-3353ca20cff2",
						  "key": "prefix",
						  "type": "string",
						  "value": "schema type not provided"
						}
					  ]
					}
				  },
				  "response": [
					{
					  "name": "Unauthorized",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/galleries/names/schema type not provided",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"galleries",
							"names",
							"schema type not provided"
						  ]
						}
					  },
					  "status": "Unauthorized",
					  "code": 401,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Not Found",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/galleries/names/schema type not provided",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"galleries",
							"names",
							"schema type not provided"
						  ]
						}
					  },
					  "status": "Not Found",
					  "code": 404,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "OK",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/galleries/names/schema type not provided",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"galleries",
							"names",
							"schema type not provided"
						  ]
						}
					  },
					  "status": "OK",
					  "code": 200,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Forbidden",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/galleries/names/schema type not provided",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"galleries",
							"names",
							"schema type not provided"
						  ]
						}
					  },
					  "status": "Forbidden",
					  "code": 403,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					}
				  ]
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			},
			{
			  "name": "lightboxes",
			  "item": [
				{
				  "name": "{lightbox Id}",
				  "item": [
					{
					  "name": "photos",
					  "item": [
						{
						  "name": "Return a subset of photos in a lightbox",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/photo/api/v2/lightboxes/:lightboxId/photos?primaryWebsite=",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"photo",
								"api",
								"v2",
								"lightboxes",
								":lightboxId",
								"photos"
							  ],
							  "query": [
								{
								  "key": "primaryWebsite",
								  "value": "",
								  "description": "Limit photos that are guaranteed visible on this website"
								},
								{
								  "key": "trim",
								  "value": "",
								  "description": "Remove surrounding space in images using either `topleft` or `bottomright` pixel color",
								  "disabled": true
								},
								{
								  "key": "trimTolerance",
								  "value": "",
								  "description": "The tolerance, between 0 and 442, for trimming",
								  "disabled": true
								},
								{
								  "key": "crop",
								  "value": "",
								  "description": "How to crop the photo, in the form `LxT:RxB`",
								  "disabled": true
								},
								{
								  "key": "fitIn",
								  "value": "",
								  "description": "How to fit into a space, either `normal` `full` or `adaptive`",
								  "disabled": true
								},
								{
								  "key": "halign",
								  "value": "",
								  "description": "The horizontal alignment of the crop, either `left` `center` or `right`",
								  "disabled": true
								},
								{
								  "key": "valign",
								  "value": "",
								  "description": "The vertical alignment of the crop, either `top` `middle` or `bottom`",
								  "disabled": true
								},
								{
								  "key": "smart",
								  "value": "",
								  "description": "If the crop should be smart (finding focal points) or not",
								  "disabled": true
								},
								{
								  "key": "maxWidth",
								  "value": "",
								  "description": "The desired width of the image",
								  "disabled": true
								},
								{
								  "key": "maxHeight",
								  "value": "",
								  "description": "The desired height of the image",
								  "disabled": true
								},
								{
								  "key": "brightness",
								  "value": "",
								  "description": "The brightness, between -100 and 100",
								  "disabled": true
								},
								{
								  "key": "contrast",
								  "value": "",
								  "description": "The contrast, , between -100 and 100",
								  "disabled": true
								},
								{
								  "key": "colorize",
								  "value": "",
								  "description": "A colorize parameter, of the form `red:green:blue:fill`, each of -100 to 100",
								  "disabled": true
								},
								{
								  "key": "equalize",
								  "value": "",
								  "description": "If the color distribution of the image should be equalized",
								  "disabled": true
								},
								{
								  "key": "filling",
								  "value": "",
								  "description": "The color to fill in empty parts of the iamge",
								  "disabled": true
								},
								{
								  "key": "format",
								  "value": "",
								  "description": "Return in a new format, either `webp`, `jpeg`, `gif`, or `png`",
								  "disabled": true
								},
								{
								  "key": "grayscale",
								  "value": "",
								  "description": "If the image should be gray-scaled",
								  "disabled": true
								},
								{
								  "key": "maxBytes",
								  "value": "",
								  "description": "Automatically degrades the quality of the image until it is no larger than this",
								  "disabled": true
								},
								{
								  "key": "noise",
								  "value": "",
								  "description": "Adds noise to an image, between 0 and 100",
								  "disabled": true
								},
								{
								  "key": "noUpscale",
								  "value": "",
								  "description": "Do not upscale the image to bigger dimensions",
								  "disabled": true
								},
								{
								  "key": "quality",
								  "value": "",
								  "description": "The overall quality of a JPEG, between 0 and 100",
								  "disabled": true
								},
								{
								  "key": "rgb",
								  "value": "",
								  "description": "Changes the color of the image, in the form r:g:b, each between -100 and 100",
								  "disabled": true
								},
								{
								  "key": "roundCorners",
								  "value": "",
								  "description": "Round the corners with a color background, of form `radius:background`",
								  "disabled": true
								},
								{
								  "key": "rotate",
								  "value": "",
								  "description": "Rotate the image in degrees, either 0 90 180 or 270",
								  "disabled": true
								},
								{
								  "key": "saturation",
								  "value": "",
								  "description": "Scales the saturation of the image between 0 and 100",
								  "disabled": true
								},
								{
								  "key": "stripIcc",
								  "value": "",
								  "description": "Remove any ICC information from the image",
								  "disabled": true
								},
								{
								  "key": "watermark",
								  "value": "",
								  "description": "Watermark the image, of form `url::horiz position::vert position::transparency`",
								  "disabled": true
								},
								{
								  "key": "blur",
								  "value": "",
								  "description": "Add Gaussian blur, of the form `radius[:sigma]`",
								  "disabled": true
								},
								{
								  "key": "sharpen",
								  "value": "",
								  "description": "Sharpen the image, in the form `amount:radius:luminance`",
								  "disabled": true
								},
								{
								  "key": "colors",
								  "value": "",
								  "disabled": true
								},
								{
								  "key": "caption",
								  "value": "",
								  "description": "The caption of the photo",
								  "disabled": true
								},
								{
								  "key": "creator",
								  "value": "",
								  "description": "A list of photographer names",
								  "disabled": true
								},
								{
								  "key": "keywords",
								  "value": "",
								  "description": "A list of keywords",
								  "disabled": true
								},
								{
								  "key": "originalName",
								  "value": "",
								  "description": "The original filename of the photo",
								  "disabled": true
								},
								{
								  "key": "licensable",
								  "value": "",
								  "description": "If photos must be, or must not be, marked as licensable",
								  "disabled": true
								},
								{
								  "key": "expired",
								  "value": "",
								  "description": "If photos must be, or must not be, expired",
								  "disabled": true
								},
								{
								  "key": "longitude",
								  "value": "",
								  "description": "The longitude of a geo location (used in conjunction with latitude and radius)",
								  "disabled": true
								},
								{
								  "key": "latitude",
								  "value": "",
								  "description": "The latitude of a geo location (used in conjunction with longitude and radius)",
								  "disabled": true
								},
								{
								  "key": "radius",
								  "value": "",
								  "description": "The distance in miles from a geo location (used in conjuntion with latitude and longitued",
								  "disabled": true
								},
								{
								  "key": "distributorId",
								  "value": "",
								  "description": "A list of distributor IDs that photos should come frmo",
								  "disabled": true
								},
								{
								  "key": "distributorCategory",
								  "value": "",
								  "description": "A list of custom distributor categories",
								  "disabled": true
								},
								{
								  "key": "distributorName",
								  "value": "",
								  "description": "A list of custom distributor names",
								  "disabled": true
								},
								{
								  "key": "sourceType",
								  "value": "",
								  "description": "A list of source types",
								  "disabled": true
								},
								{
								  "key": "sourceName",
								  "value": "",
								  "description": "A list of source names",
								  "disabled": true
								},
								{
								  "key": "source",
								  "value": "",
								  "description": "A list of source IDs",
								  "disabled": true
								},
								{
								  "key": "sourceId",
								  "value": "",
								  "description": "The source ID in an external system",
								  "disabled": true
								},
								{
								  "key": "status",
								  "value": "",
								  "description": "A photo status",
								  "disabled": true
								},
								{
								  "key": "ingestionMethod",
								  "value": "",
								  "description": "The ingestion method, such as uploaded",
								  "disabled": true
								},
								{
								  "key": "envelope",
								  "value": "",
								  "description": "Whether you want responses in an envelope including paging information",
								  "disabled": true
								},
								{
								  "key": "startDateTakenOn",
								  "value": "",
								  "description": "The start date that the photos were taken on",
								  "disabled": true
								},
								{
								  "key": "endDateTakenOn",
								  "value": "",
								  "description": "The end date that the photos were taken on",
								  "disabled": true
								},
								{
								  "key": "startDateUpdated",
								  "value": "",
								  "description": "The start date that a photo was most recently updated",
								  "disabled": true
								},
								{
								  "key": "endDateUpdated",
								  "value": "",
								  "description": "The end date that a photo was most recently updated",
								  "disabled": true
								},
								{
								  "key": "startDateUploaded",
								  "value": "",
								  "description": "The start date that an item was uploaded to Anglerfish",
								  "disabled": true
								},
								{
								  "key": "endDateUploaded",
								  "value": "",
								  "description": "The end date that an item was uploaded to Anglerfish",
								  "disabled": true
								},
								{
								  "key": "slug",
								  "value": "",
								  "description": "The item slug",
								  "disabled": true
								},
								{
								  "key": "title",
								  "value": "",
								  "description": "The title of the item",
								  "disabled": true
								},
								{
								  "key": "published",
								  "value": "",
								  "description": "If the item must be, or must not be, published",
								  "disabled": true
								},
								{
								  "key": "sponsored",
								  "value": "",
								  "description": "If the item must be, or must not be, sponsored",
								  "disabled": true
								},
								{
								  "key": "uuid",
								  "value": "",
								  "description": "The Arc ID",
								  "disabled": true
								},
								{
								  "key": "fullTextQuery",
								  "value": "",
								  "description": "A natural language search query that matches multiple fields",
								  "disabled": true
								},
								{
								  "key": "operator",
								  "value": "",
								  "description": "Whether the terms are or'd or and'd together, default and",
								  "disabled": true
								},
								{
								  "key": "offset",
								  "value": "",
								  "description": "Where in the sorted resultset to start the response at",
								  "disabled": true
								},
								{
								  "key": "limit",
								  "value": "",
								  "description": "How many items to return",
								  "disabled": true
								},
								{
								  "key": "total",
								  "value": "",
								  "description": "The total number of items that match the search parameters",
								  "disabled": true
								},
								{
								  "key": "sort",
								  "value": "",
								  "description": "The sort order, for example -title or +caption",
								  "disabled": true
								}
							  ],
							  "variable": [
								{
								  "description": "lightbox Id",
								  "key": "lightboxId",
								  "type": "string",
								  "value": "schema type not provided"
								}
							  ]
							}
						  },
						  "response": [
							{
							  "name": "Unauthorized",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=&colors=&primaryWebsite=&caption=&creator=&keywords=&originalName=&licensable=&expired=&longitude=&latitude=&radius=&distributorId=&distributorCategory=&distributorName=&sourceType=&sourceName=&source=&sourceId=&status=&ingestionMethod=&envelope=&startDateTakenOn=&endDateTakenOn=&startDateUpdated=&endDateUpdated=&startDateUploaded=&endDateUploaded=&slug=&title=&published=&sponsored=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ],
								  "query": [
									{
									  "key": "trim",
									  "value": ""
									},
									{
									  "key": "trimTolerance",
									  "value": ""
									},
									{
									  "key": "crop",
									  "value": ""
									},
									{
									  "key": "fitIn",
									  "value": ""
									},
									{
									  "key": "halign",
									  "value": ""
									},
									{
									  "key": "valign",
									  "value": ""
									},
									{
									  "key": "smart",
									  "value": ""
									},
									{
									  "key": "maxWidth",
									  "value": ""
									},
									{
									  "key": "maxHeight",
									  "value": ""
									},
									{
									  "key": "brightness",
									  "value": ""
									},
									{
									  "key": "contrast",
									  "value": ""
									},
									{
									  "key": "colorize",
									  "value": ""
									},
									{
									  "key": "equalize",
									  "value": ""
									},
									{
									  "key": "filling",
									  "value": ""
									},
									{
									  "key": "format",
									  "value": ""
									},
									{
									  "key": "grayscale",
									  "value": ""
									},
									{
									  "key": "maxBytes",
									  "value": ""
									},
									{
									  "key": "noise",
									  "value": ""
									},
									{
									  "key": "noUpscale",
									  "value": ""
									},
									{
									  "key": "quality",
									  "value": ""
									},
									{
									  "key": "rgb",
									  "value": ""
									},
									{
									  "key": "roundCorners",
									  "value": ""
									},
									{
									  "key": "rotate",
									  "value": ""
									},
									{
									  "key": "saturation",
									  "value": ""
									},
									{
									  "key": "stripIcc",
									  "value": ""
									},
									{
									  "key": "watermark",
									  "value": ""
									},
									{
									  "key": "blur",
									  "value": ""
									},
									{
									  "key": "sharpen",
									  "value": ""
									},
									{
									  "key": "colors",
									  "value": ""
									},
									{
									  "key": "primaryWebsite",
									  "value": ""
									},
									{
									  "key": "caption",
									  "value": ""
									},
									{
									  "key": "creator",
									  "value": ""
									},
									{
									  "key": "keywords",
									  "value": ""
									},
									{
									  "key": "originalName",
									  "value": ""
									},
									{
									  "key": "licensable",
									  "value": ""
									},
									{
									  "key": "expired",
									  "value": ""
									},
									{
									  "key": "longitude",
									  "value": ""
									},
									{
									  "key": "latitude",
									  "value": ""
									},
									{
									  "key": "radius",
									  "value": ""
									},
									{
									  "key": "distributorId",
									  "value": ""
									},
									{
									  "key": "distributorCategory",
									  "value": ""
									},
									{
									  "key": "distributorName",
									  "value": ""
									},
									{
									  "key": "sourceType",
									  "value": ""
									},
									{
									  "key": "sourceName",
									  "value": ""
									},
									{
									  "key": "source",
									  "value": ""
									},
									{
									  "key": "sourceId",
									  "value": ""
									},
									{
									  "key": "status",
									  "value": ""
									},
									{
									  "key": "ingestionMethod",
									  "value": ""
									},
									{
									  "key": "envelope",
									  "value": ""
									},
									{
									  "key": "startDateTakenOn",
									  "value": ""
									},
									{
									  "key": "endDateTakenOn",
									  "value": ""
									},
									{
									  "key": "startDateUpdated",
									  "value": ""
									},
									{
									  "key": "endDateUpdated",
									  "value": ""
									},
									{
									  "key": "startDateUploaded",
									  "value": ""
									},
									{
									  "key": "endDateUploaded",
									  "value": ""
									},
									{
									  "key": "slug",
									  "value": ""
									},
									{
									  "key": "title",
									  "value": ""
									},
									{
									  "key": "published",
									  "value": ""
									},
									{
									  "key": "sponsored",
									  "value": ""
									},
									{
									  "key": "uuid",
									  "value": ""
									},
									{
									  "key": "fullTextQuery",
									  "value": ""
									},
									{
									  "key": "operator",
									  "value": ""
									},
									{
									  "key": "offset",
									  "value": ""
									},
									{
									  "key": "limit",
									  "value": ""
									},
									{
									  "key": "total",
									  "value": ""
									},
									{
									  "key": "sort",
									  "value": ""
									}
								  ]
								}
							  },
							  "status": "Unauthorized",
							  "code": 401,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "OK",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=&colors=&primaryWebsite=&caption=&creator=&keywords=&originalName=&licensable=&expired=&longitude=&latitude=&radius=&distributorId=&distributorCategory=&distributorName=&sourceType=&sourceName=&source=&sourceId=&status=&ingestionMethod=&envelope=&startDateTakenOn=&endDateTakenOn=&startDateUpdated=&endDateUpdated=&startDateUploaded=&endDateUploaded=&slug=&title=&published=&sponsored=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ],
								  "query": [
									{
									  "key": "trim",
									  "value": ""
									},
									{
									  "key": "trimTolerance",
									  "value": ""
									},
									{
									  "key": "crop",
									  "value": ""
									},
									{
									  "key": "fitIn",
									  "value": ""
									},
									{
									  "key": "halign",
									  "value": ""
									},
									{
									  "key": "valign",
									  "value": ""
									},
									{
									  "key": "smart",
									  "value": ""
									},
									{
									  "key": "maxWidth",
									  "value": ""
									},
									{
									  "key": "maxHeight",
									  "value": ""
									},
									{
									  "key": "brightness",
									  "value": ""
									},
									{
									  "key": "contrast",
									  "value": ""
									},
									{
									  "key": "colorize",
									  "value": ""
									},
									{
									  "key": "equalize",
									  "value": ""
									},
									{
									  "key": "filling",
									  "value": ""
									},
									{
									  "key": "format",
									  "value": ""
									},
									{
									  "key": "grayscale",
									  "value": ""
									},
									{
									  "key": "maxBytes",
									  "value": ""
									},
									{
									  "key": "noise",
									  "value": ""
									},
									{
									  "key": "noUpscale",
									  "value": ""
									},
									{
									  "key": "quality",
									  "value": ""
									},
									{
									  "key": "rgb",
									  "value": ""
									},
									{
									  "key": "roundCorners",
									  "value": ""
									},
									{
									  "key": "rotate",
									  "value": ""
									},
									{
									  "key": "saturation",
									  "value": ""
									},
									{
									  "key": "stripIcc",
									  "value": ""
									},
									{
									  "key": "watermark",
									  "value": ""
									},
									{
									  "key": "blur",
									  "value": ""
									},
									{
									  "key": "sharpen",
									  "value": ""
									},
									{
									  "key": "colors",
									  "value": ""
									},
									{
									  "key": "primaryWebsite",
									  "value": ""
									},
									{
									  "key": "caption",
									  "value": ""
									},
									{
									  "key": "creator",
									  "value": ""
									},
									{
									  "key": "keywords",
									  "value": ""
									},
									{
									  "key": "originalName",
									  "value": ""
									},
									{
									  "key": "licensable",
									  "value": ""
									},
									{
									  "key": "expired",
									  "value": ""
									},
									{
									  "key": "longitude",
									  "value": ""
									},
									{
									  "key": "latitude",
									  "value": ""
									},
									{
									  "key": "radius",
									  "value": ""
									},
									{
									  "key": "distributorId",
									  "value": ""
									},
									{
									  "key": "distributorCategory",
									  "value": ""
									},
									{
									  "key": "distributorName",
									  "value": ""
									},
									{
									  "key": "sourceType",
									  "value": ""
									},
									{
									  "key": "sourceName",
									  "value": ""
									},
									{
									  "key": "source",
									  "value": ""
									},
									{
									  "key": "sourceId",
									  "value": ""
									},
									{
									  "key": "status",
									  "value": ""
									},
									{
									  "key": "ingestionMethod",
									  "value": ""
									},
									{
									  "key": "envelope",
									  "value": ""
									},
									{
									  "key": "startDateTakenOn",
									  "value": ""
									},
									{
									  "key": "endDateTakenOn",
									  "value": ""
									},
									{
									  "key": "startDateUpdated",
									  "value": ""
									},
									{
									  "key": "endDateUpdated",
									  "value": ""
									},
									{
									  "key": "startDateUploaded",
									  "value": ""
									},
									{
									  "key": "endDateUploaded",
									  "value": ""
									},
									{
									  "key": "slug",
									  "value": ""
									},
									{
									  "key": "title",
									  "value": ""
									},
									{
									  "key": "published",
									  "value": ""
									},
									{
									  "key": "sponsored",
									  "value": ""
									},
									{
									  "key": "uuid",
									  "value": ""
									},
									{
									  "key": "fullTextQuery",
									  "value": ""
									},
									{
									  "key": "operator",
									  "value": ""
									},
									{
									  "key": "offset",
									  "value": ""
									},
									{
									  "key": "limit",
									  "value": ""
									},
									{
									  "key": "total",
									  "value": ""
									},
									{
									  "key": "sort",
									  "value": ""
									}
								  ]
								}
							  },
							  "status": "OK",
							  "code": 200,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Not Found",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=&colors=&primaryWebsite=&caption=&creator=&keywords=&originalName=&licensable=&expired=&longitude=&latitude=&radius=&distributorId=&distributorCategory=&distributorName=&sourceType=&sourceName=&source=&sourceId=&status=&ingestionMethod=&envelope=&startDateTakenOn=&endDateTakenOn=&startDateUpdated=&endDateUpdated=&startDateUploaded=&endDateUploaded=&slug=&title=&published=&sponsored=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ],
								  "query": [
									{
									  "key": "trim",
									  "value": ""
									},
									{
									  "key": "trimTolerance",
									  "value": ""
									},
									{
									  "key": "crop",
									  "value": ""
									},
									{
									  "key": "fitIn",
									  "value": ""
									},
									{
									  "key": "halign",
									  "value": ""
									},
									{
									  "key": "valign",
									  "value": ""
									},
									{
									  "key": "smart",
									  "value": ""
									},
									{
									  "key": "maxWidth",
									  "value": ""
									},
									{
									  "key": "maxHeight",
									  "value": ""
									},
									{
									  "key": "brightness",
									  "value": ""
									},
									{
									  "key": "contrast",
									  "value": ""
									},
									{
									  "key": "colorize",
									  "value": ""
									},
									{
									  "key": "equalize",
									  "value": ""
									},
									{
									  "key": "filling",
									  "value": ""
									},
									{
									  "key": "format",
									  "value": ""
									},
									{
									  "key": "grayscale",
									  "value": ""
									},
									{
									  "key": "maxBytes",
									  "value": ""
									},
									{
									  "key": "noise",
									  "value": ""
									},
									{
									  "key": "noUpscale",
									  "value": ""
									},
									{
									  "key": "quality",
									  "value": ""
									},
									{
									  "key": "rgb",
									  "value": ""
									},
									{
									  "key": "roundCorners",
									  "value": ""
									},
									{
									  "key": "rotate",
									  "value": ""
									},
									{
									  "key": "saturation",
									  "value": ""
									},
									{
									  "key": "stripIcc",
									  "value": ""
									},
									{
									  "key": "watermark",
									  "value": ""
									},
									{
									  "key": "blur",
									  "value": ""
									},
									{
									  "key": "sharpen",
									  "value": ""
									},
									{
									  "key": "colors",
									  "value": ""
									},
									{
									  "key": "primaryWebsite",
									  "value": ""
									},
									{
									  "key": "caption",
									  "value": ""
									},
									{
									  "key": "creator",
									  "value": ""
									},
									{
									  "key": "keywords",
									  "value": ""
									},
									{
									  "key": "originalName",
									  "value": ""
									},
									{
									  "key": "licensable",
									  "value": ""
									},
									{
									  "key": "expired",
									  "value": ""
									},
									{
									  "key": "longitude",
									  "value": ""
									},
									{
									  "key": "latitude",
									  "value": ""
									},
									{
									  "key": "radius",
									  "value": ""
									},
									{
									  "key": "distributorId",
									  "value": ""
									},
									{
									  "key": "distributorCategory",
									  "value": ""
									},
									{
									  "key": "distributorName",
									  "value": ""
									},
									{
									  "key": "sourceType",
									  "value": ""
									},
									{
									  "key": "sourceName",
									  "value": ""
									},
									{
									  "key": "source",
									  "value": ""
									},
									{
									  "key": "sourceId",
									  "value": ""
									},
									{
									  "key": "status",
									  "value": ""
									},
									{
									  "key": "ingestionMethod",
									  "value": ""
									},
									{
									  "key": "envelope",
									  "value": ""
									},
									{
									  "key": "startDateTakenOn",
									  "value": ""
									},
									{
									  "key": "endDateTakenOn",
									  "value": ""
									},
									{
									  "key": "startDateUpdated",
									  "value": ""
									},
									{
									  "key": "endDateUpdated",
									  "value": ""
									},
									{
									  "key": "startDateUploaded",
									  "value": ""
									},
									{
									  "key": "endDateUploaded",
									  "value": ""
									},
									{
									  "key": "slug",
									  "value": ""
									},
									{
									  "key": "title",
									  "value": ""
									},
									{
									  "key": "published",
									  "value": ""
									},
									{
									  "key": "sponsored",
									  "value": ""
									},
									{
									  "key": "uuid",
									  "value": ""
									},
									{
									  "key": "fullTextQuery",
									  "value": ""
									},
									{
									  "key": "operator",
									  "value": ""
									},
									{
									  "key": "offset",
									  "value": ""
									},
									{
									  "key": "limit",
									  "value": ""
									},
									{
									  "key": "total",
									  "value": ""
									},
									{
									  "key": "sort",
									  "value": ""
									}
								  ]
								}
							  },
							  "status": "Not Found",
							  "code": 404,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Forbidden",
							  "originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=&colors=&primaryWebsite=&caption=&creator=&keywords=&originalName=&licensable=&expired=&longitude=&latitude=&radius=&distributorId=&distributorCategory=&distributorName=&sourceType=&sourceName=&source=&sourceId=&status=&ingestionMethod=&envelope=&startDateTakenOn=&endDateTakenOn=&startDateUpdated=&endDateUpdated=&startDateUploaded=&endDateUploaded=&slug=&title=&published=&sponsored=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ],
								  "query": [
									{
									  "key": "trim",
									  "value": ""
									},
									{
									  "key": "trimTolerance",
									  "value": ""
									},
									{
									  "key": "crop",
									  "value": ""
									},
									{
									  "key": "fitIn",
									  "value": ""
									},
									{
									  "key": "halign",
									  "value": ""
									},
									{
									  "key": "valign",
									  "value": ""
									},
									{
									  "key": "smart",
									  "value": ""
									},
									{
									  "key": "maxWidth",
									  "value": ""
									},
									{
									  "key": "maxHeight",
									  "value": ""
									},
									{
									  "key": "brightness",
									  "value": ""
									},
									{
									  "key": "contrast",
									  "value": ""
									},
									{
									  "key": "colorize",
									  "value": ""
									},
									{
									  "key": "equalize",
									  "value": ""
									},
									{
									  "key": "filling",
									  "value": ""
									},
									{
									  "key": "format",
									  "value": ""
									},
									{
									  "key": "grayscale",
									  "value": ""
									},
									{
									  "key": "maxBytes",
									  "value": ""
									},
									{
									  "key": "noise",
									  "value": ""
									},
									{
									  "key": "noUpscale",
									  "value": ""
									},
									{
									  "key": "quality",
									  "value": ""
									},
									{
									  "key": "rgb",
									  "value": ""
									},
									{
									  "key": "roundCorners",
									  "value": ""
									},
									{
									  "key": "rotate",
									  "value": ""
									},
									{
									  "key": "saturation",
									  "value": ""
									},
									{
									  "key": "stripIcc",
									  "value": ""
									},
									{
									  "key": "watermark",
									  "value": ""
									},
									{
									  "key": "blur",
									  "value": ""
									},
									{
									  "key": "sharpen",
									  "value": ""
									},
									{
									  "key": "colors",
									  "value": ""
									},
									{
									  "key": "primaryWebsite",
									  "value": ""
									},
									{
									  "key": "caption",
									  "value": ""
									},
									{
									  "key": "creator",
									  "value": ""
									},
									{
									  "key": "keywords",
									  "value": ""
									},
									{
									  "key": "originalName",
									  "value": ""
									},
									{
									  "key": "licensable",
									  "value": ""
									},
									{
									  "key": "expired",
									  "value": ""
									},
									{
									  "key": "longitude",
									  "value": ""
									},
									{
									  "key": "latitude",
									  "value": ""
									},
									{
									  "key": "radius",
									  "value": ""
									},
									{
									  "key": "distributorId",
									  "value": ""
									},
									{
									  "key": "distributorCategory",
									  "value": ""
									},
									{
									  "key": "distributorName",
									  "value": ""
									},
									{
									  "key": "sourceType",
									  "value": ""
									},
									{
									  "key": "sourceName",
									  "value": ""
									},
									{
									  "key": "source",
									  "value": ""
									},
									{
									  "key": "sourceId",
									  "value": ""
									},
									{
									  "key": "status",
									  "value": ""
									},
									{
									  "key": "ingestionMethod",
									  "value": ""
									},
									{
									  "key": "envelope",
									  "value": ""
									},
									{
									  "key": "startDateTakenOn",
									  "value": ""
									},
									{
									  "key": "endDateTakenOn",
									  "value": ""
									},
									{
									  "key": "startDateUpdated",
									  "value": ""
									},
									{
									  "key": "endDateUpdated",
									  "value": ""
									},
									{
									  "key": "startDateUploaded",
									  "value": ""
									},
									{
									  "key": "endDateUploaded",
									  "value": ""
									},
									{
									  "key": "slug",
									  "value": ""
									},
									{
									  "key": "title",
									  "value": ""
									},
									{
									  "key": "published",
									  "value": ""
									},
									{
									  "key": "sponsored",
									  "value": ""
									},
									{
									  "key": "uuid",
									  "value": ""
									},
									{
									  "key": "fullTextQuery",
									  "value": ""
									},
									{
									  "key": "operator",
									  "value": ""
									},
									{
									  "key": "offset",
									  "value": ""
									},
									{
									  "key": "limit",
									  "value": ""
									},
									{
									  "key": "total",
									  "value": ""
									},
									{
									  "key": "sort",
									  "value": ""
									}
								  ]
								}
							  },
							  "status": "Forbidden",
							  "code": 403,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							}
						  ]
						},
						{
						  "name": "Add photos to a lightbox",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/photo/api/v2/lightboxes/:lightboxId/photos",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"photo",
								"api",
								"v2",
								"lightboxes",
								":lightboxId",
								"photos"
							  ],
							  "variable": [
								{
								  "key": "lightboxId",
								  "value": "schema type not provided",
								  "description": "lightbox Id"
								}
							  ]
							}
						  },
						  "response": [
							{
							  "name": "Forbidden",
							  "originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Forbidden",
							  "code": 403,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Unauthorized",
							  "originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Unauthorized",
							  "code": 401,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Created",
							  "originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Created",
							  "code": 201,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Not Found",
							  "originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Not Found",
							  "code": 404,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							}
						  ]
						},
						{
						  "name": "Update photos in a lightbox",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/photo/api/v2/lightboxes/:lightboxId/photos",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"photo",
								"api",
								"v2",
								"lightboxes",
								":lightboxId",
								"photos"
							  ],
							  "variable": [
								{
								  "description": "lightbox Id",
								  "key": "lightboxId",
								  "type": "string",
								  "value": "schema type not provided"
								}
							  ]
							}
						  },
						  "response": [
							{
							  "name": "Forbidden",
							  "originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Forbidden",
							  "code": 403,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Not Found",
							  "originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Not Found",
							  "code": 404,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Created",
							  "originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Created",
							  "code": 201,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Untitled Response",
							  "originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "OK",
							  "code": 200,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Unauthorized",
							  "originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Unauthorized",
							  "code": 401,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							}
						  ]
						},
						{
						  "name": "Remove photos from a lightbox by ID",
						  "request": {
							"auth": {
							  "type": "bearer",
							  "bearer": [
								{
								  "key": "token",
								  "value": "{{token}}",
								  "type": "string"
								}
							  ]
							},
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/photo/api/v2/lightboxes/:lightboxId/photos",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"photo",
								"api",
								"v2",
								"lightboxes",
								":lightboxId",
								"photos"
							  ],
							  "variable": [
								{
								  "description": "lightbox Id",
								  "key": "lightboxId",
								  "type": "string",
								  "value": "schema type not provided"
								}
							  ]
							}
						  },
						  "response": [
							{
							  "name": "Forbidden",
							  "originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Forbidden",
							  "code": 403,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "No Content",
							  "originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "No Content",
							  "code": 204,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							},
							{
							  "name": "Unauthorized",
							  "originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
								  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photos",
								  "host": [
									"{{baseUrl}}"
								  ],
								  "path": [
									"v2",
									"lightboxes",
									"schema type not provided",
									"photos"
								  ]
								}
							  },
							  "status": "Unauthorized",
							  "code": 401,
							  "_postman_previewlanguage": "text",
							  "header": [
								{
								  "key": "Content-Type",
								  "value": "text/plain"
								}
							  ],
							  "cookie": [],
							  "body": ""
							}
						  ]
						}
					  ],
					  "protocolProfileBehavior": {},
					  "_postman_isSubFolder": true
					},
					{
					  "name": "Return a specific lightbox with images",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/lightboxes/:lightboxId",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"lightboxes",
							":lightboxId"
						  ],
						  "query": [
							{
							  "key": "trim",
							  "value": "",
							  "description": "Remove surrounding space in images using either `topleft` or `bottomright` pixel color",
							  "disabled": true
							},
							{
							  "key": "trimTolerance",
							  "value": "",
							  "description": "The tolerance, between 0 and 442, for trimming",
							  "disabled": true
							},
							{
							  "key": "crop",
							  "value": "",
							  "description": "How to crop the photo, in the form `LxT:RxB`",
							  "disabled": true
							},
							{
							  "key": "fitIn",
							  "value": "",
							  "description": "How to fit into a space, either `normal` `full` or `adaptive`",
							  "disabled": true
							},
							{
							  "key": "halign",
							  "value": "",
							  "description": "The horizontal alignment of the crop, either `left` `center` or `right`",
							  "disabled": true
							},
							{
							  "key": "valign",
							  "value": "",
							  "description": "The vertical alignment of the crop, either `top` `middle` or `bottom`",
							  "disabled": true
							},
							{
							  "key": "smart",
							  "value": "",
							  "description": "If the crop should be smart (finding focal points) or not",
							  "disabled": true
							},
							{
							  "key": "maxWidth",
							  "value": "",
							  "description": "The desired width of the image",
							  "disabled": true
							},
							{
							  "key": "maxHeight",
							  "value": "",
							  "description": "The desired height of the image",
							  "disabled": true
							},
							{
							  "key": "brightness",
							  "value": "",
							  "description": "The brightness, between -100 and 100",
							  "disabled": true
							},
							{
							  "key": "contrast",
							  "value": "",
							  "description": "The contrast, , between -100 and 100",
							  "disabled": true
							},
							{
							  "key": "colorize",
							  "value": "",
							  "description": "A colorize parameter, of the form `red:green:blue:fill`, each of -100 to 100",
							  "disabled": true
							},
							{
							  "key": "equalize",
							  "value": "",
							  "description": "If the color distribution of the image should be equalized",
							  "disabled": true
							},
							{
							  "key": "filling",
							  "value": "",
							  "description": "The color to fill in empty parts of the iamge",
							  "disabled": true
							},
							{
							  "key": "format",
							  "value": "",
							  "description": "Return in a new format, either `webp`, `jpeg`, `gif`, or `png`",
							  "disabled": true
							},
							{
							  "key": "grayscale",
							  "value": "",
							  "description": "If the image should be gray-scaled",
							  "disabled": true
							},
							{
							  "key": "maxBytes",
							  "value": "",
							  "description": "Automatically degrades the quality of the image until it is no larger than this",
							  "disabled": true
							},
							{
							  "key": "noise",
							  "value": "",
							  "description": "Adds noise to an image, between 0 and 100",
							  "disabled": true
							},
							{
							  "key": "noUpscale",
							  "value": "",
							  "description": "Do not upscale the image to bigger dimensions",
							  "disabled": true
							},
							{
							  "key": "quality",
							  "value": "",
							  "description": "The overall quality of a JPEG, between 0 and 100",
							  "disabled": true
							},
							{
							  "key": "rgb",
							  "value": "",
							  "description": "Changes the color of the image, in the form r:g:b, each between -100 and 100",
							  "disabled": true
							},
							{
							  "key": "roundCorners",
							  "value": "",
							  "description": "Round the corners with a color background, of form `radius:background`",
							  "disabled": true
							},
							{
							  "key": "rotate",
							  "value": "",
							  "description": "Rotate the image in degrees, either 0 90 180 or 270",
							  "disabled": true
							},
							{
							  "key": "saturation",
							  "value": "",
							  "description": "Scales the saturation of the image between 0 and 100",
							  "disabled": true
							},
							{
							  "key": "stripIcc",
							  "value": "",
							  "description": "Remove any ICC information from the image",
							  "disabled": true
							},
							{
							  "key": "watermark",
							  "value": "",
							  "description": "Watermark the image, of form `url::horiz position::vert position::transparency`",
							  "disabled": true
							},
							{
							  "key": "blur",
							  "value": "",
							  "description": "Add Gaussian blur, of the form `radius[:sigma]`",
							  "disabled": true
							},
							{
							  "key": "sharpen",
							  "value": "",
							  "description": "Sharpen the image, in the form `amount:radius:luminance`",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "description": "lightbox Id",
							  "key": "lightboxId",
							  "type": "string",
							  "value": "schema type not provided"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "trim",
								  "value": ""
								},
								{
								  "key": "trimTolerance",
								  "value": ""
								},
								{
								  "key": "crop",
								  "value": ""
								},
								{
								  "key": "fitIn",
								  "value": ""
								},
								{
								  "key": "halign",
								  "value": ""
								},
								{
								  "key": "valign",
								  "value": ""
								},
								{
								  "key": "smart",
								  "value": ""
								},
								{
								  "key": "maxWidth",
								  "value": ""
								},
								{
								  "key": "maxHeight",
								  "value": ""
								},
								{
								  "key": "brightness",
								  "value": ""
								},
								{
								  "key": "contrast",
								  "value": ""
								},
								{
								  "key": "colorize",
								  "value": ""
								},
								{
								  "key": "equalize",
								  "value": ""
								},
								{
								  "key": "filling",
								  "value": ""
								},
								{
								  "key": "format",
								  "value": ""
								},
								{
								  "key": "grayscale",
								  "value": ""
								},
								{
								  "key": "maxBytes",
								  "value": ""
								},
								{
								  "key": "noise",
								  "value": ""
								},
								{
								  "key": "noUpscale",
								  "value": ""
								},
								{
								  "key": "quality",
								  "value": ""
								},
								{
								  "key": "rgb",
								  "value": ""
								},
								{
								  "key": "roundCorners",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								},
								{
								  "key": "saturation",
								  "value": ""
								},
								{
								  "key": "stripIcc",
								  "value": ""
								},
								{
								  "key": "watermark",
								  "value": ""
								},
								{
								  "key": "blur",
								  "value": ""
								},
								{
								  "key": "sharpen",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "trim",
								  "value": ""
								},
								{
								  "key": "trimTolerance",
								  "value": ""
								},
								{
								  "key": "crop",
								  "value": ""
								},
								{
								  "key": "fitIn",
								  "value": ""
								},
								{
								  "key": "halign",
								  "value": ""
								},
								{
								  "key": "valign",
								  "value": ""
								},
								{
								  "key": "smart",
								  "value": ""
								},
								{
								  "key": "maxWidth",
								  "value": ""
								},
								{
								  "key": "maxHeight",
								  "value": ""
								},
								{
								  "key": "brightness",
								  "value": ""
								},
								{
								  "key": "contrast",
								  "value": ""
								},
								{
								  "key": "colorize",
								  "value": ""
								},
								{
								  "key": "equalize",
								  "value": ""
								},
								{
								  "key": "filling",
								  "value": ""
								},
								{
								  "key": "format",
								  "value": ""
								},
								{
								  "key": "grayscale",
								  "value": ""
								},
								{
								  "key": "maxBytes",
								  "value": ""
								},
								{
								  "key": "noise",
								  "value": ""
								},
								{
								  "key": "noUpscale",
								  "value": ""
								},
								{
								  "key": "quality",
								  "value": ""
								},
								{
								  "key": "rgb",
								  "value": ""
								},
								{
								  "key": "roundCorners",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								},
								{
								  "key": "saturation",
								  "value": ""
								},
								{
								  "key": "stripIcc",
								  "value": ""
								},
								{
								  "key": "watermark",
								  "value": ""
								},
								{
								  "key": "blur",
								  "value": ""
								},
								{
								  "key": "sharpen",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "trim",
								  "value": ""
								},
								{
								  "key": "trimTolerance",
								  "value": ""
								},
								{
								  "key": "crop",
								  "value": ""
								},
								{
								  "key": "fitIn",
								  "value": ""
								},
								{
								  "key": "halign",
								  "value": ""
								},
								{
								  "key": "valign",
								  "value": ""
								},
								{
								  "key": "smart",
								  "value": ""
								},
								{
								  "key": "maxWidth",
								  "value": ""
								},
								{
								  "key": "maxHeight",
								  "value": ""
								},
								{
								  "key": "brightness",
								  "value": ""
								},
								{
								  "key": "contrast",
								  "value": ""
								},
								{
								  "key": "colorize",
								  "value": ""
								},
								{
								  "key": "equalize",
								  "value": ""
								},
								{
								  "key": "filling",
								  "value": ""
								},
								{
								  "key": "format",
								  "value": ""
								},
								{
								  "key": "grayscale",
								  "value": ""
								},
								{
								  "key": "maxBytes",
								  "value": ""
								},
								{
								  "key": "noise",
								  "value": ""
								},
								{
								  "key": "noUpscale",
								  "value": ""
								},
								{
								  "key": "quality",
								  "value": ""
								},
								{
								  "key": "rgb",
								  "value": ""
								},
								{
								  "key": "roundCorners",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								},
								{
								  "key": "saturation",
								  "value": ""
								},
								{
								  "key": "stripIcc",
								  "value": ""
								},
								{
								  "key": "watermark",
								  "value": ""
								},
								{
								  "key": "blur",
								  "value": ""
								},
								{
								  "key": "sharpen",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "OK",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "trim",
								  "value": ""
								},
								{
								  "key": "trimTolerance",
								  "value": ""
								},
								{
								  "key": "crop",
								  "value": ""
								},
								{
								  "key": "fitIn",
								  "value": ""
								},
								{
								  "key": "halign",
								  "value": ""
								},
								{
								  "key": "valign",
								  "value": ""
								},
								{
								  "key": "smart",
								  "value": ""
								},
								{
								  "key": "maxWidth",
								  "value": ""
								},
								{
								  "key": "maxHeight",
								  "value": ""
								},
								{
								  "key": "brightness",
								  "value": ""
								},
								{
								  "key": "contrast",
								  "value": ""
								},
								{
								  "key": "colorize",
								  "value": ""
								},
								{
								  "key": "equalize",
								  "value": ""
								},
								{
								  "key": "filling",
								  "value": ""
								},
								{
								  "key": "format",
								  "value": ""
								},
								{
								  "key": "grayscale",
								  "value": ""
								},
								{
								  "key": "maxBytes",
								  "value": ""
								},
								{
								  "key": "noise",
								  "value": ""
								},
								{
								  "key": "noUpscale",
								  "value": ""
								},
								{
								  "key": "quality",
								  "value": ""
								},
								{
								  "key": "rgb",
								  "value": ""
								},
								{
								  "key": "roundCorners",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								},
								{
								  "key": "saturation",
								  "value": ""
								},
								{
								  "key": "stripIcc",
								  "value": ""
								},
								{
								  "key": "watermark",
								  "value": ""
								},
								{
								  "key": "blur",
								  "value": ""
								},
								{
								  "key": "sharpen",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					},
					{
					  "name": "Update a lightbox",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "PUT",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/lightboxes/:lightboxId?photos=",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"lightboxes",
							":lightboxId"
						  ],
						  "query": [
							{
							  "key": "photos",
							  "value": "",
							  "description": "updatePhotos"
							}
						  ],
						  "variable": [
							{
							  "description": "lightbox Id",
							  "key": "lightboxId",
							  "type": "string",
							  "value": "schema type not provided"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided?photos=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "photos",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Created",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided?photos=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "photos",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Created",
						  "code": 201,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "OK",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided?photos=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "photos",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided?photos=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "photos",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided?photos=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "photos",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					},
					{
					  "name": "Delete a lightbox",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "DELETE",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/lightboxes/:lightboxId",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"lightboxes",
							":lightboxId"
						  ],
						  "variable": [
							{
							  "description": "lightbox Id",
							  "key": "lightboxId",
							  "type": "string",
							  "value": "schema type not provided"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "No Content",
						  "originalRequest": {
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "No Content",
						  "code": 204,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					},
					{
					  "name": "Update a specific photo in a lightbox",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "PUT",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/lightboxes/:lightboxId/photo/:photoId",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"lightboxes",
							":lightboxId",
							"photo",
							":photoId"
						  ],
						  "variable": [
							{
							  "description": "lightbox Id",
							  "key": "lightboxId",
							  "type": "string",
							  "value": "schema type not provided"
							},
							{
							  "description": "photo Id",
							  "key": "photoId",
							  "type": "string",
							  "value": "schema type not provided"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photo/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided",
								"photo",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photo/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided",
								"photo",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Created",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photo/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided",
								"photo",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Created",
						  "code": 201,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photo/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided",
								"photo",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "OK",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/lightboxes/schema type not provided/photo/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"lightboxes",
								"schema type not provided",
								"photo",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					}
				  ],
				  "protocolProfileBehavior": {},
				  "_postman_isSubFolder": true
				},
				{
				  "name": "Get lightboxes of photos",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/photo/api/v2/lightboxes",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"photo",
						"api",
						"v2",
						"lightboxes"
					  ],
					  "query": [
						{
						  "key": "startDate",
						  "value": "",
						  "disabled": true
						},
						{
						  "key": "endDate",
						  "value": "",
						  "disabled": true
						},
						{
						  "key": "tasks",
						  "value": "",
						  "disabled": true
						},
						{
						  "key": "uuid",
						  "value": "",
						  "description": "The Arc ID",
						  "disabled": true
						},
						{
						  "key": "fullTextQuery",
						  "value": "",
						  "description": "A natural language search query that matches multiple fields",
						  "disabled": true
						},
						{
						  "key": "operator",
						  "value": "",
						  "description": "Whether the terms are or'd or and'd together, default and",
						  "disabled": true
						},
						{
						  "key": "offset",
						  "value": "",
						  "description": "Where in the sorted resultset to start the response at",
						  "disabled": true
						},
						{
						  "key": "limit",
						  "value": "",
						  "description": "How many items to return",
						  "disabled": true
						},
						{
						  "key": "total",
						  "value": "",
						  "description": "The total number of items that match the search parameters",
						  "disabled": true
						},
						{
						  "key": "sort",
						  "value": "",
						  "description": "The sort order, for example -title or +caption",
						  "disabled": true
						},
						{
						  "key": "trim",
						  "value": "",
						  "description": "Remove surrounding space in images using either `topleft` or `bottomright` pixel color",
						  "disabled": true
						},
						{
						  "key": "trimTolerance",
						  "value": "",
						  "description": "The tolerance, between 0 and 442, for trimming",
						  "disabled": true
						},
						{
						  "key": "crop",
						  "value": "",
						  "description": "How to crop the photo, in the form `LxT:RxB`",
						  "disabled": true
						},
						{
						  "key": "fitIn",
						  "value": "",
						  "description": "How to fit into a space, either `normal` `full` or `adaptive`",
						  "disabled": true
						},
						{
						  "key": "halign",
						  "value": "",
						  "description": "The horizontal alignment of the crop, either `left` `center` or `right`",
						  "disabled": true
						},
						{
						  "key": "valign",
						  "value": "",
						  "description": "The vertical alignment of the crop, either `top` `middle` or `bottom`",
						  "disabled": true
						},
						{
						  "key": "smart",
						  "value": "",
						  "description": "If the crop should be smart (finding focal points) or not",
						  "disabled": true
						},
						{
						  "key": "maxWidth",
						  "value": "",
						  "description": "The desired width of the image",
						  "disabled": true
						},
						{
						  "key": "maxHeight",
						  "value": "",
						  "description": "The desired height of the image",
						  "disabled": true
						},
						{
						  "key": "brightness",
						  "value": "",
						  "description": "The brightness, between -100 and 100",
						  "disabled": true
						},
						{
						  "key": "contrast",
						  "value": "",
						  "description": "The contrast, , between -100 and 100",
						  "disabled": true
						},
						{
						  "key": "colorize",
						  "value": "",
						  "description": "A colorize parameter, of the form `red:green:blue:fill`, each of -100 to 100",
						  "disabled": true
						},
						{
						  "key": "equalize",
						  "value": "",
						  "description": "If the color distribution of the image should be equalized",
						  "disabled": true
						},
						{
						  "key": "filling",
						  "value": "",
						  "description": "The color to fill in empty parts of the iamge",
						  "disabled": true
						},
						{
						  "key": "format",
						  "value": "",
						  "description": "Return in a new format, either `webp`, `jpeg`, `gif`, or `png`",
						  "disabled": true
						},
						{
						  "key": "grayscale",
						  "value": "",
						  "description": "If the image should be gray-scaled",
						  "disabled": true
						},
						{
						  "key": "maxBytes",
						  "value": "",
						  "description": "Automatically degrades the quality of the image until it is no larger than this",
						  "disabled": true
						},
						{
						  "key": "noise",
						  "value": "",
						  "description": "Adds noise to an image, between 0 and 100",
						  "disabled": true
						},
						{
						  "key": "noUpscale",
						  "value": "",
						  "description": "Do not upscale the image to bigger dimensions",
						  "disabled": true
						},
						{
						  "key": "quality",
						  "value": "",
						  "description": "The overall quality of a JPEG, between 0 and 100",
						  "disabled": true
						},
						{
						  "key": "rgb",
						  "value": "",
						  "description": "Changes the color of the image, in the form r:g:b, each between -100 and 100",
						  "disabled": true
						},
						{
						  "key": "roundCorners",
						  "value": "",
						  "description": "Round the corners with a color background, of form `radius:background`",
						  "disabled": true
						},
						{
						  "key": "rotate",
						  "value": "",
						  "description": "Rotate the image in degrees, either 0 90 180 or 270",
						  "disabled": true
						},
						{
						  "key": "saturation",
						  "value": "",
						  "description": "Scales the saturation of the image between 0 and 100",
						  "disabled": true
						},
						{
						  "key": "stripIcc",
						  "value": "",
						  "description": "Remove any ICC information from the image",
						  "disabled": true
						},
						{
						  "key": "watermark",
						  "value": "",
						  "description": "Watermark the image, of form `url::horiz position::vert position::transparency`",
						  "disabled": true
						},
						{
						  "key": "blur",
						  "value": "",
						  "description": "Add Gaussian blur, of the form `radius[:sigma]`",
						  "disabled": true
						},
						{
						  "key": "sharpen",
						  "value": "",
						  "description": "Sharpen the image, in the form `amount:radius:luminance`",
						  "disabled": true
						}
					  ]
					}
				  },
				  "response": [
					{
					  "name": "OK",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/lightboxes?startDate=&endDate=&tasks=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=&trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"lightboxes"
						  ],
						  "query": [
							{
							  "key": "startDate",
							  "value": ""
							},
							{
							  "key": "endDate",
							  "value": ""
							},
							{
							  "key": "tasks",
							  "value": ""
							},
							{
							  "key": "uuid",
							  "value": ""
							},
							{
							  "key": "fullTextQuery",
							  "value": ""
							},
							{
							  "key": "operator",
							  "value": ""
							},
							{
							  "key": "offset",
							  "value": ""
							},
							{
							  "key": "limit",
							  "value": ""
							},
							{
							  "key": "total",
							  "value": ""
							},
							{
							  "key": "sort",
							  "value": ""
							},
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "OK",
					  "code": 200,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Unauthorized",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/lightboxes?startDate=&endDate=&tasks=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=&trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"lightboxes"
						  ],
						  "query": [
							{
							  "key": "startDate",
							  "value": ""
							},
							{
							  "key": "endDate",
							  "value": ""
							},
							{
							  "key": "tasks",
							  "value": ""
							},
							{
							  "key": "uuid",
							  "value": ""
							},
							{
							  "key": "fullTextQuery",
							  "value": ""
							},
							{
							  "key": "operator",
							  "value": ""
							},
							{
							  "key": "offset",
							  "value": ""
							},
							{
							  "key": "limit",
							  "value": ""
							},
							{
							  "key": "total",
							  "value": ""
							},
							{
							  "key": "sort",
							  "value": ""
							},
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "Unauthorized",
					  "code": 401,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Forbidden",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/lightboxes?startDate=&endDate=&tasks=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=&trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"lightboxes"
						  ],
						  "query": [
							{
							  "key": "startDate",
							  "value": ""
							},
							{
							  "key": "endDate",
							  "value": ""
							},
							{
							  "key": "tasks",
							  "value": ""
							},
							{
							  "key": "uuid",
							  "value": ""
							},
							{
							  "key": "fullTextQuery",
							  "value": ""
							},
							{
							  "key": "operator",
							  "value": ""
							},
							{
							  "key": "offset",
							  "value": ""
							},
							{
							  "key": "limit",
							  "value": ""
							},
							{
							  "key": "total",
							  "value": ""
							},
							{
							  "key": "sort",
							  "value": ""
							},
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "Forbidden",
					  "code": 403,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Not Found",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/lightboxes?startDate=&endDate=&tasks=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=&trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"lightboxes"
						  ],
						  "query": [
							{
							  "key": "startDate",
							  "value": ""
							},
							{
							  "key": "endDate",
							  "value": ""
							},
							{
							  "key": "tasks",
							  "value": ""
							},
							{
							  "key": "uuid",
							  "value": ""
							},
							{
							  "key": "fullTextQuery",
							  "value": ""
							},
							{
							  "key": "operator",
							  "value": ""
							},
							{
							  "key": "offset",
							  "value": ""
							},
							{
							  "key": "limit",
							  "value": ""
							},
							{
							  "key": "total",
							  "value": ""
							},
							{
							  "key": "sort",
							  "value": ""
							},
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "Not Found",
					  "code": 404,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					}
				  ]
				},
				{
				  "name": "Create a new lightbox",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "POST",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/photo/api/v2/lightboxes",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"photo",
						"api",
						"v2",
						"lightboxes"
					  ]
					}
				  },
				  "response": [
					{
					  "name": "Forbidden",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/lightboxes",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"lightboxes"
						  ]
						}
					  },
					  "status": "Forbidden",
					  "code": 403,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Created",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/lightboxes",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"lightboxes"
						  ]
						}
					  },
					  "status": "Created",
					  "code": 201,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "OK",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/lightboxes",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"lightboxes"
						  ]
						}
					  },
					  "status": "OK",
					  "code": 200,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Unauthorized",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/lightboxes",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"lightboxes"
						  ]
						}
					  },
					  "status": "Unauthorized",
					  "code": 401,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Not Found",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/lightboxes",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"lightboxes"
						  ]
						}
					  },
					  "status": "Not Found",
					  "code": 404,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					}
				  ]
				},
				{
				  "name": "Return a list of lightboxes with a specific name prefix",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/photo/api/v2/lightboxes/names/:prefix",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"photo",
						"api",
						"v2",
						"lightboxes",
						"names",
						":prefix"
					  ],
					  "variable": [
						{
						  "description": "prefix",
						  "key": "prefix",
						  "type": "string",
						  "value": "schema type not provided"
						}
					  ]
					}
				  },
				  "response": [
					{
					  "name": "Forbidden",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/lightboxes/names/schema type not provided",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"lightboxes",
							"names",
							"schema type not provided"
						  ]
						}
					  },
					  "status": "Forbidden",
					  "code": 403,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Unauthorized",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/lightboxes/names/schema type not provided",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"lightboxes",
							"names",
							"schema type not provided"
						  ]
						}
					  },
					  "status": "Unauthorized",
					  "code": 401,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Not Found",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/lightboxes/names/schema type not provided",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"lightboxes",
							"names",
							"schema type not provided"
						  ]
						}
					  },
					  "status": "Not Found",
					  "code": 404,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "OK",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/lightboxes/names/schema type not provided",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"lightboxes",
							"names",
							"schema type not provided"
						  ]
						}
					  },
					  "status": "OK",
					  "code": 200,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					}
				  ]
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			},
			{
			  "name": "photos",
			  "item": [
				{
				  "name": "{photo Id}",
				  "item": [
					{
					  "name": "Return photo metadata by ID",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/photos/:photoId",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"photos",
							":photoId"
						  ],
						  "query": [
							{
							  "key": "trim",
							  "value": "",
							  "description": "Remove surrounding space in images using either `topleft` or `bottomright` pixel color",
							  "disabled": true
							},
							{
							  "key": "trimTolerance",
							  "value": "",
							  "description": "The tolerance, between 0 and 442, for trimming",
							  "disabled": true
							},
							{
							  "key": "crop",
							  "value": "",
							  "description": "How to crop the photo, in the form `LxT:RxB`",
							  "disabled": true
							},
							{
							  "key": "fitIn",
							  "value": "",
							  "description": "How to fit into a space, either `normal` `full` or `adaptive`",
							  "disabled": true
							},
							{
							  "key": "halign",
							  "value": "",
							  "description": "The horizontal alignment of the crop, either `left` `center` or `right`",
							  "disabled": true
							},
							{
							  "key": "valign",
							  "value": "",
							  "description": "The vertical alignment of the crop, either `top` `middle` or `bottom`",
							  "disabled": true
							},
							{
							  "key": "smart",
							  "value": "",
							  "description": "If the crop should be smart (finding focal points) or not",
							  "disabled": true
							},
							{
							  "key": "maxWidth",
							  "value": "",
							  "description": "The desired width of the image",
							  "disabled": true
							},
							{
							  "key": "maxHeight",
							  "value": "",
							  "description": "The desired height of the image",
							  "disabled": true
							},
							{
							  "key": "brightness",
							  "value": "",
							  "description": "The brightness, between -100 and 100",
							  "disabled": true
							},
							{
							  "key": "contrast",
							  "value": "",
							  "description": "The contrast, , between -100 and 100",
							  "disabled": true
							},
							{
							  "key": "colorize",
							  "value": "",
							  "description": "A colorize parameter, of the form `red:green:blue:fill`, each of -100 to 100",
							  "disabled": true
							},
							{
							  "key": "equalize",
							  "value": "",
							  "description": "If the color distribution of the image should be equalized",
							  "disabled": true
							},
							{
							  "key": "filling",
							  "value": "",
							  "description": "The color to fill in empty parts of the iamge",
							  "disabled": true
							},
							{
							  "key": "format",
							  "value": "",
							  "description": "Return in a new format, either `webp`, `jpeg`, `gif`, or `png`",
							  "disabled": true
							},
							{
							  "key": "grayscale",
							  "value": "",
							  "description": "If the image should be gray-scaled",
							  "disabled": true
							},
							{
							  "key": "maxBytes",
							  "value": "",
							  "description": "Automatically degrades the quality of the image until it is no larger than this",
							  "disabled": true
							},
							{
							  "key": "noise",
							  "value": "",
							  "description": "Adds noise to an image, between 0 and 100",
							  "disabled": true
							},
							{
							  "key": "noUpscale",
							  "value": "",
							  "description": "Do not upscale the image to bigger dimensions",
							  "disabled": true
							},
							{
							  "key": "quality",
							  "value": "",
							  "description": "The overall quality of a JPEG, between 0 and 100",
							  "disabled": true
							},
							{
							  "key": "rgb",
							  "value": "",
							  "description": "Changes the color of the image, in the form r:g:b, each between -100 and 100",
							  "disabled": true
							},
							{
							  "key": "roundCorners",
							  "value": "",
							  "description": "Round the corners with a color background, of form `radius:background`",
							  "disabled": true
							},
							{
							  "key": "rotate",
							  "value": "",
							  "description": "Rotate the image in degrees, either 0 90 180 or 270",
							  "disabled": true
							},
							{
							  "key": "saturation",
							  "value": "",
							  "description": "Scales the saturation of the image between 0 and 100",
							  "disabled": true
							},
							{
							  "key": "stripIcc",
							  "value": "",
							  "description": "Remove any ICC information from the image",
							  "disabled": true
							},
							{
							  "key": "watermark",
							  "value": "",
							  "description": "Watermark the image, of form `url::horiz position::vert position::transparency`",
							  "disabled": true
							},
							{
							  "key": "blur",
							  "value": "",
							  "description": "Add Gaussian blur, of the form `radius[:sigma]`",
							  "disabled": true
							},
							{
							  "key": "sharpen",
							  "value": "",
							  "description": "Sharpen the image, in the form `amount:radius:luminance`",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "description": "photo Id",
							  "key": "photoId",
							  "type": "string",
							  "value": "schema type not provided"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "OK",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "trim",
								  "value": ""
								},
								{
								  "key": "trimTolerance",
								  "value": ""
								},
								{
								  "key": "crop",
								  "value": ""
								},
								{
								  "key": "fitIn",
								  "value": ""
								},
								{
								  "key": "halign",
								  "value": ""
								},
								{
								  "key": "valign",
								  "value": ""
								},
								{
								  "key": "smart",
								  "value": ""
								},
								{
								  "key": "maxWidth",
								  "value": ""
								},
								{
								  "key": "maxHeight",
								  "value": ""
								},
								{
								  "key": "brightness",
								  "value": ""
								},
								{
								  "key": "contrast",
								  "value": ""
								},
								{
								  "key": "colorize",
								  "value": ""
								},
								{
								  "key": "equalize",
								  "value": ""
								},
								{
								  "key": "filling",
								  "value": ""
								},
								{
								  "key": "format",
								  "value": ""
								},
								{
								  "key": "grayscale",
								  "value": ""
								},
								{
								  "key": "maxBytes",
								  "value": ""
								},
								{
								  "key": "noise",
								  "value": ""
								},
								{
								  "key": "noUpscale",
								  "value": ""
								},
								{
								  "key": "quality",
								  "value": ""
								},
								{
								  "key": "rgb",
								  "value": ""
								},
								{
								  "key": "roundCorners",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								},
								{
								  "key": "saturation",
								  "value": ""
								},
								{
								  "key": "stripIcc",
								  "value": ""
								},
								{
								  "key": "watermark",
								  "value": ""
								},
								{
								  "key": "blur",
								  "value": ""
								},
								{
								  "key": "sharpen",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "trim",
								  "value": ""
								},
								{
								  "key": "trimTolerance",
								  "value": ""
								},
								{
								  "key": "crop",
								  "value": ""
								},
								{
								  "key": "fitIn",
								  "value": ""
								},
								{
								  "key": "halign",
								  "value": ""
								},
								{
								  "key": "valign",
								  "value": ""
								},
								{
								  "key": "smart",
								  "value": ""
								},
								{
								  "key": "maxWidth",
								  "value": ""
								},
								{
								  "key": "maxHeight",
								  "value": ""
								},
								{
								  "key": "brightness",
								  "value": ""
								},
								{
								  "key": "contrast",
								  "value": ""
								},
								{
								  "key": "colorize",
								  "value": ""
								},
								{
								  "key": "equalize",
								  "value": ""
								},
								{
								  "key": "filling",
								  "value": ""
								},
								{
								  "key": "format",
								  "value": ""
								},
								{
								  "key": "grayscale",
								  "value": ""
								},
								{
								  "key": "maxBytes",
								  "value": ""
								},
								{
								  "key": "noise",
								  "value": ""
								},
								{
								  "key": "noUpscale",
								  "value": ""
								},
								{
								  "key": "quality",
								  "value": ""
								},
								{
								  "key": "rgb",
								  "value": ""
								},
								{
								  "key": "roundCorners",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								},
								{
								  "key": "saturation",
								  "value": ""
								},
								{
								  "key": "stripIcc",
								  "value": ""
								},
								{
								  "key": "watermark",
								  "value": ""
								},
								{
								  "key": "blur",
								  "value": ""
								},
								{
								  "key": "sharpen",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "trim",
								  "value": ""
								},
								{
								  "key": "trimTolerance",
								  "value": ""
								},
								{
								  "key": "crop",
								  "value": ""
								},
								{
								  "key": "fitIn",
								  "value": ""
								},
								{
								  "key": "halign",
								  "value": ""
								},
								{
								  "key": "valign",
								  "value": ""
								},
								{
								  "key": "smart",
								  "value": ""
								},
								{
								  "key": "maxWidth",
								  "value": ""
								},
								{
								  "key": "maxHeight",
								  "value": ""
								},
								{
								  "key": "brightness",
								  "value": ""
								},
								{
								  "key": "contrast",
								  "value": ""
								},
								{
								  "key": "colorize",
								  "value": ""
								},
								{
								  "key": "equalize",
								  "value": ""
								},
								{
								  "key": "filling",
								  "value": ""
								},
								{
								  "key": "format",
								  "value": ""
								},
								{
								  "key": "grayscale",
								  "value": ""
								},
								{
								  "key": "maxBytes",
								  "value": ""
								},
								{
								  "key": "noise",
								  "value": ""
								},
								{
								  "key": "noUpscale",
								  "value": ""
								},
								{
								  "key": "quality",
								  "value": ""
								},
								{
								  "key": "rgb",
								  "value": ""
								},
								{
								  "key": "roundCorners",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								},
								{
								  "key": "saturation",
								  "value": ""
								},
								{
								  "key": "stripIcc",
								  "value": ""
								},
								{
								  "key": "watermark",
								  "value": ""
								},
								{
								  "key": "blur",
								  "value": ""
								},
								{
								  "key": "sharpen",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ],
							  "query": [
								{
								  "key": "trim",
								  "value": ""
								},
								{
								  "key": "trimTolerance",
								  "value": ""
								},
								{
								  "key": "crop",
								  "value": ""
								},
								{
								  "key": "fitIn",
								  "value": ""
								},
								{
								  "key": "halign",
								  "value": ""
								},
								{
								  "key": "valign",
								  "value": ""
								},
								{
								  "key": "smart",
								  "value": ""
								},
								{
								  "key": "maxWidth",
								  "value": ""
								},
								{
								  "key": "maxHeight",
								  "value": ""
								},
								{
								  "key": "brightness",
								  "value": ""
								},
								{
								  "key": "contrast",
								  "value": ""
								},
								{
								  "key": "colorize",
								  "value": ""
								},
								{
								  "key": "equalize",
								  "value": ""
								},
								{
								  "key": "filling",
								  "value": ""
								},
								{
								  "key": "format",
								  "value": ""
								},
								{
								  "key": "grayscale",
								  "value": ""
								},
								{
								  "key": "maxBytes",
								  "value": ""
								},
								{
								  "key": "noise",
								  "value": ""
								},
								{
								  "key": "noUpscale",
								  "value": ""
								},
								{
								  "key": "quality",
								  "value": ""
								},
								{
								  "key": "rgb",
								  "value": ""
								},
								{
								  "key": "roundCorners",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								},
								{
								  "key": "saturation",
								  "value": ""
								},
								{
								  "key": "stripIcc",
								  "value": ""
								},
								{
								  "key": "watermark",
								  "value": ""
								},
								{
								  "key": "blur",
								  "value": ""
								},
								{
								  "key": "sharpen",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					},
					{
					  "name": "Upload photo ANS with an ID",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/photos/:photoId",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"photos",
							":photoId"
						  ],
						  "variable": [
							{
							  "description": "photoId",
							  "key": "photoId",
							  "type": "string",
							  "value": "schema type not provided"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "Created",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Created",
						  "code": 201,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "OK",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					},
					{
					  "name": "Update an existing photo",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "PUT",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/photos/:photoId",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"photos",
							":photoId"
						  ],
						  "variable": [
							{
							  "description": "photoId",
							  "key": "photoId",
							  "type": "string",
							  "value": "schema type not provided"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "Created",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Created",
						  "code": 201,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "OK",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "PUT",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					},
					{
					  "name": "Delete a photo",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "DELETE",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/photos/:photoId",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"photos",
							":photoId"
						  ],
						  "variable": [
							{
							  "description": "photoId",
							  "key": "photoId",
							  "type": "string",
							  "value": "test"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "No Content",
						  "originalRequest": {
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "No Content",
						  "code": 204,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "DELETE",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided"
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					},
					{
					  "name": "Make a perfect clone or crop of a photo",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/photos/:photoId/clone",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"photos",
							":photoId",
							"clone"
						  ],
						  "query": [
							{
							  "key": "top",
							  "value": "",
							  "description": "The top of the desired crop, in pixels",
							  "disabled": true
							},
							{
							  "key": "left",
							  "value": "",
							  "description": "The left of the desired crop, in pixels",
							  "disabled": true
							},
							{
							  "key": "width",
							  "value": "",
							  "description": "The width of the desired crop, in pixels",
							  "disabled": true
							},
							{
							  "key": "height",
							  "value": "",
							  "description": "The height of the desired crop, in pixels",
							  "disabled": true
							},
							{
							  "key": "scaleX",
							  "value": "",
							  "description": "Flip around the vertical axis, either -1 or 1",
							  "disabled": true
							},
							{
							  "key": "scaleY",
							  "value": "",
							  "description": "Flip around the horizontal axis, either -1 or 1",
							  "disabled": true
							},
							{
							  "key": "rotate",
							  "value": "",
							  "description": "Rotate in degrees, 0 90 180 or 270",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "description": "photoId",
							  "key": "photoId",
							  "type": "string",
							  "value": "schema type not provided"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided/clone?top=&left=&width=&height=&scaleX=&scaleY=&rotate=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided",
								"clone"
							  ],
							  "query": [
								{
								  "key": "top",
								  "value": ""
								},
								{
								  "key": "left",
								  "value": ""
								},
								{
								  "key": "width",
								  "value": ""
								},
								{
								  "key": "height",
								  "value": ""
								},
								{
								  "key": "scaleX",
								  "value": ""
								},
								{
								  "key": "scaleY",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided/clone?top=&left=&width=&height=&scaleX=&scaleY=&rotate=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided",
								"clone"
							  ],
							  "query": [
								{
								  "key": "top",
								  "value": ""
								},
								{
								  "key": "left",
								  "value": ""
								},
								{
								  "key": "width",
								  "value": ""
								},
								{
								  "key": "height",
								  "value": ""
								},
								{
								  "key": "scaleX",
								  "value": ""
								},
								{
								  "key": "scaleY",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "OK",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided/clone?top=&left=&width=&height=&scaleX=&scaleY=&rotate=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided",
								"clone"
							  ],
							  "query": [
								{
								  "key": "top",
								  "value": ""
								},
								{
								  "key": "left",
								  "value": ""
								},
								{
								  "key": "width",
								  "value": ""
								},
								{
								  "key": "height",
								  "value": ""
								},
								{
								  "key": "scaleX",
								  "value": ""
								},
								{
								  "key": "scaleY",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Created",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided/clone?top=&left=&width=&height=&scaleX=&scaleY=&rotate=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided",
								"clone"
							  ],
							  "query": [
								{
								  "key": "top",
								  "value": ""
								},
								{
								  "key": "left",
								  "value": ""
								},
								{
								  "key": "width",
								  "value": ""
								},
								{
								  "key": "height",
								  "value": ""
								},
								{
								  "key": "scaleX",
								  "value": ""
								},
								{
								  "key": "scaleY",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Created",
						  "code": 201,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "POST",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided/clone?top=&left=&width=&height=&scaleX=&scaleY=&rotate=",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided",
								"clone"
							  ],
							  "query": [
								{
								  "key": "top",
								  "value": ""
								},
								{
								  "key": "left",
								  "value": ""
								},
								{
								  "key": "width",
								  "value": ""
								},
								{
								  "key": "height",
								  "value": ""
								},
								{
								  "key": "scaleX",
								  "value": ""
								},
								{
								  "key": "scaleY",
								  "value": ""
								},
								{
								  "key": "rotate",
								  "value": ""
								}
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					},
					{
					  "name": "Download the image file itself",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/photo/api/v2/photos/:photoId/download",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"photo",
							"api",
							"v2",
							"photos",
							":photoId",
							"download"
						  ],
						  "variable": [
							{
							  "description": "photoId",
							  "key": "photoId",
							  "type": "string",
							  "value": "schema type not provided"
							}
						  ]
						},
						"description": "Sends the image mimetype followed by the bytes of the image"
					  },
					  "response": [
						{
						  "name": "Not Found",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided/download",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided",
								"download"
							  ]
							}
						  },
						  "status": "Not Found",
						  "code": 404,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Unauthorized",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided/download",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided",
								"download"
							  ]
							}
						  },
						  "status": "Unauthorized",
						  "code": 401,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "Forbidden",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided/download",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided",
								"download"
							  ]
							}
						  },
						  "status": "Forbidden",
						  "code": 403,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						},
						{
						  "name": "OK",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "{{baseUrl}}/v2/photos/schema type not provided/download",
							  "host": [
								"{{baseUrl}}"
							  ],
							  "path": [
								"v2",
								"photos",
								"schema type not provided",
								"download"
							  ]
							}
						  },
						  "status": "OK",
						  "code": 200,
						  "_postman_previewlanguage": "text",
						  "header": [
							{
							  "key": "Content-Type",
							  "value": "text/plain"
							}
						  ],
						  "cookie": [],
						  "body": ""
						}
					  ]
					}
				  ],
				  "protocolProfileBehavior": {},
				  "_postman_isSubFolder": true
				},
				{
				  "name": "Search for photos",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/photo/api/photo/api/v2/photos",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"photo",
						"api",
						"photo",
						"api",
						"v2",
						"photos"
					  ],
					  "query": [
						{
						  "key": "primaryWebsite",
						  "value": "{{website}}",
						  "description": "Limit photos that are guaranteed visible on this website",
						  "disabled": true
						},
						{
						  "key": "published",
						  "value": "true",
						  "description": "If the item must be, or must not be, published",
						  "disabled": true
						},
						{
						  "key": "sourceName",
						  "value": "",
						  "description": "A list of source names",
						  "disabled": true
						},
						{
						  "key": "sourceId",
						  "value": "",
						  "description": "The source ID in an external system",
						  "disabled": true
						},
						{
						  "key": "source",
						  "value": "",
						  "description": "A list of source IDs",
						  "disabled": true
						},
						{
						  "key": "sourceType",
						  "value": "",
						  "description": "A list of source types",
						  "disabled": true
						},
						{
						  "key": "caption",
						  "value": "",
						  "description": "The caption of the photo",
						  "disabled": true
						},
						{
						  "key": "creator",
						  "value": "",
						  "description": "A list of photographer names",
						  "disabled": true
						},
						{
						  "key": "keywords",
						  "value": "",
						  "description": "A list of keywords",
						  "disabled": true
						},
						{
						  "key": "originalName",
						  "value": "",
						  "description": "The original filename of the photo",
						  "disabled": true
						},
						{
						  "key": "licensable",
						  "value": "",
						  "description": "If photos must be, or must not be, marked as licensable",
						  "disabled": true
						},
						{
						  "key": "expired",
						  "value": "",
						  "description": "If photos must be, or must not be, expired",
						  "disabled": true
						},
						{
						  "key": "longitude",
						  "value": "",
						  "description": "The longitude of a geo location (used in conjunction with latitude and radius)",
						  "disabled": true
						},
						{
						  "key": "latitude",
						  "value": "",
						  "description": "The latitude of a geo location (used in conjunction with longitude and radius)",
						  "disabled": true
						},
						{
						  "key": "radius",
						  "value": "",
						  "description": "The distance in miles from a geo location (used in conjuntion with latitude and longitued",
						  "disabled": true
						},
						{
						  "key": "distributorId",
						  "value": "",
						  "description": "A list of distributor IDs that photos should come frmo",
						  "disabled": true
						},
						{
						  "key": "distributorCategory",
						  "value": "",
						  "description": "A list of custom distributor categories",
						  "disabled": true
						},
						{
						  "key": "distributorName",
						  "value": "",
						  "description": "A list of custom distributor names",
						  "disabled": true
						},
						{
						  "key": "status",
						  "value": "",
						  "description": "A photo status",
						  "disabled": true
						},
						{
						  "key": "ingestionMethod",
						  "value": "",
						  "description": "The ingestion method, such as uploaded",
						  "disabled": true
						},
						{
						  "key": "envelope",
						  "value": "",
						  "description": "Whether you want responses in an envelope including paging information",
						  "disabled": true
						},
						{
						  "key": "startDateTakenOn",
						  "value": "",
						  "description": "The start date that the photos were taken on",
						  "disabled": true
						},
						{
						  "key": "endDateTakenOn",
						  "value": "",
						  "description": "The end date that the photos were taken on",
						  "disabled": true
						},
						{
						  "key": "startDateUpdated",
						  "value": "",
						  "description": "The start date that a photo was most recently updated",
						  "disabled": true
						},
						{
						  "key": "endDateUpdated",
						  "value": "",
						  "description": "The end date that a photo was most recently updated",
						  "disabled": true
						},
						{
						  "key": "startDateUploaded",
						  "value": "",
						  "description": "The start date that an item was uploaded to Anglerfish",
						  "disabled": true
						},
						{
						  "key": "endDateUploaded",
						  "value": "",
						  "description": "The end date that an item was uploaded to Anglerfish",
						  "disabled": true
						},
						{
						  "key": "slug",
						  "value": "",
						  "description": "The item slug",
						  "disabled": true
						},
						{
						  "key": "title",
						  "value": "",
						  "description": "The title of the item",
						  "disabled": true
						},
						{
						  "key": "sponsored",
						  "value": "",
						  "description": "If the item must be, or must not be, sponsored",
						  "disabled": true
						},
						{
						  "key": "uuid",
						  "value": "",
						  "description": "The Arc ID",
						  "disabled": true
						},
						{
						  "key": "fullTextQuery",
						  "value": "",
						  "description": "A natural language search query that matches multiple fields",
						  "disabled": true
						},
						{
						  "key": "operator",
						  "value": "",
						  "description": "Whether the terms are or'd or and'd together, default and",
						  "disabled": true
						},
						{
						  "key": "offset",
						  "value": "",
						  "description": "Where in the sorted resultset to start the response at",
						  "disabled": true
						},
						{
						  "key": "limit",
						  "value": "",
						  "description": "How many items to return",
						  "disabled": true
						},
						{
						  "key": "total",
						  "value": "",
						  "description": "The total number of items that match the search parameters",
						  "disabled": true
						},
						{
						  "key": "sort",
						  "value": "",
						  "description": "The sort order, for example -title or +caption",
						  "disabled": true
						},
						{
						  "key": "trim",
						  "value": "",
						  "description": "Remove surrounding space in images using either `topleft` or `bottomright` pixel color",
						  "disabled": true
						},
						{
						  "key": "trimTolerance",
						  "value": "",
						  "description": "The tolerance, between 0 and 442, for trimming",
						  "disabled": true
						},
						{
						  "key": "crop",
						  "value": "",
						  "description": "How to crop the photo, in the form `LxT:RxB`",
						  "disabled": true
						},
						{
						  "key": "fitIn",
						  "value": "",
						  "description": "How to fit into a space, either `normal` `full` or `adaptive`",
						  "disabled": true
						},
						{
						  "key": "halign",
						  "value": "",
						  "description": "The horizontal alignment of the crop, either `left` `center` or `right`",
						  "disabled": true
						},
						{
						  "key": "valign",
						  "value": "",
						  "description": "The vertical alignment of the crop, either `top` `middle` or `bottom`",
						  "disabled": true
						},
						{
						  "key": "smart",
						  "value": "",
						  "description": "If the crop should be smart (finding focal points) or not",
						  "disabled": true
						},
						{
						  "key": "maxWidth",
						  "value": "",
						  "description": "The desired width of the image",
						  "disabled": true
						},
						{
						  "key": "maxHeight",
						  "value": "",
						  "description": "The desired height of the image",
						  "disabled": true
						},
						{
						  "key": "brightness",
						  "value": "",
						  "description": "The brightness, between -100 and 100",
						  "disabled": true
						},
						{
						  "key": "contrast",
						  "value": "",
						  "description": "The contrast, , between -100 and 100",
						  "disabled": true
						},
						{
						  "key": "colorize",
						  "value": "",
						  "description": "A colorize parameter, of the form `red:green:blue:fill`, each of -100 to 100",
						  "disabled": true
						},
						{
						  "key": "equalize",
						  "value": "",
						  "description": "If the color distribution of the image should be equalized",
						  "disabled": true
						},
						{
						  "key": "filling",
						  "value": "",
						  "description": "The color to fill in empty parts of the iamge",
						  "disabled": true
						},
						{
						  "key": "format",
						  "value": "",
						  "description": "Return in a new format, either `webp`, `jpeg`, `gif`, or `png`",
						  "disabled": true
						},
						{
						  "key": "grayscale",
						  "value": "",
						  "description": "If the image should be gray-scaled",
						  "disabled": true
						},
						{
						  "key": "maxBytes",
						  "value": "",
						  "description": "Automatically degrades the quality of the image until it is no larger than this",
						  "disabled": true
						},
						{
						  "key": "noise",
						  "value": "",
						  "description": "Adds noise to an image, between 0 and 100",
						  "disabled": true
						},
						{
						  "key": "noUpscale",
						  "value": "",
						  "description": "Do not upscale the image to bigger dimensions",
						  "disabled": true
						},
						{
						  "key": "quality",
						  "value": "",
						  "description": "The overall quality of a JPEG, between 0 and 100",
						  "disabled": true
						},
						{
						  "key": "rgb",
						  "value": "",
						  "description": "Changes the color of the image, in the form r:g:b, each between -100 and 100",
						  "disabled": true
						},
						{
						  "key": "roundCorners",
						  "value": "",
						  "description": "Round the corners with a color background, of form `radius:background`",
						  "disabled": true
						},
						{
						  "key": "rotate",
						  "value": "",
						  "description": "Rotate the image in degrees, either 0 90 180 or 270",
						  "disabled": true
						},
						{
						  "key": "saturation",
						  "value": "",
						  "description": "Scales the saturation of the image between 0 and 100",
						  "disabled": true
						},
						{
						  "key": "stripIcc",
						  "value": "",
						  "description": "Remove any ICC information from the image",
						  "disabled": true
						},
						{
						  "key": "watermark",
						  "value": "",
						  "description": "Watermark the image, of form `url::horiz position::vert position::transparency`",
						  "disabled": true
						},
						{
						  "key": "blur",
						  "value": "",
						  "description": "Add Gaussian blur, of the form `radius[:sigma]`",
						  "disabled": true
						},
						{
						  "key": "sharpen",
						  "value": "",
						  "description": "Sharpen the image, in the form `amount:radius:luminance`",
						  "disabled": true
						}
					  ]
					}
				  },
				  "response": [
					{
					  "name": "OK",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/photos?primaryWebsite=&caption=&creator=&keywords=&originalName=&licensable=&expired=&longitude=&latitude=&radius=&distributorId=&distributorCategory=&distributorName=&sourceType=&sourceName=&source=&sourceId=&status=&ingestionMethod=&envelope=&startDateTakenOn=&endDateTakenOn=&startDateUpdated=&endDateUpdated=&startDateUploaded=&endDateUploaded=&slug=&title=&published=&sponsored=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=&trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"photos"
						  ],
						  "query": [
							{
							  "key": "primaryWebsite",
							  "value": ""
							},
							{
							  "key": "caption",
							  "value": ""
							},
							{
							  "key": "creator",
							  "value": ""
							},
							{
							  "key": "keywords",
							  "value": ""
							},
							{
							  "key": "originalName",
							  "value": ""
							},
							{
							  "key": "licensable",
							  "value": ""
							},
							{
							  "key": "expired",
							  "value": ""
							},
							{
							  "key": "longitude",
							  "value": ""
							},
							{
							  "key": "latitude",
							  "value": ""
							},
							{
							  "key": "radius",
							  "value": ""
							},
							{
							  "key": "distributorId",
							  "value": ""
							},
							{
							  "key": "distributorCategory",
							  "value": ""
							},
							{
							  "key": "distributorName",
							  "value": ""
							},
							{
							  "key": "sourceType",
							  "value": ""
							},
							{
							  "key": "sourceName",
							  "value": ""
							},
							{
							  "key": "source",
							  "value": ""
							},
							{
							  "key": "sourceId",
							  "value": ""
							},
							{
							  "key": "status",
							  "value": ""
							},
							{
							  "key": "ingestionMethod",
							  "value": ""
							},
							{
							  "key": "envelope",
							  "value": ""
							},
							{
							  "key": "startDateTakenOn",
							  "value": ""
							},
							{
							  "key": "endDateTakenOn",
							  "value": ""
							},
							{
							  "key": "startDateUpdated",
							  "value": ""
							},
							{
							  "key": "endDateUpdated",
							  "value": ""
							},
							{
							  "key": "startDateUploaded",
							  "value": ""
							},
							{
							  "key": "endDateUploaded",
							  "value": ""
							},
							{
							  "key": "slug",
							  "value": ""
							},
							{
							  "key": "title",
							  "value": ""
							},
							{
							  "key": "published",
							  "value": ""
							},
							{
							  "key": "sponsored",
							  "value": ""
							},
							{
							  "key": "uuid",
							  "value": ""
							},
							{
							  "key": "fullTextQuery",
							  "value": ""
							},
							{
							  "key": "operator",
							  "value": ""
							},
							{
							  "key": "offset",
							  "value": ""
							},
							{
							  "key": "limit",
							  "value": ""
							},
							{
							  "key": "total",
							  "value": ""
							},
							{
							  "key": "sort",
							  "value": ""
							},
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "OK",
					  "code": 200,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Not Found",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/photos?primaryWebsite=&caption=&creator=&keywords=&originalName=&licensable=&expired=&longitude=&latitude=&radius=&distributorId=&distributorCategory=&distributorName=&sourceType=&sourceName=&source=&sourceId=&status=&ingestionMethod=&envelope=&startDateTakenOn=&endDateTakenOn=&startDateUpdated=&endDateUpdated=&startDateUploaded=&endDateUploaded=&slug=&title=&published=&sponsored=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=&trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"photos"
						  ],
						  "query": [
							{
							  "key": "primaryWebsite",
							  "value": ""
							},
							{
							  "key": "caption",
							  "value": ""
							},
							{
							  "key": "creator",
							  "value": ""
							},
							{
							  "key": "keywords",
							  "value": ""
							},
							{
							  "key": "originalName",
							  "value": ""
							},
							{
							  "key": "licensable",
							  "value": ""
							},
							{
							  "key": "expired",
							  "value": ""
							},
							{
							  "key": "longitude",
							  "value": ""
							},
							{
							  "key": "latitude",
							  "value": ""
							},
							{
							  "key": "radius",
							  "value": ""
							},
							{
							  "key": "distributorId",
							  "value": ""
							},
							{
							  "key": "distributorCategory",
							  "value": ""
							},
							{
							  "key": "distributorName",
							  "value": ""
							},
							{
							  "key": "sourceType",
							  "value": ""
							},
							{
							  "key": "sourceName",
							  "value": ""
							},
							{
							  "key": "source",
							  "value": ""
							},
							{
							  "key": "sourceId",
							  "value": ""
							},
							{
							  "key": "status",
							  "value": ""
							},
							{
							  "key": "ingestionMethod",
							  "value": ""
							},
							{
							  "key": "envelope",
							  "value": ""
							},
							{
							  "key": "startDateTakenOn",
							  "value": ""
							},
							{
							  "key": "endDateTakenOn",
							  "value": ""
							},
							{
							  "key": "startDateUpdated",
							  "value": ""
							},
							{
							  "key": "endDateUpdated",
							  "value": ""
							},
							{
							  "key": "startDateUploaded",
							  "value": ""
							},
							{
							  "key": "endDateUploaded",
							  "value": ""
							},
							{
							  "key": "slug",
							  "value": ""
							},
							{
							  "key": "title",
							  "value": ""
							},
							{
							  "key": "published",
							  "value": ""
							},
							{
							  "key": "sponsored",
							  "value": ""
							},
							{
							  "key": "uuid",
							  "value": ""
							},
							{
							  "key": "fullTextQuery",
							  "value": ""
							},
							{
							  "key": "operator",
							  "value": ""
							},
							{
							  "key": "offset",
							  "value": ""
							},
							{
							  "key": "limit",
							  "value": ""
							},
							{
							  "key": "total",
							  "value": ""
							},
							{
							  "key": "sort",
							  "value": ""
							},
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "Not Found",
					  "code": 404,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Unauthorized",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/photos?primaryWebsite=&caption=&creator=&keywords=&originalName=&licensable=&expired=&longitude=&latitude=&radius=&distributorId=&distributorCategory=&distributorName=&sourceType=&sourceName=&source=&sourceId=&status=&ingestionMethod=&envelope=&startDateTakenOn=&endDateTakenOn=&startDateUpdated=&endDateUpdated=&startDateUploaded=&endDateUploaded=&slug=&title=&published=&sponsored=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=&trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"photos"
						  ],
						  "query": [
							{
							  "key": "primaryWebsite",
							  "value": ""
							},
							{
							  "key": "caption",
							  "value": ""
							},
							{
							  "key": "creator",
							  "value": ""
							},
							{
							  "key": "keywords",
							  "value": ""
							},
							{
							  "key": "originalName",
							  "value": ""
							},
							{
							  "key": "licensable",
							  "value": ""
							},
							{
							  "key": "expired",
							  "value": ""
							},
							{
							  "key": "longitude",
							  "value": ""
							},
							{
							  "key": "latitude",
							  "value": ""
							},
							{
							  "key": "radius",
							  "value": ""
							},
							{
							  "key": "distributorId",
							  "value": ""
							},
							{
							  "key": "distributorCategory",
							  "value": ""
							},
							{
							  "key": "distributorName",
							  "value": ""
							},
							{
							  "key": "sourceType",
							  "value": ""
							},
							{
							  "key": "sourceName",
							  "value": ""
							},
							{
							  "key": "source",
							  "value": ""
							},
							{
							  "key": "sourceId",
							  "value": ""
							},
							{
							  "key": "status",
							  "value": ""
							},
							{
							  "key": "ingestionMethod",
							  "value": ""
							},
							{
							  "key": "envelope",
							  "value": ""
							},
							{
							  "key": "startDateTakenOn",
							  "value": ""
							},
							{
							  "key": "endDateTakenOn",
							  "value": ""
							},
							{
							  "key": "startDateUpdated",
							  "value": ""
							},
							{
							  "key": "endDateUpdated",
							  "value": ""
							},
							{
							  "key": "startDateUploaded",
							  "value": ""
							},
							{
							  "key": "endDateUploaded",
							  "value": ""
							},
							{
							  "key": "slug",
							  "value": ""
							},
							{
							  "key": "title",
							  "value": ""
							},
							{
							  "key": "published",
							  "value": ""
							},
							{
							  "key": "sponsored",
							  "value": ""
							},
							{
							  "key": "uuid",
							  "value": ""
							},
							{
							  "key": "fullTextQuery",
							  "value": ""
							},
							{
							  "key": "operator",
							  "value": ""
							},
							{
							  "key": "offset",
							  "value": ""
							},
							{
							  "key": "limit",
							  "value": ""
							},
							{
							  "key": "total",
							  "value": ""
							},
							{
							  "key": "sort",
							  "value": ""
							},
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "Unauthorized",
					  "code": 401,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Forbidden",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/photos?primaryWebsite=&caption=&creator=&keywords=&originalName=&licensable=&expired=&longitude=&latitude=&radius=&distributorId=&distributorCategory=&distributorName=&sourceType=&sourceName=&source=&sourceId=&status=&ingestionMethod=&envelope=&startDateTakenOn=&endDateTakenOn=&startDateUpdated=&endDateUpdated=&startDateUploaded=&endDateUploaded=&slug=&title=&published=&sponsored=&uuid=&fullTextQuery=&operator=&offset=&limit=&total=&sort=&trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"photos"
						  ],
						  "query": [
							{
							  "key": "primaryWebsite",
							  "value": ""
							},
							{
							  "key": "caption",
							  "value": ""
							},
							{
							  "key": "creator",
							  "value": ""
							},
							{
							  "key": "keywords",
							  "value": ""
							},
							{
							  "key": "originalName",
							  "value": ""
							},
							{
							  "key": "licensable",
							  "value": ""
							},
							{
							  "key": "expired",
							  "value": ""
							},
							{
							  "key": "longitude",
							  "value": ""
							},
							{
							  "key": "latitude",
							  "value": ""
							},
							{
							  "key": "radius",
							  "value": ""
							},
							{
							  "key": "distributorId",
							  "value": ""
							},
							{
							  "key": "distributorCategory",
							  "value": ""
							},
							{
							  "key": "distributorName",
							  "value": ""
							},
							{
							  "key": "sourceType",
							  "value": ""
							},
							{
							  "key": "sourceName",
							  "value": ""
							},
							{
							  "key": "source",
							  "value": ""
							},
							{
							  "key": "sourceId",
							  "value": ""
							},
							{
							  "key": "status",
							  "value": ""
							},
							{
							  "key": "ingestionMethod",
							  "value": ""
							},
							{
							  "key": "envelope",
							  "value": ""
							},
							{
							  "key": "startDateTakenOn",
							  "value": ""
							},
							{
							  "key": "endDateTakenOn",
							  "value": ""
							},
							{
							  "key": "startDateUpdated",
							  "value": ""
							},
							{
							  "key": "endDateUpdated",
							  "value": ""
							},
							{
							  "key": "startDateUploaded",
							  "value": ""
							},
							{
							  "key": "endDateUploaded",
							  "value": ""
							},
							{
							  "key": "slug",
							  "value": ""
							},
							{
							  "key": "title",
							  "value": ""
							},
							{
							  "key": "published",
							  "value": ""
							},
							{
							  "key": "sponsored",
							  "value": ""
							},
							{
							  "key": "uuid",
							  "value": ""
							},
							{
							  "key": "fullTextQuery",
							  "value": ""
							},
							{
							  "key": "operator",
							  "value": ""
							},
							{
							  "key": "offset",
							  "value": ""
							},
							{
							  "key": "limit",
							  "value": ""
							},
							{
							  "key": "total",
							  "value": ""
							},
							{
							  "key": "sort",
							  "value": ""
							},
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "Forbidden",
					  "code": 403,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					}
				  ]
				},
				{
				  "name": "Upload a photo, either by ANS or file",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "POST",
					"header": [
					  {
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					  }
					],
					"body": {
					  "mode": "raw",
					  "raw": ""
					},
					"url": {
					  "raw": "https://api.{{baseUrl}}/photo/api/v2/photos",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"photo",
						"api",
						"v2",
						"photos"
					  ]
					},
					"description": "An Arc ID will be assigned to the image"
				  },
				  "response": [
					{
					  "name": "OK",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/photos",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"photos"
						  ]
						}
					  },
					  "status": "OK",
					  "code": 200,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Unauthorized",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/photos",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"photos"
						  ]
						}
					  },
					  "status": "Unauthorized",
					  "code": 401,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Forbidden",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/photos",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"photos"
						  ]
						}
					  },
					  "status": "Forbidden",
					  "code": 403,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Not Found",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/photos",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"photos"
						  ]
						}
					  },
					  "status": "Not Found",
					  "code": 404,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Created",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/photos",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"photos"
						  ]
						}
					  },
					  "status": "Created",
					  "code": 201,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					}
				  ]
				},
				{
				  "name": "Return photo metadata given a list of IDs",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "POST",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/photo/api/v2/photos/photos?format=",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"photo",
						"api",
						"v2",
						"photos",
						"photos"
					  ],
					  "query": [
						{
						  "key": "trim",
						  "value": "",
						  "description": "Remove surrounding space in images using either `topleft` or `bottomright` pixel color",
						  "disabled": true
						},
						{
						  "key": "format",
						  "value": "",
						  "description": "Return in a new format, either `webp`, `jpeg`, `gif`, or `png`"
						},
						{
						  "key": "trimTolerance",
						  "value": "",
						  "description": "The tolerance, between 0 and 442, for trimming",
						  "disabled": true
						},
						{
						  "key": "crop",
						  "value": "",
						  "description": "How to crop the photo, in the form `LxT:RxB`",
						  "disabled": true
						},
						{
						  "key": "fitIn",
						  "value": "",
						  "description": "How to fit into a space, either `normal` `full` or `adaptive`",
						  "disabled": true
						},
						{
						  "key": "halign",
						  "value": "",
						  "description": "The horizontal alignment of the crop, either `left` `center` or `right`",
						  "disabled": true
						},
						{
						  "key": "valign",
						  "value": "",
						  "description": "The vertical alignment of the crop, either `top` `middle` or `bottom`",
						  "disabled": true
						},
						{
						  "key": "smart",
						  "value": "",
						  "description": "If the crop should be smart (finding focal points) or not",
						  "disabled": true
						},
						{
						  "key": "maxWidth",
						  "value": "",
						  "description": "The desired width of the image",
						  "disabled": true
						},
						{
						  "key": "maxHeight",
						  "value": "",
						  "description": "The desired height of the image",
						  "disabled": true
						},
						{
						  "key": "brightness",
						  "value": "",
						  "description": "The brightness, between -100 and 100",
						  "disabled": true
						},
						{
						  "key": "contrast",
						  "value": "",
						  "description": "The contrast, , between -100 and 100",
						  "disabled": true
						},
						{
						  "key": "colorize",
						  "value": "",
						  "description": "A colorize parameter, of the form `red:green:blue:fill`, each of -100 to 100",
						  "disabled": true
						},
						{
						  "key": "equalize",
						  "value": "",
						  "description": "If the color distribution of the image should be equalized",
						  "disabled": true
						},
						{
						  "key": "filling",
						  "value": "",
						  "description": "The color to fill in empty parts of the iamge",
						  "disabled": true
						},
						{
						  "key": "grayscale",
						  "value": "",
						  "description": "If the image should be gray-scaled",
						  "disabled": true
						},
						{
						  "key": "maxBytes",
						  "value": "",
						  "description": "Automatically degrades the quality of the image until it is no larger than this",
						  "disabled": true
						},
						{
						  "key": "noise",
						  "value": "",
						  "description": "Adds noise to an image, between 0 and 100",
						  "disabled": true
						},
						{
						  "key": "noUpscale",
						  "value": "",
						  "description": "Do not upscale the image to bigger dimensions",
						  "disabled": true
						},
						{
						  "key": "quality",
						  "value": "",
						  "description": "The overall quality of a JPEG, between 0 and 100",
						  "disabled": true
						},
						{
						  "key": "rgb",
						  "value": "",
						  "description": "Changes the color of the image, in the form r:g:b, each between -100 and 100",
						  "disabled": true
						},
						{
						  "key": "roundCorners",
						  "value": "",
						  "description": "Round the corners with a color background, of form `radius:background`",
						  "disabled": true
						},
						{
						  "key": "rotate",
						  "value": "",
						  "description": "Rotate the image in degrees, either 0 90 180 or 270",
						  "disabled": true
						},
						{
						  "key": "saturation",
						  "value": "",
						  "description": "Scales the saturation of the image between 0 and 100",
						  "disabled": true
						},
						{
						  "key": "stripIcc",
						  "value": "",
						  "description": "Remove any ICC information from the image",
						  "disabled": true
						},
						{
						  "key": "watermark",
						  "value": "",
						  "description": "Watermark the image, of form `url::horiz position::vert position::transparency`",
						  "disabled": true
						},
						{
						  "key": "blur",
						  "value": "",
						  "description": "Add Gaussian blur, of the form `radius[:sigma]`",
						  "disabled": true
						},
						{
						  "key": "sharpen",
						  "value": "",
						  "description": "Sharpen the image, in the form `amount:radius:luminance`",
						  "disabled": true
						}
					  ]
					}
				  },
				  "response": [
					{
					  "name": "Unauthorized",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/photos/photos?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"photos",
							"photos"
						  ],
						  "query": [
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "Unauthorized",
					  "code": 401,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Forbidden",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/photos/photos?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"photos",
							"photos"
						  ],
						  "query": [
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "Forbidden",
					  "code": 403,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Created",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/photos/photos?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"photos",
							"photos"
						  ],
						  "query": [
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "Created",
					  "code": 201,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "OK",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/photos/photos?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"photos",
							"photos"
						  ],
						  "query": [
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "OK",
					  "code": 200,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Not Found",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/photos/photos?trim=&trimTolerance=&crop=&fitIn=&halign=&valign=&smart=&maxWidth=&maxHeight=&brightness=&contrast=&colorize=&equalize=&filling=&format=&grayscale=&maxBytes=&noise=&noUpscale=&quality=&rgb=&roundCorners=&rotate=&saturation=&stripIcc=&watermark=&blur=&sharpen=",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"photos",
							"photos"
						  ],
						  "query": [
							{
							  "key": "trim",
							  "value": ""
							},
							{
							  "key": "trimTolerance",
							  "value": ""
							},
							{
							  "key": "crop",
							  "value": ""
							},
							{
							  "key": "fitIn",
							  "value": ""
							},
							{
							  "key": "halign",
							  "value": ""
							},
							{
							  "key": "valign",
							  "value": ""
							},
							{
							  "key": "smart",
							  "value": ""
							},
							{
							  "key": "maxWidth",
							  "value": ""
							},
							{
							  "key": "maxHeight",
							  "value": ""
							},
							{
							  "key": "brightness",
							  "value": ""
							},
							{
							  "key": "contrast",
							  "value": ""
							},
							{
							  "key": "colorize",
							  "value": ""
							},
							{
							  "key": "equalize",
							  "value": ""
							},
							{
							  "key": "filling",
							  "value": ""
							},
							{
							  "key": "format",
							  "value": ""
							},
							{
							  "key": "grayscale",
							  "value": ""
							},
							{
							  "key": "maxBytes",
							  "value": ""
							},
							{
							  "key": "noise",
							  "value": ""
							},
							{
							  "key": "noUpscale",
							  "value": ""
							},
							{
							  "key": "quality",
							  "value": ""
							},
							{
							  "key": "rgb",
							  "value": ""
							},
							{
							  "key": "roundCorners",
							  "value": ""
							},
							{
							  "key": "rotate",
							  "value": ""
							},
							{
							  "key": "saturation",
							  "value": ""
							},
							{
							  "key": "stripIcc",
							  "value": ""
							},
							{
							  "key": "watermark",
							  "value": ""
							},
							{
							  "key": "blur",
							  "value": ""
							},
							{
							  "key": "sharpen",
							  "value": ""
							}
						  ]
						}
					  },
					  "status": "Not Found",
					  "code": 404,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					}
				  ]
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			},
			{
			  "name": "settings",
			  "item": [
				{
				  "name": "Return settings",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/photo/api/v2/photos/settings",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"photo",
						"api",
						"v2",
						"photos",
						"settings"
					  ]
					}
				  },
				  "response": [
					{
					  "name": "Forbidden",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/settings",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"settings"
						  ]
						}
					  },
					  "status": "Forbidden",
					  "code": 403,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Not Found",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/settings",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"settings"
						  ]
						}
					  },
					  "status": "Not Found",
					  "code": 404,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Unauthorized",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/settings",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"settings"
						  ]
						}
					  },
					  "status": "Unauthorized",
					  "code": 401,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "OK",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/settings",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"settings"
						  ]
						}
					  },
					  "status": "OK",
					  "code": 200,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					}
				  ]
				},
				{
				  "name": "Create settings for a new organization",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "POST",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/photo/api/v2/settings",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"photo",
						"api",
						"v2",
						"settings"
					  ]
					},
					"description": "Default settings are created automatically"
				  },
				  "response": [
					{
					  "name": "OK",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/settings",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"settings"
						  ]
						}
					  },
					  "status": "OK",
					  "code": 200,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Unauthorized",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/settings",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"settings"
						  ]
						}
					  },
					  "status": "Unauthorized",
					  "code": 401,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Created",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/settings",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"settings"
						  ]
						}
					  },
					  "status": "Created",
					  "code": 201,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Forbidden",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/settings",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"settings"
						  ]
						}
					  },
					  "status": "Forbidden",
					  "code": 403,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Not Found",
					  "originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/settings",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"settings"
						  ]
						}
					  },
					  "status": "Not Found",
					  "code": 404,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					}
				  ]
				},
				{
				  "name": "Update organization settings",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "PUT",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/photo/api/v2/settings",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"photo",
						"api",
						"v2",
						"settings"
					  ]
					}
				  },
				  "response": [
					{
					  "name": "Not Found",
					  "originalRequest": {
						"method": "PUT",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/settings",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"settings"
						  ]
						}
					  },
					  "status": "Not Found",
					  "code": 404,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Created",
					  "originalRequest": {
						"method": "PUT",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/settings",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"settings"
						  ]
						}
					  },
					  "status": "Created",
					  "code": 201,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "OK",
					  "originalRequest": {
						"method": "PUT",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/settings",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"settings"
						  ]
						}
					  },
					  "status": "OK",
					  "code": 200,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Forbidden",
					  "originalRequest": {
						"method": "PUT",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/settings",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"settings"
						  ]
						}
					  },
					  "status": "Forbidden",
					  "code": 403,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					},
					{
					  "name": "Unauthorized",
					  "originalRequest": {
						"method": "PUT",
						"header": [],
						"url": {
						  "raw": "{{baseUrl}}/v2/settings",
						  "host": [
							"{{baseUrl}}"
						  ],
						  "path": [
							"v2",
							"settings"
						  ]
						}
					  },
					  "status": "Unauthorized",
					  "code": 401,
					  "_postman_previewlanguage": "text",
					  "header": [
						{
						  "key": "Content-Type",
						  "value": "text/plain"
						}
					  ],
					  "cookie": [],
					  "body": ""
					}
				  ]
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			}
		  ],
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		},
		{
		  "name": "Generic GET Photo",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "GET",
			"header": [],
			"url": {
			  "raw": "https://api.{{baseUrl}}/photo/api/v2/photos/:_id",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"photo",
				"api",
				"v2",
				"photos",
				":_id"
			  ],
			  "variable": [
				{
				  "description": "The ID of the photo",
				  "key": "_id",
				  "type": "string",
				  "value": ""
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Edit/Delete Photo Generic",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "POST",
			"header": [
			  {
				"key": "Content-Type",
				"name": "Content-Type",
				"type": "text",
				"value": "application/octet-stream",
				"disabled": true
			  }
			],
			"body": {
			  "mode": "raw",
			  "raw": "{\n\t\"additional_properties\":\n\t{\n\t\t\"originalName\": \"<string>\",\n\t\t\"originalUrl\": \"<string>\",\n\t\t\"published\": true,\n\t\t\"version\": 1\n\t},\n\t\"owner\":\n\t{\n\t\t\"id\": \"{{website}}\"\n\t},\n\t\"source\":\n\t{\n\t\t\"id\": \"<string>\",\n\t\t\"source_id\": \"<string>\"\n\t},\n\t\"type\": \"image\"\n}",
			  "options": {
				"raw": {}
			  }
			},
			"url": {
			  "raw": "https://api.{{baseUrl}}/photo/api/v2/photos/",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"photo",
				"api",
				"v2",
				"photos",
				""
			  ]
			},
			"description": "Note that this request cannot be exactly genericized since the content of the ANS will be different for every org. Create a file called ans.json and send form-data of type file with key 'ans' and this file.\n\n\n{\n    \"additional_properties\": {\n        \"originalName\": \"<string>\",\n        \"originalUrl\": \"<string>\",\n        \"published\": true,\n        \"version\": 1\n    },\n    \"owner\": {\n        \"id\": \"{{website}}\"\n    },\n    \"source\": {\n        \"id\": \"<string>\",\n        \"source_id\": \"<string>\"\n    },\n    \"type\": \"image\"\n}"
		  },
		  "response": [
			{
			  "name": "POST Photo Generic to staging prod",
			  "originalRequest": {
				"method": "POST",
				"header": [
				  {
					"key": "Content-Type",
					"name": "Content-Type",
					"value": "application/octet-stream",
					"type": "text",
					"disabled": true
				  }
				],
				"body": {
				  "mode": "formdata",
				  "formdata": [
					{
					  "key": "ans",
					  "type": "file",
					  "src": "ans.json"
					}
				  ],
				  "options": {
					"raw": {
					  "language": "json"
					}
				  }
				},
				"url": {
				  "raw": "https://api.{{baseUrl}}/photo/api/v2/photos/",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"photo",
					"api",
					"v2",
					"photos",
					""
				  ]
				}
			  },
			  "status": "OK",
			  "code": 200,
			  "_postman_previewlanguage": "json",
			  "header": [
				{
				  "key": "Date",
				  "value": "Wed, 22 Jan 2020 17:41:02 GMT"
				},
				{
				  "key": "Content-Type",
				  "value": "application/json;charset=UTF-8"
				},
				{
				  "key": "Transfer-Encoding",
				  "value": "chunked"
				},
				{
				  "key": "Connection",
				  "value": "keep-alive"
				},
				{
				  "key": "Server",
				  "value": "nginx"
				},
				{
				  "key": "Access-Control-Allow-Origin",
				  "value": "*"
				},
				{
				  "key": "Access-Control-Allow-Methods",
				  "value": "POST, PUT, GET, OPTIONS, DELETE"
				},
				{
				  "key": "Access-Control-Allow-Credentials",
				  "value": "true"
				},
				{
				  "key": "Access-Control-Max-Age",
				  "value": "1728000"
				},
				{
				  "key": "Access-Control-Allow-Headers",
				  "value": "Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Arc-Priority,Arc-App-Name,Arc-Ingestion-Method,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since,X-Auth-Token,X-User-Context,X-Results-Limit,X-Results-Offset,X-Results-Total,Access-Control-Request-Headers"
				},
				{
				  "key": "Cache-Control",
				  "value": "no-cache"
				},
				{
				  "key": "Access-Control-Expose-Headers",
				  "value": "X-Results-Limit,X-Results-Offset,X-Results-Total"
				},
				{
				  "key": "X-Application-Context",
				  "value": "application:staging-prod"
				},
				{
				  "key": "Arc-Deployment",
				  "value": "staging"
				},
				{
				  "key": "Arc-Context",
				  "value": "index"
				},
				{
				  "key": "Arc-ServerName",
				  "value": "api.staging.arcpublishing.com"
				},
				{
				  "key": "Arc-Service",
				  "value": "api"
				},
				{
				  "key": "Arc-Organization",
				  "value": "staging"
				},
				{
				  "key": "Arc-Environment",
				  "value": "index"
				},
				{
				  "key": "Arc-Org-Name",
				  "value": "staging"
				},
				{
				  "key": "Arc-Org-Env",
				  "value": "staging"
				},
				{
				  "key": "Arc-Application",
				  "value": "Anglerfish"
				},
				{
				  "key": "Arc-Route",
				  "value": "/photo"
				},
				{
				  "key": "Content-Encoding",
				  "value": "gzip"
				}
			  ],
			  "cookie": [],
			  "body": "{\n    \"_id\": \"NBV6GJCEXFBVRLBV34H4J6NSN4\",\n    \"additional_properties\": {\n        \"fullSizeResizeUrl\": \"/photo/resize/YUMsU_2Bx3gaJzsK1hCqWjqpsvU=/arc-anglerfish-staging-staging/public/NBV6GJCEXFBVRLBV34H4J6NSN4.jpg\",\n        \"mime_type\": \"image/jpeg\",\n        \"originalName\": \"AnglerFishTest.jpg\",\n        \"originalUrl\": \"https://arc-anglerfish-staging-staging.s3.amazonaws.com/public/NBV6GJCEXFBVRLBV34H4J6NSN4.jpg\",\n        \"proxyUrl\": \"/photo/resize/YUMsU_2Bx3gaJzsK1hCqWjqpsvU=/arc-anglerfish-staging-staging/public/NBV6GJCEXFBVRLBV34H4J6NSN4.jpg\",\n        \"published\": true,\n        \"resizeUrl\": \"http://staging.arcpublishing.com/photo/resize/YUMsU_2Bx3gaJzsK1hCqWjqpsvU=/arc-anglerfish-staging-staging/public/NBV6GJCEXFBVRLBV34H4J6NSN4.jpg\",\n        \"restricted\": false,\n        \"version\": 1\n    },\n    \"created_date\": \"2020-01-22T17:41:02Z\",\n    \"height\": 667,\n    \"last_updated_date\": \"2020-01-22T17:41:02Z\",\n    \"licensable\": false,\n    \"owner\": {\n        \"id\": \"staging\"\n    },\n    \"source\": {\n        \"source_id\": \"0001\",\n        \"id\": \"samples\"\n    },\n    \"type\": \"image\",\n    \"url\": \"https://arc-anglerfish-staging-staging.s3.amazonaws.com/public/NBV6GJCEXFBVRLBV34H4J6NSN4.jpg\",\n    \"version\": \"0.10.3\",\n    \"width\": 1000\n}"
			}
		  ]
		}
	  ],
	  "description": "Documentation is available at: https://redirector.arcpublishing.com/alc/docs/swagger/?url=./arc-products/arc-anglerfish.json",
	  "event": [
		{
		  "listen": "prerequest",
		  "script": {
			"id": "b7f6c5f9-c3f3-4922-b642-f1a27054953e",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		},
		{
		  "listen": "test",
		  "script": {
			"id": "71de86c8-25c9-4d64-a6ad-b9fe2901a7b4",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		}
	  ],
	  "protocolProfileBehavior": {}
	},
	{
	  "name": "Author API",
	  "item": [
		{
		  "name": "v2",
		  "item": [
			{
			  "name": "Get all authors",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://api.{{baseUrl}}/author/v2/author-service/",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"author",
					"v2",
					"author-service",
					""
				  ],
				  "query": [
					{
					  "key": "sort_by",
					  "value": "_id",
					  "description": "Field by which to sort",
					  "disabled": true
					},
					{
					  "key": "order",
					  "value": "desc",
					  "description": "Order which to sorty by",
					  "disabled": true
					},
					{
					  "key": "byline",
					  "value": "*",
					  "description": "Substring pattern filter on authors’ byline field",
					  "disabled": true
					},
					{
					  "key": "limit",
					  "value": "10",
					  "description": "Maximum returned authors",
					  "disabled": true
					},
					{
					  "key": "last",
					  "value": "test-user",
					  "description": "Key from the last author in a previous List Authors call",
					  "disabled": true
					},
					{
					  "key": "slug",
					  "value": "test-user",
					  "description": "Exact pattern filter on authors’ slug field",
					  "disabled": true
					}
				  ]
				},
				"description": "Returns a list of all authors"
			  },
			  "response": [
				{
				  "name": "Get all authors",
				  "originalRequest": {
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/author/v1/",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"author",
						"v1",
						""
					  ]
					}
				  },
				  "status": "OK",
				  "code": 200,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Date",
					  "value": "Thu, 12 Mar 2020 14:38:37 GMT"
					},
					{
					  "key": "Content-Type",
					  "value": "application/json; charset=utf-8"
					},
					{
					  "key": "Transfer-Encoding",
					  "value": "chunked"
					},
					{
					  "key": "Connection",
					  "value": "keep-alive"
					},
					{
					  "key": "Server",
					  "value": "nginx"
					},
					{
					  "key": "X-Powered-By",
					  "value": "Express"
					},
					{
					  "key": "Access-Control-Allow-Origin",
					  "value": "*"
					},
					{
					  "key": "ETag",
					  "value": "W/\"2654f-txIG5WUTs3RimO8SBQx9CqwIZtM\""
					},
					{
					  "key": "Arc-Deployment",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Context",
					  "value": "index"
					},
					{
					  "key": "Arc-ServerName",
					  "value": "api.elespectador.arcpublishing.com"
					},
					{
					  "key": "Arc-Service",
					  "value": "api"
					},
					{
					  "key": "Arc-Organization",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Environment",
					  "value": "index"
					},
					{
					  "key": "Arc-Org-Name",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Org-Env",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Application",
					  "value": "Author"
					},
					{
					  "key": "Arc-Route",
					  "value": "/author"
					},
					{
					  "key": "Content-Encoding",
					  "value": "gzip"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"q_results\": [\n    \t{\n            \"_id\": \"jane-doe\",\n            \"firstName\": \"Jane\",\n            \"lastName\": \"Doe\",\n            \"byline\": \"Jane Doe\",\n            \"image\": \"https://fakeimg.pl/250x100/\",\n            \"role\": \"fakerole\",\n            \"last_updated_date\": \"2020-02-28T22:15:08.031Z\",\n            \"books\": [],\n            \"podcasts\": [],\n            \"education\": [],\n            \"awards\": []\n        },\n        {\n            \"_id\": \"john-doe\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"byline\": \"John Doe\",\n            \"image\": \"https://fakeimg.pl/250x100/\",\n            \"role\": \"fakerole\",\n            \"last_updated_date\": \"2020-02-28T22:14:46.581Z\",\n            \"books\": [],\n            \"podcasts\": [],\n            \"education\": [],\n            \"awards\": []\n        }\n    ],\n    \"count\": 2,\n    \"limit\": 0,\n    \"offset\": 0,\n    \"total_count\": 2\n}"
				}
			  ]
			},
			{
			  "name": "Add/Update Author",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "POST",
				"header": [
				  {
					"key": "Content-Type",
					"value": "application/json"
				  }
				],
				"body": {
				  "mode": "raw",
				  "raw": "{\n   \"_id\":\"test-user\",\n   \"byline\":\"Test User\",\n   \"firstName\":\"Test\",\n   \"lastName\":\"User\",\n   \"location\":\"Test\",\n   \"image\":\"https://fakeimg.pl/250x100/\",\n   \"email\":\"test@test.com\",\n   \"twitter\":\"test\",\n   \"role\":\"author\",\n   \"bio\":\"I'm a test user\",\n   \"slug\":\"test-user\",\n   \"fuzzySearch\":\"test\",\n   \"altByline\":\"test\",\n   \"youtube\":\"test\",\n   \"tumblr\":\"test\",\n   \"pinterest\":\"test\",\n   \"soundcloud\":\"test\",\n   \"instagram\":\"test\",\n   \"linkedin\":\"test\",\n   \"rss\":\"test\",\n   \"longBio\":\"test\",\n   \"native_app_rendering\":\"test\",\n   \"contributor\":\"test\"\n}",
				  "options": {
					"raw": {}
				  }
				},
				"url": {
				  "raw": "https://api.{{baseUrl}}/author/v2/author-service/:_id",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"author",
					"v2",
					"author-service",
					":_id"
				  ],
				  "variable": [
					{
					  "description": "The _id of the user you want to add or update",
					  "key": "_id",
					  "type": "string",
					  "value": "test-user"
					}
				  ]
				},
				"description": "Add a new author or update an existing author"
			  },
			  "response": [
				{
				  "name": "Add/Update Author",
				  "originalRequest": {
					"method": "POST",
					"header": [
					  {
						"key": "Content-Type",
						"value": "application/json"
					  }
					],
					"body": {
					  "mode": "raw",
					  "raw": "{\n   \"_id\":\"test-user\",\n   \"byline\":\"Test User\",\n   \"firstName\":\"Test\",\n   \"lastName\":\"User\",\n   \"location\":\"Test\",\n   \"image\":\"https://fakeimg.pl/250x100/\",\n   \"email\":\"test@test.com\",\n   \"twitter\":\"test\",\n   \"role\":\"author\",\n   \"bio\":\"I'm a test user\",\n   \"slug\":\"test-user\",\n   \"fuzzySearch\":\"test\",\n   \"altByline\":\"test\",\n   \"youtube\":\"test\",\n   \"tumblr\":\"test\",\n   \"pinterest\":\"test\",\n   \"soundcloud\":\"test\",\n   \"instagram\":\"test\",\n   \"linkedin\":\"test\",\n   \"rss\":\"test\",\n   \"longBio\":\"test\",\n   \"native_app_rendering\":\"test\",\n   \"contributor\":\"test\"\n}"
					},
					"url": {
					  "raw": "https://api.{{baseUrl}}/author/v1/",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"author",
						"v1",
						""
					  ]
					}
				  },
				  "_postman_previewlanguage": null,
				  "header": null,
				  "cookie": [],
				  "body": "{\n   \"_id\":\"test-user\",\n   \"byline\":\"Test User\",\n   \"firstName\":\"Test\",\n   \"lastName\":\"User\",\n   \"location\":\"Test\",\n   \"image\":\"https://fakeimg.pl/250x100/\",\n   \"email\":\"test@test.com\",\n   \"twitter\":\"test\",\n   \"role\":\"author\",\n   \"bio\":\"I'm a test user\",\n   \"slug\":\"test-user\",\n   \"fuzzySearch\":\"test\",\n   \"altByline\":\"test\",\n   \"youtube\":\"test\",\n   \"tumblr\":\"test\",\n   \"pinterest\":\"test\",\n   \"soundcloud\":\"test\",\n   \"instagram\":\"test\",\n   \"linkedin\":\"test\",\n   \"rss\":\"test\",\n   \"longBio\":\"test\",\n   \"native_app_rendering\":\"test\",\n   \"contributor\":\"test\"\n}"
				}
			  ]
			},
			{
			  "name": "Delete Author",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "DELETE",
				"header": [
				  {
					"key": "Content-Type",
					"value": "application/json"
				  }
				],
				"body": {
				  "mode": "raw",
				  "raw": "{\n   \"_id\":\"test-user\",\n   \"byline\":\"Test User\",\n   \"firstName\":\"Test\",\n   \"lastName\":\"User\",\n   \"location\":\"Test\",\n   \"image\":\"https://fakeimg.pl/250x100/\",\n   \"email\":\"test@test.com\",\n   \"twitter\":\"test\",\n   \"role\":\"author\",\n   \"bio\":\"I'm a test user\",\n   \"slug\":\"test-user\",\n   \"fuzzySearch\":\"test\",\n   \"altByline\":\"test\",\n   \"youtube\":\"test\",\n   \"tumblr\":\"test\",\n   \"pinterest\":\"test\",\n   \"soundcloud\":\"test\",\n   \"instagram\":\"test\",\n   \"linkedin\":\"test\",\n   \"rss\":\"test\",\n   \"longBio\":\"test\",\n   \"native_app_rendering\":\"test\",\n   \"contributor\":\"test\"\n}",
				  "options": {
					"raw": {}
				  }
				},
				"url": {
				  "raw": "https://api.{{baseUrl}}/author/v2/author-service/:_id",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"author",
					"v2",
					"author-service",
					":_id"
				  ],
				  "variable": [
					{
					  "description": "The _id of the author you want to delete",
					  "key": "_id",
					  "type": "string",
					  "value": "test-user"
					}
				  ]
				},
				"description": "Delete an existing author"
			  },
			  "response": [
				{
				  "name": "Delete Author",
				  "originalRequest": {
					"method": "DELETE",
					"header": [
					  {
						"key": "Content-Type",
						"value": "application/json"
					  }
					],
					"body": {
					  "mode": "raw",
					  "raw": "{\n   \"_id\":\"test-user\",\n   \"byline\":\"Test User\",\n   \"firstName\":\"Test\",\n   \"lastName\":\"User\",\n   \"location\":\"Test\",\n   \"image\":\"https://fakeimg.pl/250x100/\",\n   \"email\":\"test@test.com\",\n   \"twitter\":\"test\",\n   \"role\":\"author\",\n   \"bio\":\"I'm a test user\",\n   \"slug\":\"test-user\",\n   \"fuzzySearch\":\"test\",\n   \"altByline\":\"test\",\n   \"youtube\":\"test\",\n   \"tumblr\":\"test\",\n   \"pinterest\":\"test\",\n   \"soundcloud\":\"test\",\n   \"instagram\":\"test\",\n   \"linkedin\":\"test\",\n   \"rss\":\"test\",\n   \"longBio\":\"test\",\n   \"native_app_rendering\":\"test\",\n   \"contributor\":\"test\"\n}"
					},
					"url": {
					  "raw": "https://api.{{baseUrl}}/author/v1/?_id=test-user",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"author",
						"v1",
						""
					  ],
					  "query": [
						{
						  "key": "_id",
						  "value": "test-user"
						}
					  ]
					}
				  },
				  "_postman_previewlanguage": null,
				  "header": null,
				  "cookie": [],
				  "body": "{\n   \"_id\":\"test-user\",\n   \"byline\":\"Test User\",\n   \"firstName\":\"Test\",\n   \"lastName\":\"User\",\n   \"location\":\"Test\",\n   \"image\":\"https://fakeimg.pl/250x100/\",\n   \"email\":\"test@test.com\",\n   \"twitter\":\"test\",\n   \"role\":\"author\",\n   \"bio\":\"I'm a test user\",\n   \"slug\":\"test-user\",\n   \"fuzzySearch\":\"test\",\n   \"altByline\":\"test\",\n   \"youtube\":\"test\",\n   \"tumblr\":\"test\",\n   \"pinterest\":\"test\",\n   \"soundcloud\":\"test\",\n   \"instagram\":\"test\",\n   \"linkedin\":\"test\",\n   \"rss\":\"test\",\n   \"longBio\":\"test\",\n   \"native_app_rendering\":\"test\",\n   \"contributor\":\"test\"\n}"
				}
			  ]
			}
		  ],
		  "description": "The v2 version of the Author's API. This is currently the most current version.",
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		},
		{
		  "name": "v1",
		  "item": [
			{
			  "name": "Get all authors",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://api.{{baseUrl}}/author/v1/author-service/",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"author",
					"v1",
					"author-service",
					""
				  ],
				  "query": [
					{
					  "key": "ans",
					  "value": "true",
					  "description": "Set this to true to get the results in ANS format",
					  "disabled": true
					}
				  ]
				},
				"description": "Returns a list of all authors"
			  },
			  "response": [
				{
				  "name": "Get all authors",
				  "originalRequest": {
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/author/v1/",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"author",
						"v1",
						""
					  ]
					}
				  },
				  "status": "OK",
				  "code": 200,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Date",
					  "value": "Thu, 12 Mar 2020 14:38:37 GMT"
					},
					{
					  "key": "Content-Type",
					  "value": "application/json; charset=utf-8"
					},
					{
					  "key": "Transfer-Encoding",
					  "value": "chunked"
					},
					{
					  "key": "Connection",
					  "value": "keep-alive"
					},
					{
					  "key": "Server",
					  "value": "nginx"
					},
					{
					  "key": "X-Powered-By",
					  "value": "Express"
					},
					{
					  "key": "Access-Control-Allow-Origin",
					  "value": "*"
					},
					{
					  "key": "ETag",
					  "value": "W/\"2654f-txIG5WUTs3RimO8SBQx9CqwIZtM\""
					},
					{
					  "key": "Arc-Deployment",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Context",
					  "value": "index"
					},
					{
					  "key": "Arc-ServerName",
					  "value": "api.elespectador.arcpublishing.com"
					},
					{
					  "key": "Arc-Service",
					  "value": "api"
					},
					{
					  "key": "Arc-Organization",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Environment",
					  "value": "index"
					},
					{
					  "key": "Arc-Org-Name",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Org-Env",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Application",
					  "value": "Author"
					},
					{
					  "key": "Arc-Route",
					  "value": "/author"
					},
					{
					  "key": "Content-Encoding",
					  "value": "gzip"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"q_results\": [\n    \t{\n            \"_id\": \"jane-doe\",\n            \"firstName\": \"Jane\",\n            \"lastName\": \"Doe\",\n            \"byline\": \"Jane Doe\",\n            \"image\": \"https://fakeimg.pl/250x100/\",\n            \"role\": \"fakerole\",\n            \"last_updated_date\": \"2020-02-28T22:15:08.031Z\",\n            \"books\": [],\n            \"podcasts\": [],\n            \"education\": [],\n            \"awards\": []\n        },\n        {\n            \"_id\": \"john-doe\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"byline\": \"John Doe\",\n            \"image\": \"https://fakeimg.pl/250x100/\",\n            \"role\": \"fakerole\",\n            \"last_updated_date\": \"2020-02-28T22:14:46.581Z\",\n            \"books\": [],\n            \"podcasts\": [],\n            \"education\": [],\n            \"awards\": []\n        }\n    ],\n    \"count\": 2,\n    \"limit\": 0,\n    \"offset\": 0,\n    \"total_count\": 2\n}"
				}
			  ]
			},
			{
			  "name": "Get empty authors",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://api.{{baseUrl}}/author/v1/author-service?q={\"_id\": \"\"}",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"author",
					"v1",
					"author-service"
				  ],
				  "query": [
					{
					  "key": "q",
					  "value": "{\"_id\": \"\"}",
					  "description": "The field and value to search for, in this case all authors with an empty _id field value"
					},
					{
					  "key": "ans",
					  "value": "true",
					  "description": "Set this to true to return ANS formatting",
					  "disabled": true
					}
				  ]
				},
				"description": "Returns a list of all authors without an ID"
			  },
			  "response": [
				{
				  "name": "Get empty author",
				  "originalRequest": {
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/author/v1/?q={\"_id\": \"\"}",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"author",
						"v1",
						""
					  ],
					  "query": [
						{
						  "key": "q",
						  "value": "{\"_id\": \"\"}"
						}
					  ]
					}
				  },
				  "status": "OK",
				  "code": 200,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Date",
					  "value": "Thu, 12 Mar 2020 19:09:07 GMT"
					},
					{
					  "key": "Content-Type",
					  "value": "application/json; charset=utf-8"
					},
					{
					  "key": "Content-Length",
					  "value": "63"
					},
					{
					  "key": "Connection",
					  "value": "keep-alive"
					},
					{
					  "key": "Server",
					  "value": "nginx"
					},
					{
					  "key": "X-Powered-By",
					  "value": "Express"
					},
					{
					  "key": "Access-Control-Allow-Origin",
					  "value": "*"
					},
					{
					  "key": "ETag",
					  "value": "W/\"3f-wUNHYHN1AMA50BFp9bdHB11xqn0\""
					},
					{
					  "key": "Arc-Deployment",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Context",
					  "value": "index"
					},
					{
					  "key": "Arc-ServerName",
					  "value": "api.elespectador.arcpublishing.com"
					},
					{
					  "key": "Arc-Service",
					  "value": "api"
					},
					{
					  "key": "Arc-Organization",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Environment",
					  "value": "index"
					},
					{
					  "key": "Arc-Org-Name",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Org-Env",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Application",
					  "value": "Author"
					},
					{
					  "key": "Arc-Route",
					  "value": "/author"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"q_results\": [\n    \t{\n            \"_id\": \"\",\n            \"firstName\": \"Jane\",\n            \"lastName\": \"Doe\",\n            \"byline\": \"Jane Doe\",\n            \"image\": \"https://fakeimg.pl/250x100/\",\n            \"role\": \"fakerole\",\n            \"last_updated_date\": \"2020-02-28T22:15:08.031Z\",\n            \"books\": [],\n            \"podcasts\": [],\n            \"education\": [],\n            \"awards\": []\n        },\n        {\n            \"_id\": \"\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"byline\": \"John Doe\",\n            \"image\": \"https://fakeimg.pl/250x100/\",\n            \"role\": \"fakerole\",\n            \"last_updated_date\": \"2020-02-28T22:14:46.581Z\",\n            \"books\": [],\n            \"podcasts\": [],\n            \"education\": [],\n            \"awards\": []\n        }\n    ],\n    \"count\": 2,\n    \"limit\": 0,\n    \"offset\": 0,\n    \"total_count\": 2\n}"
				}
			  ]
			},
			{
			  "name": "Get an author by _id",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://api.{{baseUrl}}/author/v1/author-service?q={\"_id\": \"test-user\"}",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"author",
					"v1",
					"author-service"
				  ],
				  "query": [
					{
					  "key": "q",
					  "value": "{\"_id\": \"test-user\"}",
					  "description": "The field and value to search for, in this case an author with the _id of test-user"
					},
					{
					  "key": "ans",
					  "value": "true",
					  "description": "Set this to true to return ANS formatting",
					  "disabled": true
					}
				  ]
				},
				"description": "Returns a list of all authors without an ID"
			  },
			  "response": [
				{
				  "name": "Get empty author",
				  "originalRequest": {
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/author/v1/?q={\"_id\": \"\"}",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"author",
						"v1",
						""
					  ],
					  "query": [
						{
						  "key": "q",
						  "value": "{\"_id\": \"\"}"
						}
					  ]
					}
				  },
				  "status": "OK",
				  "code": 200,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Date",
					  "value": "Thu, 12 Mar 2020 19:09:07 GMT"
					},
					{
					  "key": "Content-Type",
					  "value": "application/json; charset=utf-8"
					},
					{
					  "key": "Content-Length",
					  "value": "63"
					},
					{
					  "key": "Connection",
					  "value": "keep-alive"
					},
					{
					  "key": "Server",
					  "value": "nginx"
					},
					{
					  "key": "X-Powered-By",
					  "value": "Express"
					},
					{
					  "key": "Access-Control-Allow-Origin",
					  "value": "*"
					},
					{
					  "key": "ETag",
					  "value": "W/\"3f-wUNHYHN1AMA50BFp9bdHB11xqn0\""
					},
					{
					  "key": "Arc-Deployment",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Context",
					  "value": "index"
					},
					{
					  "key": "Arc-ServerName",
					  "value": "api.elespectador.arcpublishing.com"
					},
					{
					  "key": "Arc-Service",
					  "value": "api"
					},
					{
					  "key": "Arc-Organization",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Environment",
					  "value": "index"
					},
					{
					  "key": "Arc-Org-Name",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Org-Env",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Application",
					  "value": "Author"
					},
					{
					  "key": "Arc-Route",
					  "value": "/author"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"q_results\": [\n    \t{\n            \"_id\": \"\",\n            \"firstName\": \"Jane\",\n            \"lastName\": \"Doe\",\n            \"byline\": \"Jane Doe\",\n            \"image\": \"https://fakeimg.pl/250x100/\",\n            \"role\": \"fakerole\",\n            \"last_updated_date\": \"2020-02-28T22:15:08.031Z\",\n            \"books\": [],\n            \"podcasts\": [],\n            \"education\": [],\n            \"awards\": []\n        },\n        {\n            \"_id\": \"\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"byline\": \"John Doe\",\n            \"image\": \"https://fakeimg.pl/250x100/\",\n            \"role\": \"fakerole\",\n            \"last_updated_date\": \"2020-02-28T22:14:46.581Z\",\n            \"books\": [],\n            \"podcasts\": [],\n            \"education\": [],\n            \"awards\": []\n        }\n    ],\n    \"count\": 2,\n    \"limit\": 0,\n    \"offset\": 0,\n    \"total_count\": 2\n}"
				}
			  ]
			},
			{
			  "name": "Get an author by role",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://api.{{baseUrl}}/author/v1/author-service?q={\"role\": \"fakeRole\"}",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"author",
					"v1",
					"author-service"
				  ],
				  "query": [
					{
					  "key": "ans",
					  "value": "true",
					  "description": "Set this to true to return ANS formatting",
					  "disabled": true
					},
					{
					  "key": "q",
					  "value": "{\"role\": \"fakeRole\"}",
					  "description": "The field and value to search for"
					}
				  ]
				},
				"description": "Returns a list of all authors without an ID"
			  },
			  "response": [
				{
				  "name": "Get empty author",
				  "originalRequest": {
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/author/v1/?q={\"_id\": \"\"}",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"author",
						"v1",
						""
					  ],
					  "query": [
						{
						  "key": "q",
						  "value": "{\"_id\": \"\"}"
						}
					  ]
					}
				  },
				  "status": "OK",
				  "code": 200,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Date",
					  "value": "Thu, 12 Mar 2020 19:09:07 GMT"
					},
					{
					  "key": "Content-Type",
					  "value": "application/json; charset=utf-8"
					},
					{
					  "key": "Content-Length",
					  "value": "63"
					},
					{
					  "key": "Connection",
					  "value": "keep-alive"
					},
					{
					  "key": "Server",
					  "value": "nginx"
					},
					{
					  "key": "X-Powered-By",
					  "value": "Express"
					},
					{
					  "key": "Access-Control-Allow-Origin",
					  "value": "*"
					},
					{
					  "key": "ETag",
					  "value": "W/\"3f-wUNHYHN1AMA50BFp9bdHB11xqn0\""
					},
					{
					  "key": "Arc-Deployment",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Context",
					  "value": "index"
					},
					{
					  "key": "Arc-ServerName",
					  "value": "api.elespectador.arcpublishing.com"
					},
					{
					  "key": "Arc-Service",
					  "value": "api"
					},
					{
					  "key": "Arc-Organization",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Environment",
					  "value": "index"
					},
					{
					  "key": "Arc-Org-Name",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Org-Env",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Application",
					  "value": "Author"
					},
					{
					  "key": "Arc-Route",
					  "value": "/author"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"q_results\": [\n    \t{\n            \"_id\": \"\",\n            \"firstName\": \"Jane\",\n            \"lastName\": \"Doe\",\n            \"byline\": \"Jane Doe\",\n            \"image\": \"https://fakeimg.pl/250x100/\",\n            \"role\": \"fakerole\",\n            \"last_updated_date\": \"2020-02-28T22:15:08.031Z\",\n            \"books\": [],\n            \"podcasts\": [],\n            \"education\": [],\n            \"awards\": []\n        },\n        {\n            \"_id\": \"\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"byline\": \"John Doe\",\n            \"image\": \"https://fakeimg.pl/250x100/\",\n            \"role\": \"fakerole\",\n            \"last_updated_date\": \"2020-02-28T22:14:46.581Z\",\n            \"books\": [],\n            \"podcasts\": [],\n            \"education\": [],\n            \"awards\": []\n        }\n    ],\n    \"count\": 2,\n    \"limit\": 0,\n    \"offset\": 0,\n    \"total_count\": 2\n}"
				}
			  ]
			},
			{
			  "name": "Get all authors in ANS format",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://api.{{baseUrl}}/author/v1/author-service?ans=true",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"author",
					"v1",
					"author-service"
				  ],
				  "query": [
					{
					  "key": "q",
					  "value": "{}",
					  "description": "The field and value to search for",
					  "disabled": true
					},
					{
					  "key": "ans",
					  "value": "true",
					  "description": "Set this to true to return the results in ANS formatting"
					}
				  ]
				},
				"description": "Returns a list of all authors but in [ANS](https://github.com/washingtonpost/ans-schema) format"
			  },
			  "response": [
				{
				  "name": "Get all authors (ANS format)",
				  "originalRequest": {
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/author/v1/?q={}&ans=true",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"author",
						"v1",
						""
					  ],
					  "query": [
						{
						  "key": "q",
						  "value": "{}"
						},
						{
						  "key": "ans",
						  "value": "true"
						}
					  ]
					}
				  },
				  "status": "OK",
				  "code": 200,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Date",
					  "value": "Thu, 12 Mar 2020 15:43:37 GMT"
					},
					{
					  "key": "Content-Type",
					  "value": "application/json; charset=utf-8"
					},
					{
					  "key": "Transfer-Encoding",
					  "value": "chunked"
					},
					{
					  "key": "Connection",
					  "value": "keep-alive"
					},
					{
					  "key": "Server",
					  "value": "nginx"
					},
					{
					  "key": "X-Powered-By",
					  "value": "Express"
					},
					{
					  "key": "Access-Control-Allow-Origin",
					  "value": "*"
					},
					{
					  "key": "ETag",
					  "value": "W/\"44b30-xZ0wi3YXqYsJ0tmF7cL445Mn0vA\""
					},
					{
					  "key": "Arc-Deployment",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Context",
					  "value": "index"
					},
					{
					  "key": "Arc-ServerName",
					  "value": "api.elespectador.arcpublishing.com"
					},
					{
					  "key": "Arc-Service",
					  "value": "api"
					},
					{
					  "key": "Arc-Organization",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Environment",
					  "value": "index"
					},
					{
					  "key": "Arc-Org-Name",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Org-Env",
					  "value": "elespectador"
					},
					{
					  "key": "Arc-Application",
					  "value": "Author"
					},
					{
					  "key": "Arc-Route",
					  "value": "/author"
					},
					{
					  "key": "Content-Encoding",
					  "value": "gzip"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"q_results\": [\n        {\n            \"_id\": \"john-doe\",\n            \"type\": \"author\",\n            \"version\": \"0.5.8\",\n            \"name\": \"John Doe\",\n            \"image\": {\n                \"url\": \"\",\n                \"version\": \"0.5.8\"\n            },\n            \"additional_properties\": {\n                \"original\": {\n                    \"_id\": \"john-doe\",\n                    \"firstName\": \"John\",\n                    \"lastName\": \"Doe\",\n                    \"byline\": \"John Doe\",\n                    \"image\": \"\",\n                    \"role\": \"fakeRole\",\n                    \"last_updated_date\": \"2020-02-28T22:14:46.581Z\",\n                    \"books\": [],\n                    \"podcasts\": [],\n                    \"education\": [],\n                    \"awards\": []\n                }\n            }\n        },\n        {\n            \"_id\": \"jane-doe\",\n            \"type\": \"author\",\n            \"version\": \"0.5.8\",\n            \"name\": \"Jane Doe\",\n            \"image\": {\n                \"url\": \"\",\n                \"version\": \"0.5.8\"\n            },\n            \"additional_properties\": {\n                \"original\": {\n                    \"_id\": \"jane-doe\",\n                    \"firstName\": \"Jane\",\n                    \"lastName\": \"Doe\",\n                    \"byline\": \"Jane Doe\",\n                    \"image\": \"\",\n                    \"role\": \"fakeRole\",\n                    \"last_updated_date\": \"2020-02-28T22:14:46.581Z\",\n                    \"books\": [],\n                    \"podcasts\": [],\n                    \"education\": [],\n                    \"awards\": []\n                }\n            }\n        }\n    ],\n    \"count\": 2,\n    \"limit\": 0,\n    \"offset\": 0,\n    \"total_count\": 2\n}"
				}
			  ]
			},
			{
			  "name": "Add/Update Author",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "POST",
				"header": [
				  {
					"key": "Content-Type",
					"value": "application/json"
				  }
				],
				"body": {
				  "mode": "raw",
				  "raw": "{\n   \"_id\":\"test-user\",\n   \"byline\":\"Test User\",\n   \"firstName\":\"Test\",\n   \"lastName\":\"User\",\n   \"location\":\"Test\",\n   \"image\":\"https://fakeimg.pl/250x100/\",\n   \"email\":\"test@test.com\",\n   \"twitter\":\"test\",\n   \"role\":\"author\",\n   \"bio\":\"I'm a test user\",\n   \"slug\":\"test-user\",\n   \"fuzzySearch\":\"test\",\n   \"altByline\":\"test\",\n   \"youtube\":\"test\",\n   \"tumblr\":\"test\",\n   \"pinterest\":\"test\",\n   \"soundcloud\":\"test\",\n   \"instagram\":\"test\",\n   \"linkedin\":\"test\",\n   \"rss\":\"test\",\n   \"longBio\":\"test\",\n   \"native_app_rendering\":\"test\",\n   \"contributor\":\"test\"\n}",
				  "options": {
					"raw": {}
				  }
				},
				"url": {
				  "raw": "https://api.{{baseUrl}}/author/v1/author-service",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"author",
					"v1",
					"author-service"
				  ]
				},
				"description": "Add a new author or update an existing author"
			  },
			  "response": [
				{
				  "name": "Add/Update Author",
				  "originalRequest": {
					"method": "POST",
					"header": [
					  {
						"key": "Content-Type",
						"value": "application/json"
					  }
					],
					"body": {
					  "mode": "raw",
					  "raw": "{\n   \"_id\":\"test-user\",\n   \"byline\":\"Test User\",\n   \"firstName\":\"Test\",\n   \"lastName\":\"User\",\n   \"location\":\"Test\",\n   \"image\":\"https://fakeimg.pl/250x100/\",\n   \"email\":\"test@test.com\",\n   \"twitter\":\"test\",\n   \"role\":\"author\",\n   \"bio\":\"I'm a test user\",\n   \"slug\":\"test-user\",\n   \"fuzzySearch\":\"test\",\n   \"altByline\":\"test\",\n   \"youtube\":\"test\",\n   \"tumblr\":\"test\",\n   \"pinterest\":\"test\",\n   \"soundcloud\":\"test\",\n   \"instagram\":\"test\",\n   \"linkedin\":\"test\",\n   \"rss\":\"test\",\n   \"longBio\":\"test\",\n   \"native_app_rendering\":\"test\",\n   \"contributor\":\"test\"\n}"
					},
					"url": {
					  "raw": "https://api.{{baseUrl}}/author/v1/",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"author",
						"v1",
						""
					  ]
					}
				  },
				  "_postman_previewlanguage": null,
				  "header": null,
				  "cookie": [],
				  "body": "{\n   \"_id\":\"test-user\",\n   \"byline\":\"Test User\",\n   \"firstName\":\"Test\",\n   \"lastName\":\"User\",\n   \"location\":\"Test\",\n   \"image\":\"https://fakeimg.pl/250x100/\",\n   \"email\":\"test@test.com\",\n   \"twitter\":\"test\",\n   \"role\":\"author\",\n   \"bio\":\"I'm a test user\",\n   \"slug\":\"test-user\",\n   \"fuzzySearch\":\"test\",\n   \"altByline\":\"test\",\n   \"youtube\":\"test\",\n   \"tumblr\":\"test\",\n   \"pinterest\":\"test\",\n   \"soundcloud\":\"test\",\n   \"instagram\":\"test\",\n   \"linkedin\":\"test\",\n   \"rss\":\"test\",\n   \"longBio\":\"test\",\n   \"native_app_rendering\":\"test\",\n   \"contributor\":\"test\"\n}"
				}
			  ]
			},
			{
			  "name": "Delete Author",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "DELETE",
				"header": [
				  {
					"key": "Content-Type",
					"value": "application/json"
				  }
				],
				"body": {
				  "mode": "raw",
				  "raw": "{\n   \"_id\":\"test-user\",\n   \"byline\":\"Test User\",\n   \"firstName\":\"Test\",\n   \"lastName\":\"User\",\n   \"location\":\"Test\",\n   \"image\":\"https://fakeimg.pl/250x100/\",\n   \"email\":\"test@test.com\",\n   \"twitter\":\"test\",\n   \"role\":\"author\",\n   \"bio\":\"I'm a test user\",\n   \"slug\":\"test-user\",\n   \"fuzzySearch\":\"test\",\n   \"altByline\":\"test\",\n   \"youtube\":\"test\",\n   \"tumblr\":\"test\",\n   \"pinterest\":\"test\",\n   \"soundcloud\":\"test\",\n   \"instagram\":\"test\",\n   \"linkedin\":\"test\",\n   \"rss\":\"test\",\n   \"longBio\":\"test\",\n   \"native_app_rendering\":\"test\",\n   \"contributor\":\"test\"\n}",
				  "options": {
					"raw": {}
				  }
				},
				"url": {
				  "raw": "https://api.{{baseUrl}}/author/v1/author-service?_id=<string>",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"author",
					"v1",
					"author-service"
				  ],
				  "query": [
					{
					  "key": "_id",
					  "value": "<string>"
					}
				  ]
				},
				"description": "Delete an existing author"
			  },
			  "response": [
				{
				  "name": "Delete Author",
				  "originalRequest": {
					"method": "DELETE",
					"header": [
					  {
						"key": "Content-Type",
						"value": "application/json"
					  }
					],
					"body": {
					  "mode": "raw",
					  "raw": "{\n   \"_id\":\"test-user\",\n   \"byline\":\"Test User\",\n   \"firstName\":\"Test\",\n   \"lastName\":\"User\",\n   \"location\":\"Test\",\n   \"image\":\"https://fakeimg.pl/250x100/\",\n   \"email\":\"test@test.com\",\n   \"twitter\":\"test\",\n   \"role\":\"author\",\n   \"bio\":\"I'm a test user\",\n   \"slug\":\"test-user\",\n   \"fuzzySearch\":\"test\",\n   \"altByline\":\"test\",\n   \"youtube\":\"test\",\n   \"tumblr\":\"test\",\n   \"pinterest\":\"test\",\n   \"soundcloud\":\"test\",\n   \"instagram\":\"test\",\n   \"linkedin\":\"test\",\n   \"rss\":\"test\",\n   \"longBio\":\"test\",\n   \"native_app_rendering\":\"test\",\n   \"contributor\":\"test\"\n}"
					},
					"url": {
					  "raw": "https://api.{{baseUrl}}/author/v1/?_id=test-user",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"author",
						"v1",
						""
					  ],
					  "query": [
						{
						  "key": "_id",
						  "value": "test-user"
						}
					  ]
					}
				  },
				  "_postman_previewlanguage": null,
				  "header": null,
				  "cookie": [],
				  "body": "{\n   \"_id\":\"test-user\",\n   \"byline\":\"Test User\",\n   \"firstName\":\"Test\",\n   \"lastName\":\"User\",\n   \"location\":\"Test\",\n   \"image\":\"https://fakeimg.pl/250x100/\",\n   \"email\":\"test@test.com\",\n   \"twitter\":\"test\",\n   \"role\":\"author\",\n   \"bio\":\"I'm a test user\",\n   \"slug\":\"test-user\",\n   \"fuzzySearch\":\"test\",\n   \"altByline\":\"test\",\n   \"youtube\":\"test\",\n   \"tumblr\":\"test\",\n   \"pinterest\":\"test\",\n   \"soundcloud\":\"test\",\n   \"instagram\":\"test\",\n   \"linkedin\":\"test\",\n   \"rss\":\"test\",\n   \"longBio\":\"test\",\n   \"native_app_rendering\":\"test\",\n   \"contributor\":\"test\"\n}"
				}
			  ]
			},
			{
			  "name": "Get configuration",
			  "request": {
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://api.{{baseUrl}}/author/v1/configuration/author-service",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"author",
					"v1",
					"configuration",
					"author-service"
				  ]
				},
				"description": "Returns the current configuration of fields in your Author Service. New fields can be added and some fields can be hidden by making a change request with the Arc Platform team."
			  },
			  "response": [
				{
				  "name": "Get configuration",
				  "originalRequest": {
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/author/v1/configuration/author-service",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"author",
						"v1",
						"configuration",
						"author-service"
					  ]
					}
				  },
				  "status": "OK",
				  "code": 200,
				  "_postman_previewlanguage": "json",
				  "header": [
					{
					  "key": "Date",
					  "value": "Thu, 12 Mar 2020 20:13:43 GMT"
					},
					{
					  "key": "Content-Type",
					  "value": "application/json; charset=utf-8"
					},
					{
					  "key": "Transfer-Encoding",
					  "value": "chunked"
					},
					{
					  "key": "Connection",
					  "value": "keep-alive"
					},
					{
					  "key": "Server",
					  "value": "nginx"
					},
					{
					  "key": "X-Powered-By",
					  "value": "Express"
					},
					{
					  "key": "Access-Control-Allow-Origin",
					  "value": "*"
					},
					{
					  "key": "ETag",
					  "value": "W/\"18cb-PNf9Rrdr7PkXSyAGqCGCLRQlBCQ\""
					},
					{
					  "key": "Arc-Deployment",
					  "value": "demo"
					},
					{
					  "key": "Arc-Context",
					  "value": "index"
					},
					{
					  "key": "Arc-ServerName",
					  "value": "api.demo.arcpublishing.com"
					},
					{
					  "key": "Arc-Service",
					  "value": "api"
					},
					{
					  "key": "Arc-Organization",
					  "value": "demo"
					},
					{
					  "key": "Arc-Environment",
					  "value": "index"
					},
					{
					  "key": "Arc-Org-Name",
					  "value": "demo"
					},
					{
					  "key": "Arc-Org-Env",
					  "value": "demo"
					},
					{
					  "key": "Arc-Application",
					  "value": "Author"
					},
					{
					  "key": "Arc-Route",
					  "value": "/author"
					},
					{
					  "key": "Content-Encoding",
					  "value": "gzip"
					}
				  ],
				  "cookie": [],
				  "body": "{\n    \"q_results\": [\n        {\n            \"_id\": \"58e67900d30886000e125168\",\n            \"key\": \"firstName\",\n            \"label\": \"First Name\",\n            \"type\": \"text\",\n            \"placeholder\": \"first name\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"58e67900d30886000e125167\",\n            \"key\": \"lastName\",\n            \"label\": \"Last Name\",\n            \"type\": \"text\",\n            \"placeholder\": \"last name\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"5a0c4ecc0e00e33f4c91895d\",\n            \"key\": \"reddit\",\n            \"type\": \"text\",\n            \"placeholder\": \"Reddit username\",\n            \"versionAdded\": 2\n        },\n        {\n            \"_id\": \"58e67900d30886000e12516a\",\n            \"key\": \"email\",\n            \"label\": \"Email Address\",\n            \"type\": \"email\",\n            \"placeholder\": \"work email\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"5a0c4f060e00e33f4c918b1b\",\n            \"key\": \"author_type\",\n            \"label\": \"Author Type\",\n            \"type\": \"text\",\n            \"placeholder\": \"Author type. Ex. Staff or Freelancer\",\n            \"versionAdded\": 3\n        },\n        {\n            \"_id\": \"5a0c4ecc0e00e33f4c918959\",\n            \"key\": \"desk\",\n            \"label\": \"Desk\",\n            \"placeholder\": \"desk\",\n            \"type\": \"text\",\n            \"hidden\": true,\n            \"versionAdded\": 2\n        },\n        {\n            \"_id\": \"58e67900c1a449000eb934d5\",\n            \"key\": \"pinterest\",\n            \"label\": \"Pinterest ID\",\n            \"type\": \"text\",\n            \"hidden\": true,\n            \"placeholder\": \"Pinterest username\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"58e67900c1a449000eb934d7\",\n            \"key\": \"longBio\",\n            \"label\": \"Full Bio\",\n            \"type\": \"textarea\",\n            \"hidden\": true,\n            \"placeholder\": \"a longer bio of the author\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"5a21c9c0cba5944ba8b8cda4\",\n            \"key\": \"author_type\",\n            \"label\": \"Author Type\",\n            \"type\": \"text\",\n            \"placeholder\": \"Author type. Ex. Staff or Freelancer\",\n            \"versionAdded\": 3\n        },\n        {\n            \"_id\": \"58e67900c1a449000eb934d6\",\n            \"key\": \"bio\",\n            \"label\": \"Short Bio\",\n            \"type\": \"textarea\",\n            \"max\": 350,\n            \"placeholder\": \"a short bio of the author\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"58e679001ca804000d9d02c9\",\n            \"key\": \"rss\",\n            \"label\": \"RSS (mediafeed)\",\n            \"type\": \"text\",\n            \"hidden\": true,\n            \"placeholder\": \"RSS feed\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"58e679001ca804000d9d02cb\",\n            \"key\": \"_id\",\n            \"label\": \"User ID\",\n            \"type\": \"static\",\n            \"placeholder\": \"user name\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"5a0c4ecc0e00e33f4c918957\",\n            \"key\": \"middleName\",\n            \"label\": \"Middle name or initial\",\n            \"placeholder\": \"middle name/initial\",\n            \"type\": \"text\",\n            \"versionAdded\": 2\n        },\n        {\n            \"_id\": \"58e679001ca804000d9d02cc\",\n            \"key\": \"location\",\n            \"label\": \"Location\",\n            \"type\": \"text\",\n            \"placeholder\": \"location\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"58e67900c1a449000eb934d8\",\n            \"key\": \"bio_page\",\n            \"label\": \"Bio Page URL\",\n            \"type\": \"bio-url\"\n        },\n        {\n            \"_id\": \"58e679001ca804000d9d02c6\",\n            \"key\": \"byline\",\n            \"label\": \"Byline\",\n            \"type\": \"text\",\n            \"placeholder\": \"byline name\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"58e67900d30886000e12516c\",\n            \"key\": \"slug\",\n            \"label\": \"Byline Slug\",\n            \"type\": \"slug\"\n        },\n        {\n            \"_id\": \"5a0c4ecc0e00e33f4c918962\",\n            \"key\": \"awards\",\n            \"label\": \"Honors & Awards\",\n            \"placeholder\": \"one honor or award per row\",\n            \"type\": \"multi\",\n            \"default\": [],\n            \"versionAdded\": 2\n        },\n        {\n            \"_id\": \"5a0c4ecc0e00e33f4c918960\",\n            \"key\": \"books\",\n            \"label\": \"Books\",\n            \"type\": \"books\",\n            \"books_placeholder\": {\n                \"title\": \"book title\",\n                \"url\": \"book url\"\n            },\n            \"default\": [],\n            \"versionAdded\": 2\n        },\n        {\n            \"_id\": \"58e67900d30886000e12516d\",\n            \"key\": \"role\",\n            \"label\": \"Author Role\",\n            \"type\": \"text\",\n            \"placeholder\": \"Your role\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"5a0c4ecc0e00e33f4c91895c\",\n            \"key\": \"medium\",\n            \"type\": \"text\",\n            \"placeholder\": \"Medium username\",\n            \"versionAdded\": 2\n        },\n        {\n            \"_id\": \"58e679001ca804000d9d02cd\",\n            \"key\": \"fuzzySearch\",\n            \"label\": \"Fuzzy Match\",\n            \"type\": \"boolean\",\n            \"hidden\": true\n        },\n        {\n            \"_id\": \"59e625104cdc3f8b28274f73\",\n            \"key\": \"beat\",\n            \"label\": \"Beat\",\n            \"type\": \"text\",\n            \"placeholder\": \"beat\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"5a0c4ecc0e00e33f4c91895e\",\n            \"key\": \"expertise\",\n            \"label\": \"Expertise\",\n            \"placeholder\": \"list of areas of expertise e.g., “Health policy, Congress, environmental regulation”\",\n            \"type\": \"text\",\n            \"required\": false,\n            \"max\": 120,\n            \"versionAdded\": 2\n        },\n        {\n            \"_id\": \"58e67900d30886000e125169\",\n            \"key\": \"youtube\",\n            \"label\": \"YouTube ID\",\n            \"type\": \"text\",\n            \"hidden\": true,\n            \"placeholder\": \"YouTube username\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"58e67900c1a449000eb934dc\",\n            \"key\": \"facebook\",\n            \"label\": \"Facebook URL\",\n            \"type\": \"url\",\n            \"placeholder\": \"Facebook page link\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"58e679001ca804000d9d02c7\",\n            \"key\": \"image\",\n            \"label\": \"Image\",\n            \"type\": \"img\",\n            \"cropMode\": \"none\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"5a21cd3ccba5944ba8b8cdd6\",\n            \"key\": \"personal_website\",\n            \"label\": \"Personal Website\",\n            \"placeholder\": \"Personal Website\",\n            \"type\": \"url\",\n            \"versionAdded\": \"2017_11_15\"\n        },\n        {\n            \"_id\": \"58e679001ca804000d9d02ca\",\n            \"key\": \"soundcloud\",\n            \"label\": \"Soundcloud ID\",\n            \"type\": \"text\",\n            \"hidden\": true,\n            \"placeholder\": \"Soundcloud username\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"5a0c4ecc0e00e33f4c918958\",\n            \"key\": \"suffix\",\n            \"label\": \"Suffix\",\n            \"placeholder\": \"suffix\",\n            \"type\": \"text\",\n            \"versionAdded\": 2\n        },\n        {\n            \"_id\": \"58e67900c1a449000eb934da\",\n            \"key\": \"linkedin\",\n            \"label\": \"LinkedIn ID\",\n            \"type\": \"text\",\n            \"hidden\": true,\n            \"placeholder\": \"LinkedIn username\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"58e679001ca804000d9d02c8\",\n            \"key\": \"gplus\",\n            \"label\": \"Google+ URL\",\n            \"type\": \"url\",\n            \"hidden\": true,\n            \"placeholder\": \"Google+ username\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"58e67900c1a449000eb934d9\",\n            \"key\": \"twitter\",\n            \"label\": \"Twitter Handle\",\n            \"type\": \"text\",\n            \"placeholder\": \"Twitter handle e.g., \\\"benbradlee\\\" instead of \\\"@benbradlee\\\"\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"5a0c4ecc0e00e33f4c91895a\",\n            \"key\": \"snapchat\",\n            \"type\": \"text\",\n            \"placeholder\": \"Snapchat username\",\n            \"versionAdded\": 2\n        },\n        {\n            \"_id\": \"58e67900d30886000e12516b\",\n            \"key\": \"altByline\",\n            \"label\": \"Alt Byline\",\n            \"type\": \"text\",\n            \"hidden\": true\n        },\n        {\n            \"_id\": \"58e67900c1a449000eb934db\",\n            \"key\": \"instagram\",\n            \"label\": \"Instagram ID\",\n            \"type\": \"text\",\n            \"hidden\": true,\n            \"placeholder\": \"Instagram username\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"58e679001ca804000d9d02c5\",\n            \"key\": \"contributor\",\n            \"label\": \"Contributor\",\n            \"type\": \"boolean\",\n            \"hidden\": true\n        },\n        {\n            \"_id\": \"5a0c4ecc0e00e33f4c91895f\",\n            \"key\": \"affiliations\",\n            \"label\": \"Affiliations\",\n            \"placeholder\": \"list of professional affiliations or organizations\",\n            \"type\": \"textarea\",\n            \"versionAdded\": 2\n        },\n        {\n            \"_id\": \"58e67900d30886000e12516e\",\n            \"key\": \"tumblr\",\n            \"label\": \"Tumblr ID\",\n            \"type\": \"text\",\n            \"hidden\": true,\n            \"placeholder\": \"Tumblr username\",\n            \"versionUpdated\": 2\n        },\n        {\n            \"_id\": \"5a0c4ecc0e00e33f4c91895b\",\n            \"key\": \"whatsapp\",\n            \"type\": \"text\",\n            \"placeholder\": \"WhatsApp username\",\n            \"versionAdded\": 2\n        },\n        {\n            \"_id\": \"58e67900c1a449000eb934dd\",\n            \"key\": \"native_app_rendering\",\n            \"label\": \"Native App Rendering\",\n            \"type\": \"boolean\",\n            \"hidden\": true\n        },\n        {\n            \"_id\": \"5a0c4ecc0e00e33f4c918961\",\n            \"key\": \"education\",\n            \"label\": \"Education\",\n            \"placeholder\": \"one per row e.g., school, field of study, year\",\n            \"type\": \"multi\",\n            \"default\": [],\n            \"versionAdded\": 2\n        },\n        {\n            \"_id\": \"5a0c4ecc0e00e33f4c918963\",\n            \"key\": \"languages\",\n            \"label\": \"Languages\",\n            \"placeholder\": \"list of languages spoken\",\n            \"type\": \"text\",\n            \"versionAdded\": 2\n        },\n        {\n            \"_id\": \"5a21cd3ccba5944ba8b8cdd7\",\n            \"key\": \"podcasts\",\n            \"label\": \"Podcasts\",\n            \"type\": \"dynamicObject\",\n            \"placeholder\": {\n                \"name\": \"Podcast Name\",\n                \"url\": \"Podcast URL\",\n                \"download_url\": \"Podcast Download URL\"\n            },\n            \"versionAdded\": \"2017_11_15\"\n        }\n    ],\n    \"count\": 44,\n    \"limit\": 0,\n    \"offset\": 0,\n    \"total_count\": 44\n}"
				}
			  ]
			}
		  ],
		  "description": "The first version of the Authors API which includes a configuration endpoint you can use to create new fields in the Authors Service interface.",
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		}
	  ],
	  "description": "A collection of API calls for working with the Author service. Use this to perform specific CRUD operations on your site's Authors.\n\nDocumentation is available at: https://redirector.arcpublishing.com/alc/docs/swagger/?url=./arc-products/authors.json",
	  "event": [
		{
		  "listen": "prerequest",
		  "script": {
			"id": "000a6021-7dc2-414c-9311-4c514a571004",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		},
		{
		  "listen": "test",
		  "script": {
			"id": "e3b42506-3b55-4a2e-8d1b-97df8f61aee9",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		}
	  ],
	  "protocolProfileBehavior": {}
	},
	{
	  "name": "Clavis API",
	  "item": [
		{
		  "name": "Clavis Return Recommendations",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "POST",
			"header": [
			  {
				"key": "Content-Type",
				"value": "application/json"
			  }
			],
			"body": {
			  "mode": "raw",
			  "raw": "{\n  \"url\": \"contentapi://<string>\",\n  \"uid\": \"<string>\",\n  \"referrer\": \"https://google.com\",\n  \"count\": 3,\n  \"client\": \"recommend-arc\"\n}",
			  "options": {
				"raw": {}
			  }
			},
			"url": {
			  "raw": "https://recommendations.{{baseUrl}}/hybrid/hybrid-filter/recommend?outputType=ans",
			  "protocol": "https",
			  "host": [
				"recommendations",
				"{{baseUrl}}"
			  ],
			  "path": [
				"hybrid",
				"hybrid-filter",
				"recommend"
			  ],
			  "query": [
				{
				  "key": "outputType",
				  "value": "ans"
				}
			  ]
			}
		  },
		  "response": []
		}
	  ],
	  "protocolProfileBehavior": {}
	},
	{
	  "name": "Websked API",
	  "item": [
		{
		  "name": "Create a Group",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "POST",
			"header": [
			  {
				"key": "Content-Type",
				"value": "application/json"
			  }
			],
			"body": {
			  "mode": "raw",
			  "raw": "{\n\t\"name\":\"Webhook Testing\"\n}",
			  "options": {
				"raw": {}
			  }
			},
			"url": {
			  "raw": "https://api.{{baseUrl}}/websked/groups",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"websked",
				"groups"
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "List All  Groups",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "GET",
			"header": [
			  {
				"key": "Content-Type",
				"value": "application/json"
			  }
			],
			"url": {
			  "raw": "https://api.{{baseUrl}}/websked/groups",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"websked",
				"groups"
			  ]
			}
		  },
		  "response": []
		}
	  ],
	  "event": [
		{
		  "listen": "prerequest",
		  "script": {
			"id": "e0486248-e86b-467e-a81d-2a6c7c0e8826",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		},
		{
		  "listen": "test",
		  "script": {
			"id": "30619c43-a361-4428-a3e6-dbea9b006666",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		}
	  ],
	  "protocolProfileBehavior": {}
	},
	{
	  "name": "Pagebuilder API",
	  "item": [
		{
		  "name": "{content_source}",
		  "item": [
			{
			  "name": "Get Content",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "http://api.{{baseUrl}}/pf/api/v3/content/fetch/:content-source?_website={{website}}",
				  "protocol": "http",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"pf",
					"api",
					"v3",
					"content",
					"fetch",
					":content-source"
				  ],
				  "query": [
					{
					  "key": "_website",
					  "value": "{{website}}",
					  "description": "The website to look up content for. If empty, this will be appended automatically by the public origin"
					},
					{
					  "key": "query",
					  "value": "",
					  "description": "Elastic search query",
					  "disabled": true
					},
					{
					  "key": "filter",
					  "value": "",
					  "description": "GraphQL filter",
					  "disabled": true
					}
				  ],
				  "variable": [
					{
					  "description": "The content source you want to fetch content from",
					  "key": "content-source",
					  "value": "content-api"
					}
				  ]
				},
				"description": "Fetch a specific piece of content, using the content source and query specified. Optionally filter the content with a provided graphql filter."
			  },
			  "response": []
			},
			{
			  "name": "Debug Fetch Requests",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "http://api.{{baseUrl}}/pf/api/v3/content/resolve/:content-source?_website={{website}}",
				  "protocol": "http",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"pf",
					"api",
					"v3",
					"content",
					"resolve",
					":content-source"
				  ],
				  "query": [
					{
					  "key": "_website",
					  "value": "{{website}}",
					  "description": "The website to look up content for. If empty, this will be appended automatically by the public origin"
					},
					{
					  "key": "query",
					  "value": "<string>",
					  "description": "Elastic search query",
					  "disabled": true
					}
				  ],
				  "variable": [
					{
					  "key": "content-source",
					  "value": ""
					}
				  ]
				},
				"description": "Resolve a query into the upstream url used to fetch content. This endpoint is used for debugging fetch requests."
			  },
			  "response": []
			},
			{
			  "name": "Clean cache",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "http://api.{{baseUrl}}/pf/api/v3/content/clear/:content-source?_website={{website}}",
				  "protocol": "http",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"pf",
					"api",
					"v3",
					"content",
					"clear",
					":content-source"
				  ],
				  "query": [
					{
					  "key": "_website",
					  "value": "{{website}}",
					  "description": "The website to look up content for. If empty, this will be appended automatically by the public origin"
					},
					{
					  "key": "query",
					  "value": ":query",
					  "description": "Elastic search query",
					  "disabled": true
					}
				  ],
				  "variable": [
					{
					  "key": "content-source",
					  "value": ""
					}
				  ]
				},
				"description": "Clear the cache of a specific piece of content, using the content source and query specified."
			  },
			  "response": []
			},
			{
			  "name": "Update cache",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "http://api.{{baseUrl}}/pf/api/v3/content/update/:content-source?_website={{website}}",
				  "protocol": "http",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"pf",
					"api",
					"v3",
					"content",
					"update",
					":content-source"
				  ],
				  "query": [
					{
					  "key": "_website",
					  "value": "{{website}}",
					  "description": "The website to look up content for. If empty, this will be appended automatically by the public origin"
					},
					{
					  "key": "query",
					  "value": ":query",
					  "description": "Elastic search query",
					  "disabled": true
					}
				  ],
				  "variable": [
					{
					  "key": "content-source",
					  "value": ""
					}
				  ]
				},
				"description": "Update the cache for a specific piece of content, using the content source and query specified."
			  },
			  "response": []
			}
		  ],
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		},
		{
		  "name": "deployments",
		  "item": [
			{
			  "name": "Get Classic Deployments",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "http://api.{{baseUrl}}/pf/api/v3/deployments/pagebuilder/services",
				  "protocol": "http",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"pf",
					"api",
					"v3",
					"deployments",
					"pagebuilder",
					"services"
				  ]
				}
			  },
			  "response": []
			},
			{
			  "name": "Get Fusion Deployments",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "http://api.{{baseUrl}}/pf/api/v3/deployments/fusion/services",
				  "protocol": "http",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"pf",
					"api",
					"v3",
					"deployments",
					"fusion",
					"services"
				  ]
				}
			  },
			  "response": []
			}
		  ],
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		},
		{
		  "name": "rendering",
		  "item": [
			{
			  "name": "page",
			  "item": [
				{
				  "name": "Render Page",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "http://api.{{baseUrl}}/pf/api/v3/render/page?outputType=default&_website={{website}}",
					  "protocol": "http",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"pf",
						"api",
						"v3",
						"render",
						"page"
					  ],
					  "query": [
						{
						  "key": "outputType",
						  "value": "default",
						  "description": "The output type to render"
						},
						{
						  "key": "_website",
						  "value": "{{website}}"
						}
					  ]
					},
					"description": "Render the specified page/rendering/template/chain/feature by id as HTML. If generating a page/rendering/template, the result will be wrapped in the appropriate output-type (either as specified, or the default) and is suitable as a complete webpage. If generating a chain/feature, the containing page/rendering/template must be specified, and the resultant HTML will be only the chain/feature requested, with no output-type wrapping. A page/rendering/template may be rendered without an output-type wrapping by specifying outputType=false.\n\nTo render with global content, use a POST request where the body of the request contains a JSON object with top-level content property. The body may also contain the id (and will take precedence over the URI)."
				  },
				  "response": []
				},
				{
				  "name": "Render Page By Id",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "http://api.{{baseUrl}}/pf/api/v3/render/page/:id/?outputType=default&_website={{website}}",
					  "protocol": "http",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"pf",
						"api",
						"v3",
						"render",
						"page",
						":id",
						""
					  ],
					  "query": [
						{
						  "key": "outputType",
						  "value": "default",
						  "description": "The output type to render"
						},
						{
						  "key": "_website",
						  "value": "{{website}}"
						}
					  ],
					  "variable": [
						{
						  "key": "id",
						  "value": ""
						}
					  ]
					},
					"description": "Render the specified page/rendering/template/chain/feature by id as HTML. If generating a page/rendering/template, the result will be wrapped in the appropriate output-type (either as specified, or the default) and is suitable as a complete webpage. If generating a chain/feature, the containing page/rendering/template must be specified, and the resultant HTML will be only the chain/feature requested, with no output-type wrapping. A page/rendering/template may be rendered without an output-type wrapping by specifying outputType=false.\n\nTo render with global content, use a POST request where the body of the request contains a JSON object with top-level content property. The body may also contain the id (and will take precedence over the URI)."
				  },
				  "response": []
				},
				{
				  "name": "Render Page By Component ID",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "http://api.{{baseUrl}}/pf/api/v3/render/page/:id/:child-id?outputType=default&_website={{website}}",
					  "protocol": "http",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"pf",
						"api",
						"v3",
						"render",
						"page",
						":id",
						":child-id"
					  ],
					  "query": [
						{
						  "key": "outputType",
						  "value": "default",
						  "description": "The output type to render"
						},
						{
						  "key": "_website",
						  "value": "{{website}}"
						}
					  ],
					  "variable": [
						{
						  "key": "id",
						  "value": ""
						},
						{
						  "key": "child-id",
						  "value": ""
						}
					  ]
					},
					"description": "Render the specified page/rendering/template/chain/feature by id as HTML. If generating a page/rendering/template, the result will be wrapped in the appropriate output-type (either as specified, or the default) and is suitable as a complete webpage. If generating a chain/feature, the containing page/rendering/template must be specified, and the resultant HTML will be only the chain/feature requested, with no output-type wrapping. A page/rendering/template may be rendered without an output-type wrapping by specifying outputType=false.\n\nTo render with global content, use a POST request where the body of the request contains a JSON object with top-level content property. The body may also contain the id (and will take precedence over the URI)."
				  },
				  "response": []
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			},
			{
			  "name": "rendering",
			  "item": [
				{
				  "name": "Rendering",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "http://api.{{baseUrl}}/pf/api/v3/render/rendering?outputType=default&_website={{website}}",
					  "protocol": "http",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"pf",
						"api",
						"v3",
						"render",
						"rendering"
					  ],
					  "query": [
						{
						  "key": "outputType",
						  "value": "default",
						  "description": "The output type to render"
						},
						{
						  "key": "_website",
						  "value": "{{website}}"
						}
					  ]
					},
					"description": "Render the specified page/rendering/template/chain/feature by id as HTML. If generating a page/rendering/template, the result will be wrapped in the appropriate output-type (either as specified, or the default) and is suitable as a complete webpage. If generating a chain/feature, the containing page/rendering/template must be specified, and the resultant HTML will be only the chain/feature requested, with no output-type wrapping. A page/rendering/template may be rendered without an output-type wrapping by specifying outputType=false.\n\nTo render with global content, use a POST request where the body of the request contains a JSON object with top-level content property. The body may also contain the id (and will take precedence over the URI)."
				  },
				  "response": []
				},
				{
				  "name": "Rendering By Id",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "http://api.{{baseUrl}}/pf/api/v3/render/rendering/:id/?outputType=default&_website={{website}}",
					  "protocol": "http",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"pf",
						"api",
						"v3",
						"render",
						"rendering",
						":id",
						""
					  ],
					  "query": [
						{
						  "key": "outputType",
						  "value": "default",
						  "description": "The output type to render"
						},
						{
						  "key": "_website",
						  "value": "{{website}}"
						}
					  ],
					  "variable": [
						{
						  "key": "id",
						  "value": ""
						}
					  ]
					},
					"description": "Render the specified page/rendering/template/chain/feature by id as HTML. If generating a page/rendering/template, the result will be wrapped in the appropriate output-type (either as specified, or the default) and is suitable as a complete webpage. If generating a chain/feature, the containing page/rendering/template must be specified, and the resultant HTML will be only the chain/feature requested, with no output-type wrapping. A page/rendering/template may be rendered without an output-type wrapping by specifying outputType=false.\n\nTo render with global content, use a POST request where the body of the request contains a JSON object with top-level content property. The body may also contain the id (and will take precedence over the URI)."
				  },
				  "response": []
				},
				{
				  "name": "Rendering By Component ID",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "http://api.{{baseUrl}}/pf/api/v3/render/rendering/:id/:child-id?outputType=default&_website={{website}}",
					  "protocol": "http",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"pf",
						"api",
						"v3",
						"render",
						"rendering",
						":id",
						":child-id"
					  ],
					  "query": [
						{
						  "key": "outputType",
						  "value": "default",
						  "description": "The output type to render"
						},
						{
						  "key": "_website",
						  "value": "{{website}}"
						}
					  ],
					  "variable": [
						{
						  "key": "id",
						  "value": ""
						},
						{
						  "key": "child-id",
						  "value": ""
						}
					  ]
					},
					"description": "Render the specified page/rendering/template/chain/feature by id as HTML. If generating a page/rendering/template, the result will be wrapped in the appropriate output-type (either as specified, or the default) and is suitable as a complete webpage. If generating a chain/feature, the containing page/rendering/template must be specified, and the resultant HTML will be only the chain/feature requested, with no output-type wrapping. A page/rendering/template may be rendered without an output-type wrapping by specifying outputType=false.\n\nTo render with global content, use a POST request where the body of the request contains a JSON object with top-level content property. The body may also contain the id (and will take precedence over the URI)."
				  },
				  "response": []
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			},
			{
			  "name": "template",
			  "item": [
				{
				  "name": "Render Template",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "http://api.{{baseUrl}}/pf/api/v3/render/template?outputType=default&_website={{website}}",
					  "protocol": "http",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"pf",
						"api",
						"v3",
						"render",
						"template"
					  ],
					  "query": [
						{
						  "key": "outputType",
						  "value": "default",
						  "description": "The output type to render"
						},
						{
						  "key": "_website",
						  "value": "{{website}}"
						}
					  ]
					},
					"description": "Render the specified page/rendering/template/chain/feature by id as HTML. If generating a page/rendering/template, the result will be wrapped in the appropriate output-type (either as specified, or the default) and is suitable as a complete webpage. If generating a chain/feature, the containing page/rendering/template must be specified, and the resultant HTML will be only the chain/feature requested, with no output-type wrapping. A page/rendering/template may be rendered without an output-type wrapping by specifying outputType=false.\n\nTo render with global content, use a POST request where the body of the request contains a JSON object with top-level content property. The body may also contain the id (and will take precedence over the URI)."
				  },
				  "response": []
				},
				{
				  "name": "Render Template By Id",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "http://api.{{baseUrl}}/pf/api/v3/render/template/:id/?outputType=default&_website={{website}}",
					  "protocol": "http",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"pf",
						"api",
						"v3",
						"render",
						"template",
						":id",
						""
					  ],
					  "query": [
						{
						  "key": "outputType",
						  "value": "default",
						  "description": "The output type to render"
						},
						{
						  "key": "_website",
						  "value": "{{website}}"
						}
					  ],
					  "variable": [
						{
						  "key": "id",
						  "value": ""
						}
					  ]
					},
					"description": "Render the specified page/rendering/template/chain/feature by id as HTML. If generating a page/rendering/template, the result will be wrapped in the appropriate output-type (either as specified, or the default) and is suitable as a complete webpage. If generating a chain/feature, the containing page/rendering/template must be specified, and the resultant HTML will be only the chain/feature requested, with no output-type wrapping. A page/rendering/template may be rendered without an output-type wrapping by specifying outputType=false.\n\nTo render with global content, use a POST request where the body of the request contains a JSON object with top-level content property. The body may also contain the id (and will take precedence over the URI)."
				  },
				  "response": []
				},
				{
				  "name": "Render Template By Component ID",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "http://api.{{baseUrl}}/pf/api/v3/render/page/:id/:child-id?outputType=default&_website={{website}}",
					  "protocol": "http",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"pf",
						"api",
						"v3",
						"render",
						"page",
						":id",
						":child-id"
					  ],
					  "query": [
						{
						  "key": "outputType",
						  "value": "default",
						  "description": "The output type to render"
						},
						{
						  "key": "_website",
						  "value": "{{website}}"
						}
					  ],
					  "variable": [
						{
						  "key": "id",
						  "value": ""
						},
						{
						  "key": "child-id",
						  "value": ""
						}
					  ]
					},
					"description": "Render the specified page/rendering/template/chain/feature by id as HTML. If generating a page/rendering/template, the result will be wrapped in the appropriate output-type (either as specified, or the default) and is suitable as a complete webpage. If generating a chain/feature, the containing page/rendering/template must be specified, and the resultant HTML will be only the chain/feature requested, with no output-type wrapping. A page/rendering/template may be rendered without an output-type wrapping by specifying outputType=false.\n\nTo render with global content, use a POST request where the body of the request contains a JSON object with top-level content property. The body may also contain the id (and will take precedence over the URI)."
				  },
				  "response": []
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			}
		  ],
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		},
		{
		  "name": "resolver",
		  "item": [
			{
			  "name": "resolve",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://api.{{baseUrl}}/pf/api/v3/resolve/:uri",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"pf",
					"api",
					"v3",
					"resolve",
					":uri"
				  ],
				  "variable": [
					{
					  "key": "uri",
					  "value": "",
					  "description": "The URI segment to resolve"
					}
				  ]
				},
				"description": "Resolve the trailing URI segment into a piece of global content and an associated page/template."
			  },
			  "response": []
			},
			{
			  "name": "make",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://api.{{baseUrl}}/pf/api/v3/make/:uri",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"pf",
					"api",
					"v3",
					"make",
					":uri"
				  ],
				  "variable": [
					{
					  "key": "uri",
					  "value": "",
					  "description": "The URI segment to resolve"
					}
				  ]
				},
				"description": "Resolve the trailing URI segment into a piece of global content and an associated page/template, then render the content into the template and return the resultant HTML."
			  },
			  "response": []
			}
		  ],
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		},
		{
		  "name": "assets",
		  "item": [
			{
			  "name": "{scripts}",
			  "item": [
				{
				  "name": "page",
				  "item": [
					{
					  "name": "page javascript",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/pf/api/v3/dist/page/:outputType.js",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"pf",
							"api",
							"v3",
							"dist",
							"page",
							":outputType.js"
						  ],
						  "variable": [
							{
							  "key": "outputType.js",
							  "value": "default",
							  "description": "the output type to get the javascript for"
							}
						  ]
						},
						"description": "This returns the javascript function that is used by the fusion engine to generate a rendering. It is used by the client-side browser to update the template, if necessary, as well as hydrate script functionality in the browser.\n\nPages and Templates should be referenced by id so that you will always receive the current published version. If you need an unpublished script, you must request it by rendering id.\n\nIf a request for a page/template is not found in S3, it will be generated on-demand, returned to the caller, and pushed to S3."
					  },
					  "response": []
					},
					{
					  "name": "page javascript by rendering id",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/pf/api/v3/dist/page/:id/:outputType.js",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"pf",
							"api",
							"v3",
							"dist",
							"page",
							":id",
							":outputType.js"
						  ],
						  "query": [
							{
							  "key": "useComponentLib",
							  "value": "true",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "key": "id",
							  "value": "",
							  "description": "rendering id"
							},
							{
							  "key": "outputType.js",
							  "value": "default",
							  "description": "The output type to return these scripts for"
							}
						  ]
						},
						"description": "This returns the javascript function that is used by the fusion engine to generate a rendering. It is used by the client-side browser to update the template, if necessary, as well as hydrate script functionality in the browser.\n\nPages and Templates should be referenced by id so that you will always receive the current published version. If you need an unpublished script, you must request it by rendering id.\n\nIf a request for a page/template is not found in S3, it will be generated on-demand, returned to the caller, and pushed to S3."
					  },
					  "response": []
					},
					{
					  "name": "page javascript by rendering id Copy",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "POST",
						"header": [
						  {
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						  }
						],
						"body": {
						  "mode": "raw",
						  "raw": ""
						},
						"url": {
						  "raw": "https://api.{{baseUrl}}/pf/api/v3/dist/page/:id/:outputType.js",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"pf",
							"api",
							"v3",
							"dist",
							"page",
							":id",
							":outputType.js"
						  ],
						  "query": [
							{
							  "key": "useComponentLib",
							  "value": "true",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "key": "id",
							  "value": "",
							  "description": "rendering id"
							},
							{
							  "key": "outputType.js",
							  "value": "default",
							  "description": "The output type to return these scripts for"
							}
						  ]
						},
						"description": "This returns the javascript function that is used by the fusion engine to generate a rendering. It is used by the client-side browser to update the template, if necessary, as well as hydrate script functionality in the browser.\n\nPages and Templates should be referenced by id so that you will always receive the current published version. If you need an unpublished script, you must request it by rendering id.\n\nIf a request for a page/template is not found in S3, it will be generated on-demand, returned to the caller, and pushed to S3."
					  },
					  "response": []
					}
				  ],
				  "protocolProfileBehavior": {},
				  "_postman_isSubFolder": true
				},
				{
				  "name": "rendering",
				  "item": [
					{
					  "name": "rendering javascript",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/pf/api/v3/dist/rendering/:outputType.js",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"pf",
							"api",
							"v3",
							"dist",
							"rendering",
							":outputType.js"
						  ],
						  "variable": [
							{
							  "description": "the output type to get the javascript for",
							  "key": "outputType.js",
							  "value": "default"
							}
						  ]
						},
						"description": "This returns the javascript function that is used by the fusion engine to generate a rendering. It is used by the client-side browser to update the template, if necessary, as well as hydrate script functionality in the browser.\n\nPages and Templates should be referenced by id so that you will always receive the current published version. If you need an unpublished script, you must request it by rendering id.\n\nIf a request for a page/template is not found in S3, it will be generated on-demand, returned to the caller, and pushed to S3."
					  },
					  "response": []
					},
					{
					  "name": "rendering javascript by rendering id",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/pf/api/v3/dist/rendering/:id/:outputType.js",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"pf",
							"api",
							"v3",
							"dist",
							"rendering",
							":id",
							":outputType.js"
						  ],
						  "query": [
							{
							  "key": "useComponentLib",
							  "value": "true",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "description": "rendering id",
							  "key": "id",
							  "value": ""
							},
							{
							  "description": "The output type to return these scripts for",
							  "key": "outputType.js",
							  "value": "default"
							}
						  ]
						},
						"description": "This returns the javascript function that is used by the fusion engine to generate a rendering. It is used by the client-side browser to update the template, if necessary, as well as hydrate script functionality in the browser.\n\nPages and Templates should be referenced by id so that you will always receive the current published version. If you need an unpublished script, you must request it by rendering id.\n\nIf a request for a page/template is not found in S3, it will be generated on-demand, returned to the caller, and pushed to S3."
					  },
					  "response": []
					}
				  ],
				  "protocolProfileBehavior": {},
				  "_postman_isSubFolder": true
				},
				{
				  "name": "template",
				  "item": [
					{
					  "name": "template javascript",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/pf/api/v3/dist/template/:outputType.js",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"pf",
							"api",
							"v3",
							"dist",
							"template",
							":outputType.js"
						  ],
						  "variable": [
							{
							  "description": "the output type to get the javascript for",
							  "key": "outputType.js",
							  "value": "default"
							}
						  ]
						},
						"description": "This returns the javascript function that is used by the fusion engine to generate a rendering. It is used by the client-side browser to update the template, if necessary, as well as hydrate script functionality in the browser.\n\nPages and Templates should be referenced by id so that you will always receive the current published version. If you need an unpublished script, you must request it by rendering id.\n\nIf a request for a page/template is not found in S3, it will be generated on-demand, returned to the caller, and pushed to S3."
					  },
					  "response": []
					},
					{
					  "name": "template javascript by rendering id",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/pf/api/v3/dist/template/:id/:outputType.js",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"pf",
							"api",
							"v3",
							"dist",
							"template",
							":id",
							":outputType.js"
						  ],
						  "query": [
							{
							  "key": "useComponentLib",
							  "value": "true",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "description": "rendering id",
							  "key": "id",
							  "value": ""
							},
							{
							  "description": "The output type to return these scripts for",
							  "key": "outputType.js",
							  "value": "default"
							}
						  ]
						},
						"description": "This returns the javascript function that is used by the fusion engine to generate a rendering. It is used by the client-side browser to update the template, if necessary, as well as hydrate script functionality in the browser.\n\nPages and Templates should be referenced by id so that you will always receive the current published version. If you need an unpublished script, you must request it by rendering id.\n\nIf a request for a page/template is not found in S3, it will be generated on-demand, returned to the caller, and pushed to S3."
					  },
					  "response": []
					}
				  ],
				  "protocolProfileBehavior": {},
				  "_postman_isSubFolder": true
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			},
			{
			  "name": "{styles}",
			  "item": [
				{
				  "name": "page css styles",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/pf/api/v3/dist/page/:id.css",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"pf",
						"api",
						"v3",
						"dist",
						"page",
						":id.css"
					  ],
					  "variable": [
						{
						  "description": "In the format id.hash.css",
						  "key": "id.css",
						  "value": "<string>.<string>.css"
						}
					  ]
					}
				  },
				  "response": []
				},
				{
				  "name": "template css styles",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/pf/api/v3/dist/tempate/:id.css",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"pf",
						"api",
						"v3",
						"dist",
						"tempate",
						":id.css"
					  ],
					  "variable": [
						{
						  "description": "In the format id.hash.css",
						  "key": "id.css",
						  "value": "<string>.<string>.css"
						}
					  ]
					}
				  },
				  "response": []
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			},
			{
			  "name": "resources",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": ""
				},
				"description": "Return static files as found in your bundle's /resources directory."
			  },
			  "response": []
			},
			{
			  "name": "fusion client side scripts",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://api.{{baseUrl}}/pf/api/v3/dist/engine/react.js",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"pf",
					"api",
					"v3",
					"dist",
					"engine",
					"react.js"
				  ]
				},
				"description": "This is the primary client-side library that is shared and used for all pages/templates. It is specific to a fusion release, and can be cached very aggressively."
			  },
			  "response": []
			}
		  ],
		  "description": "Assets are read significantly more frequently than they are written, so they will be stored in and served statically from S3.",
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		}
	  ],
	  "description": "All endpoints described below will be handled as displayed by the lambda function. However, the lambda functions will be exposed publicly at /pf/api/v3, so each endpoint must be prefixed to be accessed.\n\nAll requests that begin with /pf/dist or /pf/resources will be handled as if prefixed with /pf/api/v3/dist. All other requests that do not begin with /pf/api/v3 will be handled as /pf/api/v3/make/:request_uri.\n\nDocumentation is also available at: https://redirector.arcpublishing.com/alc/arc-products/pagebuilder/fusion/documentation/api/http/API.md?version=2.4",
	  "event": [
		{
		  "listen": "prerequest",
		  "script": {
			"id": "ab567772-6589-4889-9cc5-2e0fb00da340",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		},
		{
		  "listen": "test",
		  "script": {
			"id": "70c01307-6343-4a47-95bf-64ae0101a5a8",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		}
	  ],
	  "protocolProfileBehavior": {}
	},
	{
	  "name": "Validate ANS",
	  "item": [
		{
		  "name": "JSON",
		  "event": [
			{
			  "listen": "prerequest",
			  "script": {
				"id": "8d4fb8ad-fab5-46ec-8bcd-d1518e02a561",
				"exec": [
				  ""
				],
				"type": "text/javascript"
			  }
			},
			{
			  "listen": "test",
			  "script": {
				"id": "14f967ce-f98f-449b-b80a-9c2ec318a241",
				"exec": [
				  ""
				],
				"type": "text/javascript"
			  }
			}
		  ],
		  "request": {
			"auth": {
			  "type": "noauth"
			},
			"method": "POST",
			"header": [
			  {
				"key": "Content-Type",
				"value": "application/json"
			  }
			],
			"body": {
			  "mode": "raw",
			  "raw": "{\n\t\"type\":\"story\",\n\t\"version\":\"0.10.4\",\n\t\"_id\": \"my test story ID\"\n}",
			  "options": {
				"raw": {}
			  }
			},
			"url": {
			  "raw": "http://ans.arc2.nile.works/validate/:ans_version",
			  "protocol": "http",
			  "host": [
				"ans",
				"arc2",
				"nile",
				"works"
			  ],
			  "path": [
				"validate",
				":ans_version"
			  ],
			  "variable": [
				{
				  "key": "ans_version",
				  "value": "0.10.4"
				}
			  ]
			},
			"description": "To run this locally please see the README at https://github.com/washingtonpost/ans-schema. Otherwise paste your JSON into the body of the request and you will recieve true if this is valid for our ANS schema or an error message. Make sure your ans_version matches the ans_version in the body you are sending."
		  },
		  "response": []
		}
	  ],
	  "event": [
		{
		  "listen": "prerequest",
		  "script": {
			"id": "bbc42b57-b993-443f-aec5-d2c2afeebb88",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		},
		{
		  "listen": "test",
		  "script": {
			"id": "a0154cde-0d9e-4212-8807-f9344926a3fb",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		}
	  ],
	  "protocolProfileBehavior": {}
	},
	{
	  "name": "Video API",
	  "item": [
		{
		  "name": "Import Video With ANS",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "POST",
			"header": [
			  {
				"key": "Content-Type",
				"name": "Content-Type",
				"value": "application/json",
				"type": "text"
			  }
			],
			"body": {
			  "mode": "raw",
			  "raw": "{\n \"type\": \"video\",\n \"version\": \"0.6.2\",\n \"additional_properties\": {\n   \"platform\": \"desktop\",\n   \"videoCategory\": \"sample\"\n },\n \"credits\": {\n   \"by\": [\n     {\n       \"name\": \"Test Author\",\n       \"type\": \"author\",\n       \"org\": \"{{org}}\"\n     }\n   ]\n },\n \"description\": {\n   \"basic\": \"Sample description\"\n },\n \"headlines\": {\n   \"basic\": \"Sample Title\",\n   \"meta_title\": \"Sample Meta Title\"\n },\n \"promo_items\": {\n   \"basic\": {\n     \"type\": \"image\",\n     \"version\": \"0.6.2\",\n     \"url\": \"https://fakeimg.pl/250x100/\",\n     \"width\": 100,\n     \"height\": 250,\n     \"credits\": {}\n   }\n },\n \"revision\": {\n   \"published\": false\n },\n \"streams\": [\n   {\n     \"url\": \"https://url.your-video-stream.mp4\",\n     \"width\": 100,\n     \"height\": 250\n   }\n ],\n \"taxonomy\": {\n   \"primary_section\": {\n     \"type\": \"reference\",\n     \"referent\": {\n       \"id\": \"/testSection\",\n       \"type\": \"section\",\n       \"website\": \"{{website}}\"\n     }\n   },\n   \"sections\": [\n     {\n       \"type\": \"reference\",\n       \"referent\": {\n         \"id\": \"/testSection\",\n         \"type\": \"section\",\n         \"website\": \"{{website}}\"\n       }\n     }\n   ]\n },\n \"websites\": {\n   \"{{website}}\": {}\n },\n \"canonical_website\": \"{{website}}\"\n}",
			  "options": {
				"raw": {}
			  }
			},
			"url": {
			  "raw": "https://api.{{baseUrl}}/goldfish/video/v2/import/ans",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"goldfish",
				"video",
				"v2",
				"import",
				"ans"
			  ]
			}
		  },
		  "response": []
		}
	  ],
	  "description": "Documentation is available at: https://redirector.arcpublishing.com/alc/docs/swagger/?url=./arc-products/video-api.json and https://redirector.arcpublishing.com/alc/docs/swagger/?url=./arc-products/video-center.json",
	  "event": [
		{
		  "listen": "prerequest",
		  "script": {
			"id": "001a000b-4101-4445-9b11-72cec6f53cf4",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		},
		{
		  "listen": "test",
		  "script": {
			"id": "e8c724c6-3fbb-412d-88ec-901d4cdd107a",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		}
	  ],
	  "protocolProfileBehavior": {}
	},
	{
	  "name": "Subscription API",
	  "item": [
		{
		  "name": "Identity",
		  "item": [
			{
			  "name": "Signup",
			  "event": [
				{
				  "listen": "prerequest",
				  "script": {
					"id": "42014af7-950c-4c56-b615-41ebf581820b",
					"exec": [
					  ""
					],
					"type": "text/javascript"
				  }
				}
			  ],
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "POST",
				"header": [
				  {
					"key": "Content-Type",
					"name": "Content-Type",
					"value": "application/json",
					"type": "text"
				  },
				  {
					"key": "Arc-Organization",
					"value": "{{org}}",
					"type": "text"
				  },
				  {
					"key": "Arc-Site",
					"value": "{{website}}",
					"type": "text"
				  }
				],
				"body": {
				  "mode": "raw",
				  "raw": "{\n  \"identity\": {\n    \"userName\": \"test\",\n    \"password\": \"Supers3cret!\",\n    \"grantType\": \"password\"\n  },\n  \"profile\": {\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"secondLastName\": \"User\",\n    \"displayName\": \"Test User\",\n    \"gender\": \"MALE\",\n    \"email\": \"test@email.com\",\n    \"picture\": \"image.jpg\",\n    \"dob\": \"01-01-1998\",\n    \"contacts\": [\n      {\n        \"phone\": \"555-555-5555\",\n        \"type\": \"WORK\"\n      }\n    ],\n    \"addresses\": [\n      {\n        \"line1\": \"1234 Imaginary St.\",\n        \"line2\": \"PO BOX 1234\",\n        \"locality\": \"Springfield\",\n        \"region\": \"CA\",\n        \"postal\": \"60010\",\n        \"country\": \"US\",\n        \"type\": \"WORK\"\n      }\n    ],\n    \"attributes\": [\n      {\n        \"name\": \"KEY1\",\n        \"value\": \"VALUE 1\",\n        \"type\": \"String\"\n      }\n    ]\n  }\n}",
				  "options": {
					"raw": {}
				  }
				},
				"url": {
				  "raw": "https://{{subsOrg}}-{{website}}-{{subsEnv}}.api.arc-dns.net/identity/public/v1/signup",
				  "protocol": "https",
				  "host": [
					"{{subsOrg}}-{{website}}-{{subsEnv}}",
					"api",
					"arc-dns",
					"net"
				  ],
				  "path": [
					"identity",
					"public",
					"v1",
					"signup"
				  ]
				}
			  },
			  "response": []
			},
			{
			  "name": "Login",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "POST",
				"header": [
				  {
					"key": "Content-Type",
					"name": "Content-Type",
					"value": "application/json",
					"type": "text"
				  }
				],
				"body": {
				  "mode": "raw",
				  "raw": "{\n      \"userName\": \"test\",\n      \"password\": \"Supers3cret!\",\n      \"grantType\": \"password\"\n  }",
				  "options": {
					"raw": {}
				  }
				},
				"url": {
				  "raw": "https://{{subsOrg}}-{{website}}-{{subsEnv}}.api.arc-dns.net/identity/public/v1/auth/token",
				  "protocol": "https",
				  "host": [
					"{{subsOrg}}-{{website}}-{{subsEnv}}",
					"api",
					"arc-dns",
					"net"
				  ],
				  "path": [
					"identity",
					"public",
					"v1",
					"auth",
					"token"
				  ]
				}
			  },
			  "response": []
			},
			{
			  "name": "Get Profile",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://{{subsOrg}}-{{website}}-{{subsEnv}}.api.arc-dns.net/identity/public/v1/profile",
				  "protocol": "https",
				  "host": [
					"{{subsOrg}}-{{website}}-{{subsEnv}}",
					"api",
					"arc-dns",
					"net"
				  ],
				  "path": [
					"identity",
					"public",
					"v1",
					"profile"
				  ]
				}
			  },
			  "response": []
			}
		  ],
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		},
		{
		  "name": "Retail",
		  "item": [
			{
			  "name": "Generic Retail By SKU",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://{{subsOrg}}-{{website}}-{{subsEnv}}.api.arc-dns.net/retail/api/v1/product/sku/::sku",
				  "protocol": "https",
				  "host": [
					"{{subsOrg}}-{{website}}-{{subsEnv}}",
					"api",
					"arc-dns",
					"net"
				  ],
				  "path": [
					"retail",
					"api",
					"v1",
					"product",
					"sku",
					"::sku"
				  ],
				  "variable": [
					{
					  "description": "The item SKU code",
					  "key": ":sku",
					  "type": "string",
					  "value": "test-item"
					}
				  ]
				}
			  },
			  "response": []
			}
		  ],
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		}
	  ],
	  "protocolProfileBehavior": {}
	},
	{
	  "name": "Tags API",
	  "item": [
		{
		  "name": "Generic Tag Search",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "GET",
			"header": [],
			"url": {
			  "raw": "https://api.{{baseUrl}}/tags/v2/slugs?slug=test-tag",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"tags",
				"v2",
				"slugs"
			  ],
			  "query": [
				{
				  "key": "slug",
				  "value": "test-tag",
				  "description": "The tag you want to search for"
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Generic Tag Edit",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "POST",
			"header": [],
			"url": {
			  "raw": "https://api.{{baseUrl}}/tags/edit",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"tags",
				"edit"
			  ]
			}
		  },
		  "response": []
		}
	  ],
	  "description": "Documentation is available at: https://redirector.arcpublishing.com/alc/docs/swagger/?url=./arc-products/tags.json",
	  "event": [
		{
		  "listen": "prerequest",
		  "script": {
			"id": "49f61ce7-35e9-4985-b0d4-3cecdb408ad9",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		},
		{
		  "listen": "test",
		  "script": {
			"id": "74a9e69e-5f06-4c3e-80b3-9dc63e555066",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		}
	  ],
	  "protocolProfileBehavior": {}
	},
	{
	  "name": "Story API (Deprecated)",
	  "item": [
		{
		  "name": "v1",
		  "item": [
			{
			  "name": "{id}",
			  "item": [
				{
				  "name": "{edition}",
				  "item": [
					{
					  "name": "Get a Story Edition",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [
						  {
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						  }
						],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id/edition/:edition",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v1",
							"story",
							":_id",
							"edition",
							":edition"
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							},
							{
							  "key": "edition",
							  "value": ""
							}
						  ]
						},
						"description": "Get the the specified edition of a story"
					  },
					  "response": [
						{
						  "name": "Get a Story Edition",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id/edition/:edition",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"story",
								"v1",
								"story",
								":_id",
								"edition",
								":edition"
							  ],
							  "variable": [
								{
								  "key": "_id",
								  "value": ""
								},
								{
								  "key": "edition",
								  "value": ""
								}
							  ]
							}
						  },
						  "_postman_previewlanguage": null,
						  "header": null,
						  "cookie": [],
						  "body": "{\n   \"revision\": {\n     \"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\"\n     \"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n   },\n   \"publish_date\": \"2015-06-24T09:50:50.52Z\",\n   \"headlines\": {\n     \"default\": \"A Less Normal Story\"\n   },\n   \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n   \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\",\n   \"content_elements\": [\n     {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times,...\"\n     },\n     {\n       \"_id\": \"26EJ3DX2ENC5BIH7WBYVQIMYYE\",\n       \"type\": \"text\",\n       \"text\": \"...it was the worst of times.\"\n     }\n   ]\n}"
						}
					  ]
					},
					{
					  "name": "History for a Story Edition",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id/edition/:edition/history",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v1",
							"story",
							":_id",
							"edition",
							":edition",
							"history"
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							},
							{
							  "key": "edition",
							  "value": ""
							}
						  ]
						},
						"description": "Publish the provided revision of a story to the specified edition. Returns all the revisions that this edition has pointed to and the timestamps of when they were set/unset. The history of edition values is presented in chronological order as a JSON array.  If an item in this list does not have a revision property, it should be considered to be an \"unpublish\" (DELETE) action. Otherwise, it should be considered to be a \"publish\" (PUT) action. All dates are presented for all actions as stored in the database."
					  },
					  "response": [
						{
						  "name": "History for a Story Edition",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id/edition/:edition/history",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"story",
								"v1",
								"story",
								":_id",
								"edition",
								":edition",
								"history"
							  ],
							  "variable": [
								{
								  "key": "_id",
								  "value": ""
								},
								{
								  "key": "edition",
								  "value": ""
								}
							  ]
							}
						  },
						  "_postman_previewlanguage": null,
						  "header": null,
						  "cookie": [],
						  "body": "[\n  {\n    \"_id\":\"C3RED6ISKVGSVA3TWQ7Z5LG5AI\",\n    \"last_updated_date\":\"2016-06-15T15:16:42.141Z\",\n    \"headlines\":{\"basic\":\"Test Greg Foo\"},\n    \"revision\": { \n      \"revision_id\":\"NSYHFE7JMNA5THLONLJ4U77GFU\",\n      \"parent_id\":\"6ZLRO4YQ5RAIRHS5YR545CRSUY\",\n      \"branch\":\"default\"\n    },\n    \"type\":\"story\",\n    \"edition_date\":\"2016-06-15T15:17:43.497Z\",\n    \"publish_date\":\"2016-06-15T15:17:43.497Z\",\n    \"display_date\":\"2016-06-15T15:17:43.497Z\"\n  },\n  {\n    \"_id\":\"C3RED6ISKVGSVA3TWQ7Z5LG5AI\",\n    \"last_updated_date\":\"2016-06-15T15:14:27.813Z\",\n    \"headlines\":{\"basic\":\"Test Greg Foo\"},\n    \"type\":\"story\",\n    \"edition_date\":\"2016-06-15T15:21:25.868Z\",\n    \"publish_date\":\"2016-06-15T15:21:25.868Z\",\n    \"display_date\":\"2016-06-15T15:21:25.868Z\"\n  }\n  {\n    \"_id\":\"C3RED6ISKVGSVA3TWQ7Z5LG5AI\",\n    \"last_updated_date\":\"2016-06-15T15:16:42.141Z\",\n    \"headlines\": {\"basic\":\"Test Greg Foo\"},\n    \"revision\": {\n      \"revision_id\":\"NSYHFE7JMNA5THLONLJ4U77GFU\",\n      \"parent_id\":\"6ZLRO4YQ5RAIRHS5YR545CRSUY\",\n      \"branch\":\"default\"\n    },\n    \"type\":\"story\",\n    \"edition_date\":\"2016-06-15T15:18:00.314Z\",\n    \"publish_date\":\"2016-06-15T15:18:00.314Z\",\n    \"display_date\":\"2016-06-15T15:17:43.497Z\"\n  }\n]"
						}
					  ]
					},
					{
					  "name": "Publish a Story Edition",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "PUT",
						"header": [
						  {
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						  }
						],
						"body": {
						  "mode": "raw",
						  "raw": "{\n   \"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n   \"publish_date\": \"2015-06-24T09:50:50.52Z\",\n   \"display_date\": \"2015-06-20T12:01:00.0Z\"\n} "
						},
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id/edition/:edition",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v1",
							"story",
							":_id",
							"edition",
							":edition"
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							},
							{
							  "key": "edition",
							  "value": ""
							}
						  ]
						},
						"description": "Publish the provided revision of a story to the specified edition.\n\n`revision_id` is required. The unique revision id to publish.\n\n`publish_date` is the RFC3339-formatted timestamp when this edition is considered to have been published. (This will populate in the story object only on requests to retrieve this edition).\n\n`display_date` is the RFC3339-formatted timestamp when this story is considered to have been published. (This will populate in the story object only on requests to retrieve this edition)."
					  },
					  "response": [
						{
						  "name": "Publish a Story Edition",
						  "originalRequest": {
							"method": "PUT",
							"header": [
							  {
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							  }
							],
							"body": {
							  "mode": "raw",
							  "raw": "{\n   \"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n   \"publish_date\": \"2015-06-24T09:50:50.52Z\",\n   \"display_date\": \"2015-06-20T12:01:00.0Z\"\n} "
							},
							"url": {
							  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id/edition/:edition",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"story",
								"v1",
								"story",
								":_id",
								"edition",
								":edition"
							  ],
							  "variable": [
								{
								  "key": "_id",
								  "value": ""
								},
								{
								  "key": "edition",
								  "value": ""
								}
							  ]
							}
						  },
						  "_postman_previewlanguage": null,
						  "header": null,
						  "cookie": [],
						  "body": "{\n   \"revision\": {\n     \"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\"\n     \"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n   },\n   \"headlines\": {\n     \"default\": \"A Less Normal Story\"\n   },\n   \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n   \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\",\n   \"publish_date\": \"2015-06-24T09:50:50.52Z\",\n   \"display_date\": \"2015-06-20T12:01:00.0Z\",\n   \"content_elements\": [\n     {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times,...\"\n     },\n     {\n       \"_id\": \"26EJ3DX2ENC5BIH7WBYVQIMYYE\",\n       \"type\": \"text\",\n       \"text\": \"...it was the worst of times.\"\n     }\n   ]\n}"
						}
					  ]
					},
					{
					  "name": "Unpublish a Story Edition",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "DELETE",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id/edition/:edition",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v1",
							"story",
							":_id",
							"edition",
							":edition"
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							},
							{
							  "key": "edition",
							  "value": ""
							}
						  ]
						},
						"description": "Unpublish the specified edition"
					  },
					  "response": []
					}
				  ],
				  "description": "Get a story's editions.\n\nDates in Edition Request/Responses\n\n`last_updated_date` is the date that the revision was created (api-generated - users cannot change this)\n\n`edition_date` is the date that the edition was created (api-generated - users cannot change this)\n\n`publish_date` is the date that the particular edition should be considered to have been created (set in the \"Publish an edition\" endpoint). This should mainly be used if you are importing data from legacy systems and want to preserve real publish timestamps for logging purposes.  If not set, it will default to be the same as edition_date.\n\n`display_date` is the date that should display to end-users (set in the \"Publish an edition\" endppoint). If not set, it will default to the previous edition_date in the history sequence. (For the first edition, it will default to publish_date.)",
				  "event": [
					{
					  "listen": "prerequest",
					  "script": {
						"id": "5f879a72-3265-4e76-86a9-a6d51040edea",
						"type": "text/javascript",
						"exec": [
						  ""
						]
					  }
					},
					{
					  "listen": "test",
					  "script": {
						"id": "278f94d1-8a1c-41b5-9557-c8b3ef4cdb10",
						"type": "text/javascript",
						"exec": [
						  ""
						]
					  }
					}
				  ],
				  "protocolProfileBehavior": {},
				  "_postman_isSubFolder": true
				},
				{
				  "name": "{revision}",
				  "item": [
					{
					  "name": "Revision List",
					  "request": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id/revision",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v1",
							"story",
							":_id",
							"revision"
						  ],
						  "query": [
							{
							  "key": "limit",
							  "value": "10",
							  "description": "How many results to return, defaults to 10 (optional)",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							}
						  ]
						},
						"description": "Get a list of revisions for a specific story"
					  },
					  "response": []
					},
					{
					  "name": "Revision by ID",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id/revision/:revision",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v1",
							"story",
							":_id",
							"revision",
							":revision"
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							},
							{
							  "key": "revision",
							  "value": ""
							}
						  ]
						},
						"description": "Equivalent to GET /story/:id?revision={revision_id}"
					  },
					  "response": []
					}
				  ],
				  "description": "Get revisions for a story",
				  "protocolProfileBehavior": {},
				  "_postman_isSubFolder": true
				},
				{
				  "name": "{branch}",
				  "item": [
					{
					  "name": "List of All Branches",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id//branch",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v1",
							"story",
							":_id",
							"",
							"branch"
						  ],
						  "query": [
							{
							  "key": "limit",
							  "value": "10",
							  "description": "How many results to return, defaults to 10 (optional)",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							}
						  ]
						},
						"description": "Return a list of branches for this story"
					  },
					  "response": [
						{
						  "name": "List of All Branches",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id//branch",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"story",
								"v1",
								"story",
								":_id",
								"",
								"branch"
							  ],
							  "query": [
								{
								  "key": "limit",
								  "value": "10",
								  "description": "How many results to return, defaults to 10 (optional)",
								  "disabled": true
								}
							  ],
							  "variable": [
								{
								  "key": "_id",
								  "value": ""
								}
							  ]
							}
						  },
						  "_postman_previewlanguage": null,
						  "header": null,
						  "cookie": [],
						  "body": "[\n\t\"default\",\n\t\"branch-one\"\n]"
						}
					  ]
					},
					{
					  "name": "List of Revisions by Branch",
					  "request": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id//branch/:branch",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v1",
							"story",
							":_id",
							"",
							"branch",
							":branch"
						  ],
						  "query": [
							{
							  "key": "limit",
							  "value": "10",
							  "description": "Number of revisions to return, defaults to 10 (optional)",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							},
							{
							  "key": "branch",
							  "value": ""
							}
						  ]
						},
						"description": "Get the list of revisions for this branch"
					  },
					  "response": [
						{
						  "name": "List of Revisions by Branch",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id//branch/:branch",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"story",
								"v1",
								"story",
								":_id",
								"",
								"branch",
								":branch"
							  ],
							  "query": [
								{
								  "key": "limit",
								  "value": "10",
								  "description": "Number of revisions to return, defaults to 10 (optional)",
								  "disabled": true
								}
							  ],
							  "variable": [
								{
								  "key": "_id",
								  "value": ""
								},
								{
								  "key": "branch",
								  "value": ""
								}
							  ]
							}
						  },
						  "_postman_previewlanguage": null,
						  "header": null,
						  "cookie": [],
						  "body": "[\n  {\n    \"revision\": {\n      \"revision_id\": \"4YO3XCI5NZFT7PYEI6756MFM5U\",\n      \"parent_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n      \"branch\": \"default\"\n   },\n    \"last_updated_date\": \"2016-02-11T19:25:10.256Z\",\n    \"_id\": \"4B2NVBFMWVBB3B4OJ74JN6WU64\"\n  },\n  {\n    \"revision\": {\n      \"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n      \"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n      \"branch\": \"default\"\n    },\n    \"headlines\": {\n      \"default\": \"A Less Normal Story\"\n    },\n    \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n    \"_id\": \"4B2NVBFMWVBB3B4OJ74JN6WU64\"\n  },\n  {\n    \"revision\": {\n      \"revision_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n      \"branch\": \"default\"\n    },\n    \"headlines\": {\n      \"default\": \"A More Normal Story\"\n    },\n    \"last_updated_date\": \"2016-02-10T18:06:30.191Z\",\n    \"_id\": \"4B2NVBFMWVBB3B4OJ74JN6WU64\"\n  }\n]"
						}
					  ]
					},
					{
					  "name": "Delete a Branch",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "DELETE",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id//branch/:branch",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v1",
							"story",
							":_id",
							"",
							"branch",
							":branch"
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							},
							{
							  "key": "branch",
							  "value": ""
							}
						  ]
						},
						"description": "Delete the story branch and all revisions that live exclusively on it."
					  },
					  "response": []
					}
				  ],
				  "description": "Manage branches on a story",
				  "protocolProfileBehavior": {},
				  "_postman_isSubFolder": true
				},
				{
				  "name": "Story by ID",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id/",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"story",
						"v1",
						"story",
						":_id",
						""
					  ],
					  "query": [
						{
						  "key": "revision",
						  "value": "<string>",
						  "description": "Revision ID. If present, return this revision of the story. Cannot be used if branch also present. (optional)",
						  "disabled": true
						},
						{
						  "key": "branch",
						  "value": "default",
						  "description": "If present, return the latest revision in this branch of the story. Cannot be used if revision also present. (optional)",
						  "disabled": true
						}
					  ],
					  "variable": [
						{
						  "key": "_id",
						  "value": ""
						}
					  ]
					},
					"description": "Get the most recent revision of a story on the \"default\" branch, or the most recent revision on the specified branch, or the specified revision"
				  },
				  "response": [
					{
					  "name": "Get a Story by ID",
					  "originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id/",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v1",
							"story",
							":_id",
							""
						  ],
						  "query": [
							{
							  "key": "revision",
							  "value": "<string>",
							  "description": "Revision ID. If present, return this revision of the story. Cannot be used if branch also present. (optional)",
							  "disabled": true
							},
							{
							  "key": "branch",
							  "value": "default",
							  "description": "If present, return the latest revision in this branch of the story. Cannot be used if revision also present. (optional)",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							}
						  ]
						}
					  },
					  "_postman_previewlanguage": null,
					  "header": null,
					  "cookie": [],
					  "body": "{\n   \"revision\": {\n     \"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\"\n     \"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n   },\n   \"headlines\": {\n     \"default\": \"A Less Normal Story\"\n   },\n   \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n   \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\",\n   \"content_elements\": [\n     {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times,...\"\n     },\n     {\n       \"_id\": \"26EJ3DX2ENC5BIH7WBYVQIMYYE\",\n       \"type\": \"text\",\n       \"text\": \"...it was the worst of times.\"\n     }\n   ]\n}"
					}
				  ]
				},
				{
				  "name": "Delete a Story",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "DELETE",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/story/v1/story/:_id/",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"story",
						"v1",
						"story",
						":_id",
						""
					  ],
					  "variable": [
						{
						  "key": "_id",
						  "value": ""
						}
					  ]
					},
					"description": "Delete the story, and all branches and revisions"
				  },
				  "response": []
				}
			  ],
			  "description": "Get a story by ID",
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			},
			{
			  "name": "List of Stories",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://api.{{baseUrl}}/story/v1/story/",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"story",
					"v1",
					"story",
					""
				  ],
				  "query": [
					{
					  "key": "limit",
					  "value": "10",
					  "description": "How many stories to return, defaults to 10 maximum of 100 (optional)",
					  "disabled": true
					}
				  ]
				},
				"description": "Get a summary listing of the most recent n stories"
			  },
			  "response": [
				{
				  "name": "List of Stories",
				  "originalRequest": {
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/story/v1/story/",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"story",
						"v1",
						"story",
						""
					  ],
					  "query": [
						{
						  "key": "limit",
						  "value": "10",
						  "description": "How many stories to return, defaults to 10 maximum of 100 (optional)",
						  "disabled": true
						}
					  ]
					}
				  },
				  "_postman_previewlanguage": null,
				  "header": null,
				  "cookie": [],
				  "body": "[\n  {\n    \"revision\": {\n      \"revision_id\": \"4YO3XCI5NZFT7PYEI6756MFM5U\"\n    },\n    \"last_updated_date\": \"2016-02-11T19:25:10.256Z\",\n    \"_id\": \"4B2NVBFMWVBB3B4OJ74JN6WU64\"\n  },\n  {\n    \"revision\": {\n      \"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n      \"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\"\n    },\n    \"headlines\": {\n      \"default\": \"A Less Normal Story\"\n    },\n    \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n    \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\"\n  },\n  {\n    \"revision\": {\n      \"parent_id\": \"AD7I7FCY2NABHO73FRRGCDBST4\",\n      \"revision_id\": \"LKNLUP4RDBD6XCTQEB4KHNTDVY\"\n    },\n    \"headlines\": {\n      \"default\": \"A More Normal Story\"\n    },\n    \"last_updated_date\": \"2016-02-10T18:06:30.191Z\",\n    \"_id\": \"7QPHOCFDF5BFZKOEBMSPWI3E5Q\"\n  },\n  {\n    \"revision\": {\n      \"revision_id\": \"TPGR7G5D4ZALVM26XIUCA3NEIQ\"\n    },\n    \"last_updated_date\": \"2016-02-10T18:03:27.092Z\",\n    \"_id\": \"26EJ3DX2ENC5BIH7WBYVQIMYYE\"\n  }\n]"
				}
			  ]
			},
			{
			  "name": "Create A Story",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "POST",
				"header": [
				  {
					"key": "Content-Type",
					"value": "application/json",
					"type": "text"
				  }
				],
				"body": {
				  "mode": "raw",
				  "raw": "{\n   \"headlines\": {\n     \"default\": \"A Less Normal Story\"\n   },\n   \"content_elements\": [\n     {\n       \"type\":\"text\",\n       \"text\":\"It was the best of times,...\"\n     }\n   ]\n} "
				},
				"url": {
				  "raw": "https://api.{{baseUrl}}/story/v1/story/",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"story",
					"v1",
					"story",
					""
				  ]
				},
				"description": "Create a new story and store the provided content in a new revision in branch \"default\", or on the specified branch. When creating a new story, the story _id and revision should be omitted.  The _id on individual content elements may also be omitted."
			  },
			  "response": [
				{
				  "name": "Create A Story",
				  "originalRequest": {
					"method": "POST",
					"header": [
					  {
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					  }
					],
					"body": {
					  "mode": "raw",
					  "raw": "{\n   \"headlines\": {\n     \"default\": \"A Less Normal Story\"\n   },\n   \"content_elements\": [\n     {\n       \"type\":\"text\",\n       \"text\":\"It was the best of times,...\"\n     }\n   ]\n} "
					},
					"url": {
					  "raw": "https://api.{{baseUrl}}/story/v1/story/",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"story",
						"v1",
						"story",
						""
					  ]
					}
				  },
				  "_postman_previewlanguage": null,
				  "header": null,
				  "cookie": [],
				  "body": "{\n   \"revision\": {\n     \"revision_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n     \"parent_id\": null\n   },\n   \"headlines\": {\n     \"default\": \"A Less Normal Story\"\n   },\n   \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n   \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\",\n   \"content_elements\": [\n     {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times,...\"\n     }\n   ]\n}"
				}
			  ]
			},
			{
			  "name": "Create A Revision",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "PUT",
				"header": [
				  {
					"key": "Content-Type",
					"value": "application/json",
					"type": "text"
				  }
				],
				"body": {
				  "mode": "raw",
				  "raw": "{\n   \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\",\n   \"revision\": {\n     \"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\"\n   },\n   \"headlines\": {\n     \"default\": \"A More Normal Story\"\n   },\n   \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n   \"content_elements\": [\n     {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times...\"\n     },\n     {\n       \"type\": \"text\",\n       \"text\": \"...it was the worst of times.\"\n     }\n   ]\n}"
				},
				"url": {
				  "raw": "https://api.{{baseUrl}}/story/v2/story/",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"story",
					"v2",
					"story",
					""
				  ]
				},
				"description": "Create a new revision of a story, saving the provided content to a new revision in branch \"default\", or on the specified branch.\n\nThe story `_id` and `revision.parent_id` **must be included**, and revision.revision_id **must be omitted**. The `_id` on individual content elements may also be omitted.\n\nNote that when a caller PUTs a document to the server, `revision.parent_id` should be set to the value of `revision.revision_id` of the most recent version of the document on the branch being updated, and `revision.revision_id` should be empty.  In practice, this means clients you should GET a story, make any desired changes to the local copy, then perform something like this before PUTing the edited document back:\n\n```\nstory.revision.parent_id = story.revision.revision_id;\ndelete story.revision.revision_id;\n```"
			  },
			  "response": [
				{
				  "name": "Create A Revision",
				  "originalRequest": {
					"method": "PUT",
					"header": [
					  {
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					  }
					],
					"body": {
					  "mode": "raw",
					  "raw": "{\n   \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\",\n   \"revision\": {\n     \"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\"\n   },\n   \"headlines\": {\n     \"default\": \"A More Normal Story\"\n   },\n   \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n   \"content_elements\": [\n     {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times...\"\n     },\n     {\n       \"type\": \"text\",\n       \"text\": \"...it was the worst of times.\"\n     }\n   ]\n}"
					},
					"url": {
					  "raw": "https://api.{{baseUrl}}/story/v2/story/",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"story",
						"v2",
						"story",
						""
					  ]
					}
				  },
				  "_postman_previewlanguage": null,
				  "header": null,
				  "cookie": [],
				  "body": "{\n   \"revision\": {\n     \"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\"\n     \"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n   },\n   \"headlines\": {\n     \"default\": \"A Less Normal Story\"\n   },\n   \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n   \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\",\n   \"content_elements\": [\n     {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times,...\"\n     },\n     {\n       \"_id\": \"26EJ3DX2ENC5BIH7WBYVQIMYYE\",\n       \"type\": \"text\",\n       \"text\": \"...it was the worst of times.\"\n     }\n   ]\n}"
				}
			  ]
			}
		  ],
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		},
		{
		  "name": "v2",
		  "item": [
			{
			  "name": "{id}",
			  "item": [
				{
				  "name": "{edition}",
				  "item": [
					{
					  "name": "Get Story by Edition",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id/edition/:edition",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v2",
							"story",
							":_id",
							"edition",
							":edition"
						  ],
						  "query": [
							{
							  "key": "revision",
							  "value": null,
							  "description": "If present, return this revision of the story. Optional. Cannot be used if branch also present.",
							  "disabled": true
							},
							{
							  "key": "branch",
							  "value": null,
							  "description": "The branch name",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "description": "The ID of the story",
							  "key": "_id",
							  "type": "string",
							  "value": "test"
							},
							{
							  "description": "The edition of the story (ie web, mobile, default)",
							  "key": "edition",
							  "value": "default"
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "Get Story by Edition",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id/edition/:edition",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"story",
								"v2",
								"story",
								":_id",
								"edition",
								":edition"
							  ],
							  "query": [
								{
								  "key": "revision",
								  "value": null,
								  "description": "If present, return this revision of the story. Optional. Cannot be used if branch also present.",
								  "disabled": true
								},
								{
								  "key": "branch",
								  "value": null,
								  "description": "The branch name",
								  "disabled": true
								}
							  ],
							  "variable": [
								{
								  "description": "The ID of the story",
								  "key": "_id",
								  "type": "string",
								  "value": "test"
								},
								{
								  "description": "The edition of the story (ie web, mobile, default)",
								  "key": "edition",
								  "value": "default"
								}
							  ]
							}
						  },
						  "_postman_previewlanguage": "json",
						  "header": null,
						  "cookie": [],
						  "body": "{\n\t\"revision\": {\n\t\t\"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n\t\t\"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\"\n\t},\n\t\"publish_date\": \"2015-06-24T09:50:50.52Z\",\n\t\"headlines\": {\n\t\t\"default\": \"A Less Normal Story\"\n\t},\n\t\"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n\t\"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\",\n\t\"content_elements\": [\n    {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times,...\"\n    },\n\t{\n       \"_id\": \"26EJ3DX2ENC5BIH7WBYVQIMYYE\",\n       \"type\": \"text\",\n       \"text\": \"...it was the worst of times.\"\n     }\n   ]\n}"
						}
					  ]
					},
					{
					  "name": "Publish an Edition",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "PUT",
						"header": [
						  {
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						  }
						],
						"body": {
						  "mode": "raw",
						  "raw": "{\n\t\"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n\t\"publish_date\": \"2015-06-24T09:50:50.52Z\",\n\t\"display_date\": \"2015-06-20T12:01:00.0Z\"\n} "
						},
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v2/story/:id/edition/:edition",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v2",
							"story",
							":id",
							"edition",
							":edition"
						  ],
						  "variable": [
							{
							  "key": "id",
							  "value": "test",
							  "description": "The unique Story ID to publish"
							},
							{
							  "key": "edition",
							  "value": "default",
							  "description": "The unique name of the edition to publish (E.g., \"web\", \"print\", \"mobile\")"
							}
						  ]
						},
						"description": "Publishes a specific revision as a specific edition. Body of the request must include revision_id, published_date and display_date. Dates must be in RFC3339-formatted timestamps (these will populate in the story object only on requests to retrieve this edition)."
					  },
					  "response": [
						{
						  "name": "Publish an Edition",
						  "originalRequest": {
							"method": "PUT",
							"header": [
							  {
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							  }
							],
							"body": {
							  "mode": "raw",
							  "raw": "{\n\t\"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n\t\"publish_date\": \"2015-06-24T09:50:50.52Z\",\n\t\"display_date\": \"2015-06-20T12:01:00.0Z\"\n} "
							},
							"url": {
							  "raw": "https://api.{{baseUrl}}/story/v2/story/:id/edition/:edition",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"story",
								"v2",
								"story",
								":id",
								"edition",
								":edition"
							  ],
							  "variable": [
								{
								  "key": "id",
								  "value": "test"
								},
								{
								  "key": "edition",
								  "value": "default"
								}
							  ]
							}
						  },
						  "_postman_previewlanguage": "json",
						  "header": null,
						  "cookie": [],
						  "body": "{\n   \"revision\": {\n\t\t\"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n\t\t\"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\"\n   },\n   \"headlines\": {\n   \t\t\"default\": \"A Less Normal Story\"\n   \t\n   },\n   \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n   \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\",\n\t\"publish_date\": \"2015-06-24T09:50:50.52Z\",\n\t\"display_date\": \"2015-06-20T12:01:00.0Z\",\n   \"content_elements\": [\n     {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times,...\"\n     },\n\t{\n       \"_id\": \"26EJ3DX2ENC5BIH7WBYVQIMYYE\",\n       \"type\": \"text\",\n       \"text\": \"...it was the worst of times.\"\n     }\n   ]\n}\n"
						}
					  ]
					},
					{
					  "name": "Delete an Edition",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "DELETE",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v2/story/:id/edition/:edition",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v2",
							"story",
							":id",
							"edition",
							":edition"
						  ],
						  "variable": [
							{
							  "key": "id",
							  "value": ""
							},
							{
							  "key": "edition",
							  "value": ""
							}
						  ]
						},
						"description": "Remove a published edition of a story"
					  },
					  "response": []
					},
					{
					  "name": "Get Edition History",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v2/story/:id/edition/:edition/history",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v2",
							"story",
							":id",
							"edition",
							":edition",
							"history"
						  ],
						  "variable": [
							{
							  "key": "id",
							  "value": "test"
							},
							{
							  "key": "edition",
							  "value": "default"
							}
						  ]
						},
						"description": "The history of edition values is presented in chronological order as a JSON array.  If an item in this list does not have a revision property, it should be considered to be an \"unpublish\" (DELETE) action.  Otherwise, it should be considered to be a \"publish\" (PUT) action.  All dates are presented for all actions as stored in the database."
					  },
					  "response": [
						{
						  "name": "Get Edition History",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/story/v2/story/:id/edition/:edition/history",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"story",
								"v2",
								"story",
								":id",
								"edition",
								":edition",
								"history"
							  ],
							  "variable": [
								{
								  "key": "id",
								  "value": "test"
								},
								{
								  "key": "edition",
								  "value": "default"
								}
							  ]
							}
						  },
						  "_postman_previewlanguage": "json",
						  "header": null,
						  "cookie": [],
						  "body": "[\n  {\n    \"_id\":\"C3RED6ISKVGSVA3TWQ7Z5LG5AI\",\n    \"last_updated_date\":\"2016-06-15T15:16:42.141Z\",\n    \"headlines\":{\"basic\":\"Test Foo\"},\n    \"revision\": { \n      \"revision_id\":\"NSYHFE7JMNA5THLONLJ4U77GFU\",\n      \"parent_id\":\"6ZLRO4YQ5RAIRHS5YR545CRSUY\",\n      \"branch\":\"default\"\n    },\n    \"type\":\"story\",\n    \"edition_date\":\"2016-06-15T15:17:43.497Z\",\n    \"publish_date\":\"2016-06-15T15:17:43.497Z\",\n    \"display_date\":\"2016-06-15T15:17:43.497Z\"\n  },\n  {\n    \"_id\":\"C3RED6ISKVGSVA3TWQ7Z5LG5AI\",\n    \"last_updated_date\":\"2016-06-15T15:14:27.813Z\",\n    \"headlines\":{\"basic\":\"Test Foo 2\"},\n    \"type\":\"story\",\n    \"edition_date\":\"2016-06-15T15:21:25.868Z\",\n    \"publish_date\":\"2016-06-15T15:21:25.868Z\",\n    \"display_date\":\"2016-06-15T15:21:25.868Z\"\n  },\n  {\n    \"_id\":\"C3RED6ISKVGSVA3TWQ7Z5LG5AI\",\n    \"last_updated_date\":\"2016-06-15T15:16:42.141Z\",\n    \"headlines\": {\"basic\":\"Test Foo 1\"},\n    \"revision\": {\n      \"revision_id\":\"NSYHFE7JMNA5THLONLJ4U77GFU\",\n      \"parent_id\":\"6ZLRO4YQ5RAIRHS5YR545CRSUY\",\n      \"branch\":\"default\"\n    },\n    \"type\":\"story\",\n    \"edition_date\":\"2016-06-15T15:18:00.314Z\",\n    \"publish_date\":\"2016-06-15T15:18:00.314Z\",\n    \"display_date\":\"2016-06-15T15:17:43.497Z\"\n  }\n]"
						}
					  ]
					}
				  ],
				  "protocolProfileBehavior": {},
				  "_postman_isSubFolder": true
				},
				{
				  "name": "branch",
				  "item": [
					{
					  "name": "Get a List of All Branches",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id/branch",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v2",
							"story",
							":_id",
							"branch"
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							}
						  ]
						},
						"description": "Get a list of all created branches"
					  },
					  "response": [
						{
						  "name": "Get a List of All Branches",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id/branch",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"story",
								"v2",
								"story",
								":_id",
								"branch"
							  ],
							  "variable": [
								{
								  "key": "_id",
								  "value": ""
								}
							  ]
							}
						  },
						  "_postman_previewlanguage": "json",
						  "header": null,
						  "cookie": [],
						  "body": "[\n    \"default\",\n    \"branch-one\"\n]"
						}
					  ]
					},
					{
					  "name": "Get All Revisions on a Branch",
					  "request": {
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id/branch/:branch",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v2",
							"story",
							":_id",
							"branch",
							":branch"
						  ],
						  "query": [
							{
							  "key": "limit",
							  "value": "100",
							  "description": "Defaults to 100",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							},
							{
							  "key": "branch",
							  "value": ""
							}
						  ]
						}
					  },
					  "response": [
						{
						  "name": "Get All Revisions on a Branch",
						  "originalRequest": {
							"method": "GET",
							"header": [],
							"url": {
							  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id/branch/:branch",
							  "protocol": "https",
							  "host": [
								"api",
								"{{baseUrl}}"
							  ],
							  "path": [
								"story",
								"v2",
								"story",
								":_id",
								"branch",
								":branch"
							  ],
							  "query": [
								{
								  "key": "limit",
								  "value": "100",
								  "description": "Defaults to 100",
								  "disabled": true
								}
							  ],
							  "variable": [
								{
								  "key": "_id",
								  "value": ""
								},
								{
								  "key": "branch",
								  "value": ""
								}
							  ]
							}
						  },
						  "_postman_previewlanguage": "json",
						  "header": null,
						  "cookie": [],
						  "body": "[\n  {\n    \"revision\": {\n\t\t\"revision_id\": \"4YO3XCI5NZFT7PYEI6756MFM5U\",\n\t\t\"parent_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n\t\t\"branch\": \"default\"\n\t },\n\t \"last_updated_date\": \"2016-02-11T19:25:10.256Z\",\n\t \"_id\": \"4B2NVBFMWVBB3B4OJ74JN6WU64\"\n  },\n  {\n  \t\"revision\": {\n  \t\t\"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n  \t\t\"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n\t\t\"branch\": \"default\"\n    },\n    \"headlines\": {\n      \"default\": \"A Less Normal Story\"\n    },\n    \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n    \"_id\": \"4B2NVBFMWVBB3B4OJ74JN6WU64\"\n  },\n  {\n  \t\"revision\": {\n  \t\t\"revision_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n\t\t\"branch\": \"default\"\n\t},\n\t\"headlines\": {\n\t\t\"default\": \"A More Normal Story\"\n\t},\n\t\"last_updated_date\": \"2016-02-10T18:06:30.191Z\",\n\t\"_id\": \"4B2NVBFMWVBB3B4OJ74JN6WU64\"\n  }]\n"
						}
					  ]
					},
					{
					  "name": "Get Branch Configuration",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "GET",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id/branch/:branch/:branch/config",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v2",
							"story",
							":_id",
							"branch",
							":branch",
							":branch",
							"config"
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							},
							{
							  "key": "branch",
							  "value": ""
							}
						  ]
						}
					  },
					  "response": []
					},
					{
					  "name": "Set Branch Configuration Copy",
					  "request": {
						"auth": {
						  "type": "bearer",
						  "bearer": [
							{
							  "key": "token",
							  "value": "{{token}}",
							  "type": "string"
							}
						  ]
						},
						"method": "PUT",
						"header": [],
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id/branch/:branch/:branch/config",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v2",
							"story",
							":_id",
							"branch",
							":branch",
							":branch",
							"config"
						  ],
						  "query": [
							{
							  "key": "hidden",
							  "value": "<boolean>",
							  "description": "If true, updates to the parent branch will not be sent to Kafka or appear in Content API",
							  "disabled": true
							},
							{
							  "key": "autopublish.edition",
							  "value": "<string>",
							  "description": "If present, updates to the parent branch will simultaneously update (or create) the edition with this name.",
							  "disabled": true
							}
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							},
							{
							  "key": "branch",
							  "value": ""
							}
						  ]
						}
					  },
					  "response": []
					}
				  ],
				  "description": "Manage branches on a story",
				  "protocolProfileBehavior": {},
				  "_postman_isSubFolder": true
				},
				{
				  "name": "Get Story by ID",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id/",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"story",
						"v2",
						"story",
						":_id",
						""
					  ],
					  "query": [
						{
						  "key": "revision",
						  "value": null,
						  "description": "If present, return this revision of the story. Optional. Cannot be used if branch also present.",
						  "disabled": true
						},
						{
						  "key": "branch",
						  "value": null,
						  "description": "The branch name",
						  "disabled": true
						}
					  ],
					  "variable": [
						{
						  "description": "The ID of the story",
						  "key": "_id",
						  "type": "string",
						  "value": "test"
						}
					  ]
					}
				  },
				  "response": []
				},
				{
				  "name": "Delete a Story",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "DELETE",
					"header": [],
					"body": {
					  "mode": "raw",
					  "raw": ""
					},
					"url": {
					  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id/",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"story",
						"v2",
						"story",
						":_id",
						""
					  ],
					  "variable": [
						{
						  "key": "_id",
						  "value": "test",
						  "description": "Story ID"
						}
					  ]
					},
					"description": "Delete the story, and all branches and revisions. Returns the deleted story's information."
				  },
				  "response": [
					{
					  "name": "Delete a Story",
					  "originalRequest": {
						"method": "DELETE",
						"header": [],
						"body": {
						  "mode": "raw",
						  "raw": ""
						},
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id/",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v2",
							"story",
							":_id",
							""
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": "KEPU37SR4BFIDP3FIWIO4SHBIU",
							  "description": "Story ID"
							}
						  ]
						}
					  },
					  "_postman_previewlanguage": "json",
					  "header": null,
					  "cookie": [],
					  "body": "{\n\t\"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\",\n   \"revision\": {\n\t\t\"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n\t\t\"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\"\n   }, \"headlines\": {\n\t\t\"default\": \"A Less Normal Story\"\n   },\n   \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n   \"content_elements\": [\n    {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times,...\"\n    },\n\t{\n       \"_id\": \"26EJ3DX2ENC5BIH7WBYVQIMYYE\",\n       \"type\": \"text\",\n       \"text\": \"...it was the worst of times.\"\n    }\n   ]\n}"
					}
				  ]
				},
				{
				  "name": "Get Multiple Story Editions",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/story/v2/story/bulk/summaries?id=test",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"story",
						"v2",
						"story",
						"bulk",
						"summaries"
					  ],
					  "query": [
						{
						  "key": "id",
						  "value": "test",
						  "description": "The ids of the story edition summary to fetch."
						},
						{
						  "key": "edition",
						  "value": null,
						  "description": "An edition name. If specified, this endpoint will return the latest edition with this name if it exists.",
						  "disabled": true
						}
					  ]
					},
					"description": "This endpoint gets a story id to story edition summary map. If no edition found for a story id, its story edition summary will be null.\n\nSpecify multiple ids like so:\n\n?id=7OAR2Z2LT5HTZKM4NKFIV4IM2M&id=AC7URVIEJFDYTBTBOVGW4IXVBA"
				  },
				  "response": []
				},
				{
				  "name": "Update a Story",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "PUT",
					"header": [
					  {
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					  }
					],
					"body": {
					  "mode": "raw",
					  "raw": "{\n   \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\",\n   \"revision\": {\n     \"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\"\n   },\n   \"headlines\": {\n     \"default\": \"Another Test Story\"\n   },\n   \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n   \"content_elements\": [\n     {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times...\"\n     },\n     {\n       \"type\": \"text\",\n       \"text\": \"...it was the worst of times.\"\n     }\n   ]\n}",
					  "options": {
						"raw": {}
					  }
					},
					"url": {
					  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"story",
						"v2",
						"story",
						":_id"
					  ],
					  "variable": [
						{
						  "description": "The ID of the story you want to update",
						  "key": "_id",
						  "type": "string",
						  "value": "<string>"
						}
					  ]
					},
					"description": "Add a new revision to an existing story. The story _id and revision.parent_id must be included, and revision.revision_id must be omitted. The _id on individual content elements may also be omitted.\n\nNote that when a caller PUTs a document to the server, revision.parent_id should be set to the value of revision.revision_id of the most recent version of the document on the branch being updated, and revision.revision_id should be empty.  In practice, this means clients you should GET a story, make any desired changes to the local copy, then perform something like this before PUTing the edited document back:\n\nstory.revision.parent_id = story.revision.revision_id;\ndelete story.revision.revision_id;\n\nSee https://github.com/washingtonpost/ans-schema/blob/master/src/main/resources/schema/ans/0.5.8/story.json for more details."
				  },
				  "response": [
					{
					  "name": "Update a Story",
					  "originalRequest": {
						"method": "PUT",
						"header": [
						  {
							"key": "Content-Type",
							"name": "Content-Type",
							"type": "text",
							"value": "application/json"
						  }
						],
						"body": {
						  "mode": "raw",
						  "raw": "{\n   \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\",\n   \"revision\": {\n     \"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\"\n   },\n   \"headlines\": {\n     \"default\": \"Another Test Story\"\n   },\n   \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n   \"content_elements\": [\n     {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times...\"\n     },\n     {\n       \"type\": \"text\",\n       \"text\": \"...it was the worst of times.\"\n     }\n   ]\n}",
						  "options": {
							"raw": {}
						  }
						},
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v2",
							"story",
							":_id"
						  ],
						  "variable": [
							{
							  "description": "The ID of the story you want to update",
							  "key": "_id",
							  "type": "string",
							  "value": "<string>"
							}
						  ]
						}
					  },
					  "_postman_previewlanguage": "json",
					  "header": null,
					  "cookie": [],
					  "body": "{\n   \"revision\": {\n    \t\"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n\t\t\"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\"\n   },\n   \"headlines\": {\n\t\t\"default\": \"Another Test Story\"\n   },\n   \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n   \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\",\n   \"content_elements\": [\n     {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times,...\"\n     },\n\t{\n       \"_id\": \"26EJ3DX2ENC5BIH7WBYVQIMYYE\",\n       \"type\": \"text\",\n       \"text\": \"...it was the worst of times.\"\n     }\n   ]\n}"
					}
				  ]
				},
				{
				  "name": "Update and Publish",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "PUT",
					"header": [
					  {
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					  }
					],
					"body": {
					  "mode": "raw",
					  "raw": "{\n   \"revision\": {\n     \"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n     \"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n     \"editions\": [ \"default\" ]\n   },\n   \"headlines\": {\n     \"default\": \"A Less Normal Story\"\n   },\n   \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\"\n}"
					},
					"url": {
					  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"story",
						"v2",
						"story",
						":_id"
					  ],
					  "variable": [
						{
						  "key": "_id",
						  "value": ""
						}
					  ]
					},
					"description": "If revision.editions exists and is an array of valid edition names, then this request will immediately create a new edition from the new revision created. (I.e., it will immediately publish this update.) \n\nThis is equivalent to a PUT /story/:id request followed by a PUT /story/:id/edition/:edition request."
				  },
				  "response": [
					{
					  "name": "Update and Publish",
					  "originalRequest": {
						"method": "PUT",
						"header": [
						  {
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						  }
						],
						"body": {
						  "mode": "raw",
						  "raw": "{\n   \"revision\": {\n     \"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n     \"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n     \"editions\": [ \"default\" ]\n   },\n   \"headlines\": {\n     \"default\": \"A Less Normal Story\"\n   },\n   \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\"\n}"
						},
						"url": {
						  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id",
						  "protocol": "https",
						  "host": [
							"api",
							"{{baseUrl}}"
						  ],
						  "path": [
							"story",
							"v2",
							"story",
							":_id"
						  ],
						  "variable": [
							{
							  "key": "_id",
							  "value": ""
							}
						  ]
						}
					  },
					  "_postman_previewlanguage": "json",
					  "header": null,
					  "cookie": [],
					  "body": "{\n   \"revision\": {\n     \"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n     \"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\",\n     \"editions\": [ \"default\" ]\n   },\n   \"publish_date\": \"2016-02-10T18:54:47.868Z\",\n   \"headlines\": {\n     \"default\": \"A Less Normal Story\"\n   },\n   \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n   \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\"\n}"
					}
				  ]
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			},
			{
			  "name": "{revision}",
			  "item": [
				{
				  "name": "Get Story by Revision",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/story/v2/story/:revision",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"story",
						"v2",
						"story",
						":revision"
					  ],
					  "variable": [
						{
						  "description": "The revision ID of the story",
						  "key": "revision",
						  "type": "string",
						  "value": "test"
						}
					  ]
					}
				  },
				  "response": []
				},
				{
				  "name": "Get Story by Revision ID",
				  "request": {
					"auth": {
					  "type": "bearer",
					  "bearer": [
						{
						  "key": "token",
						  "value": "{{token}}",
						  "type": "string"
						}
					  ]
					},
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/story/v2/story/:_id/revision/:_revision",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"story",
						"v2",
						"story",
						":_id",
						"revision",
						":_revision"
					  ],
					  "variable": [
						{
						  "description": "The ID of the story",
						  "key": "_id",
						  "type": "string",
						  "value": "test"
						},
						{
						  "description": "The revision ID of the story",
						  "key": "_revision",
						  "type": "string",
						  "value": "test"
						}
					  ]
					}
				  },
				  "response": []
				}
			  ],
			  "protocolProfileBehavior": {},
			  "_postman_isSubFolder": true
			},
			{
			  "name": "Get a List of Stories",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [],
				"url": {
				  "raw": "https://api.{{baseUrl}}/story/v2/story?id=test",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"story",
					"v2",
					"story"
				  ],
				  "query": [
					{
					  "key": "id",
					  "value": "test",
					  "description": "The ids of the stories to fetch. Include this parameter once for each id to fetch. Incompatible with revision_id. Specify multiple ids like: ?id=ABCDEFGHIJKLMNOPQRSTUVWXYZ&id=ZYXWVUTSRQPONMLKJIHGFEDCBA&id=AAAAAAAAAAAAAAAAAAAAAAAAAA"
					},
					{
					  "key": "revision_id",
					  "value": null,
					  "description": "The revision ids to fetch.  Include this parameter once for each revision id to fetch. Incompatible with id, branch, and edition.",
					  "disabled": true
					},
					{
					  "key": "limit",
					  "value": "100",
					  "description": "The number of items to return. Cannot be more than 100, defaults to 100.",
					  "disabled": true
					},
					{
					  "key": "branch",
					  "value": null,
					  "description": "A branch name. If specified, this endpoint will return the latest revision on the branch with this name, if it exists. Requires id. Incompatible with edition and revision_id.",
					  "disabled": true
					},
					{
					  "key": "edition",
					  "value": null,
					  "description": "An edition name. If specified, this endpoint will return the latest edition with this name, if it exists. Requires id. Incompatible with branch and revision_id.",
					  "disabled": true
					}
				  ]
				},
				"description": "This endpoint gets a list of stories.  If neither id nor revision_id are specified, then it will return stories up to limit in reverse chronological order, based on last update time of the latest revision on the default branch for each story. If id is specified, you may also use the branch or edition parameter to determine which revision/edition of each story is returned. \n\nSpecify multiple ids like so:\n\n?id=ABCDEFGHIJKLMNOPQRSTUVWXYZ&id=ZYXWVUTSRQPONMLKJIHGFEDCBA&id=AAAAAAAAAAAAAAAAAAAAAAAAAA"
			  },
			  "response": [
				{
				  "name": "Get a List of Stories",
				  "originalRequest": {
					"method": "GET",
					"header": [],
					"url": {
					  "raw": "https://api.{{baseUrl}}/story/v2/story?id=test",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"story",
						"v2",
						"story"
					  ],
					  "query": [
						{
						  "key": "id",
						  "value": "test",
						  "description": "story ID"
						},
						{
						  "key": "revision_id",
						  "value": null,
						  "description": "revision ID",
						  "disabled": true
						},
						{
						  "key": "limit",
						  "value": "100",
						  "description": "Defaults to 100",
						  "disabled": true
						},
						{
						  "key": "branch",
						  "value": null,
						  "disabled": true
						},
						{
						  "key": "edition",
						  "value": null,
						  "description": "An edition name. If specified, this endpoint will return the latest edition with this name if it exists.",
						  "disabled": true
						}
					  ]
					}
				  },
				  "_postman_previewlanguage": "json",
				  "header": null,
				  "cookie": [],
				  "body": "[\n    {\n        \"revision\": {\n            \"revision_id\": \"4YO3XCI5NZFT7PYEI6756MFM5U\"\n        },\n        \"last_updated_date\": \"2016-02-11T19:25:10.256Z\",\n        \"_id\": \"4B2NVBFMWVBB3B4OJ74JN6WU64\"\n    },\n    {\n        \"revision\": {\n            \"parent_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n            \"revision_id\": \"AHW4YOBXBBGSXEDDFCTUDSUWUE\"\n        },\n        \"headlines\": {\n            \"default\": \"A Less Normal Story\"\n        },\n        \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n        \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\"\n    },\n    {\n        \"revision\": {\n            \"parent_id\": \"AD7I7FCY2NABHO73FRRGCDBST4\",\n            \"revision_id\": \"LKNLUP4RDBD6XCTQEB4KHNTDVY\"\n        },\n        \"headlines\": {\n            \"default\": \"A More Normal Story\"\n        },\n        \"last_updated_date\": \"2016-02-10T18:06:30.191Z\",\n        \"_id\": \"7QPHOCFDF5BFZKOEBMSPWI3E5Q\"\n    },\n    {\n        \"revision\": {\n            \"revision_id\": \"TPGR7G5D4ZALVM26XIUCA3NEIQ\"\n        },\n        \"last_updated_date\": \"2016-02-10T18:03:27.092Z\",\n        \"_id\": \"26EJ3DX2ENC5BIH7WBYVQIMYYE\"\n    }\n]"
				}
			  ]
			},
			{
			  "name": "Create a Story",
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "POST",
				"header": [
				  {
					"key": "Content-Type",
					"name": "Content-Type",
					"type": "text",
					"value": "application/json"
				  }
				],
				"body": {
				  "mode": "raw",
				  "raw": "{\n   \"headlines\": {\n     \"default\": \"A Test Story\"\n   },\n   \"content_elements\": [\n     {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times, it was the worst of times...\"\n     }\n   ]\n} ",
				  "options": {
					"raw": {}
				  }
				},
				"url": {
				  "raw": "https://api.{{baseUrl}}/story/v2/story/",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"story",
					"v2",
					"story",
					""
				  ]
				},
				"description": "When creating a new story, the story _id and revision should be omitted.  The _id on individual content elements may also be omitted.\n\nThis endpoint supports automatic publishling – see the description under the PUT /story/:id endpoint.\n\nSee https://github.com/washingtonpost/ans-schema/blob/master/src/main/resources/schema/ans/0.5.8/story.json for more details."
			  },
			  "response": [
				{
				  "name": "Create a Story",
				  "originalRequest": {
					"method": "POST",
					"header": [
					  {
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					  }
					],
					"body": {
					  "mode": "raw",
					  "raw": "{\n   \"headlines\": {\n     \"default\": \"A Test Story\"\n   },\n   \"content_elements\": [\n     {\n       \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n       \"type\":\"text\",\n       \"text\":\"It was the best of times, it was the worst of times...\"\n     }\n   ]\n} ",
					  "options": {
						"raw": {}
					  }
					},
					"url": {
					  "raw": "https://api.{{baseUrl}}/story/v2/story/",
					  "protocol": "https",
					  "host": [
						"api",
						"{{baseUrl}}"
					  ],
					  "path": [
						"story",
						"v2",
						"story",
						""
					  ]
					}
				  },
				  "_postman_previewlanguage": "json",
				  "header": null,
				  "cookie": [],
				  "body": "{\n    \"revision\": {\n        \"revision_id\": \"XP5HBYOXXBADZAERFVUGW5734Q\",\n        \"parent_id\": null\n    },\n    \"headlines\": {\n        \"default\": \"A Test Story\"\n    },\n    \"last_updated_date\": \"2016-02-10T18:54:47.868Z\",\n    \"_id\": \"KEPU37SR4BFIDP3FIWIO4SHBIU\",\n    \"content_elements\": [\n        {\n            \"_id\": \"ZWOUUCO6GBGCRATQA26KMQVN54\",\n            \"type\": \"text\",\n            \"text\": \"It was the best of times, it was the worst of times...\"\n        }\n    ]\n}"
				}
			  ]
			},
			{
			  "name": "Batch Request",
			  "protocolProfileBehavior": {
				"disableBodyPruning": true
			  },
			  "request": {
				"auth": {
				  "type": "bearer",
				  "bearer": [
					{
					  "key": "token",
					  "value": "{{token}}",
					  "type": "string"
					}
				  ]
				},
				"method": "GET",
				"header": [
				  {
					"key": "Content-Type",
					"value": "application/json",
					"type": "text"
				  }
				],
				"body": {
				  "mode": "raw",
				  "raw": "{\n  \"items\": [\n    {\n      \"url\": \"\\/api\\/v2\\/story\\/3RJCHISVNFHENCE5SHV4LAABBB\",\n      \"method\": \"DELETE\"\n    },    \n    {\n      \"url\": \"/api/v2/story/\",\n      \"method\": \"POST\",\n\n      \"story\": {\n        \"description\": {\n          \"basic\": \"Gregarious Latin professor was a natural on radio and became a correspondent for NPR, sharing stories and songs\"\n        },\n        \"headlines\": {\n          \"basic\": \"Elaine Fantham: Scholar was a \\u2018rock star\\u2019 of the classics world\"\n        },\n        \"canonical_url\": \"\\/news\\/world\\/elaine-fantham-scholar-was-a-rock-star-of-the-classics-world\\/article31303986\\/\",\n        \"version\": \"0.5.7\",\n        \"type\": \"story\"\n      }\n    },\n    {\n      \"url\": \"/api/v2/story/QH6XAT376BHXNCZQKOHNYSOJQI\",\n      \"method\": \"PUT\",\n\n      \"story\": {\n        \"_id\": \"QH6XAT376BHXNCZQKOHNYSOJQI\",\n        \"description\": {\n          \"basic\": \"The federal polar bear conservation plan says the animal's future in the Arctic is grim unless greenhouse gas emissions are dramatically reduced.\"\n        },\n        \"headlines\": {\n          \"basic\": \"Without action on climate change, say goodbye to polar bears\"\n        },\n        \"revision\": {\n          \"revision_id\": \"PQA2WPXSLNGHTNM35CB45V6FCE\"\n        },\n        \"canonical_url\": \"\\/news\\/world\\/without-action-on-climate-change-say-goodbye-to-polar-bears\",\n        \"version\": \"0.5.7\",\n        \"type\": \"story\"\n      }\n    }\n  ]\n}",
				  "options": {
					"raw": {}
				  }
				},
				"url": {
				  "raw": "https://api.{{baseUrl}}/story/v2/batch/request",
				  "protocol": "https",
				  "host": [
					"api",
					"{{baseUrl}}"
				  ],
				  "path": [
					"story",
					"v2",
					"batch",
					"request"
				  ]
				},
				"description": "The story API handles batch requests by processing a number of atomic operations on individual stories simultaneously, optimizing internally. \n\n## Support\nThe following RESTful operations from the /api/v2/story endpoint can be included in a batch request:\n\n* DELETE /api/v2/story/:id\n* PUT /api/v2/story/:id\n* POST /api/v2/story\n* PUT /api/v2/story/:id/edition/:edition\n* DELETE /api/v2/story/:id/edition/:edition\n\n## Limitations\nThe same story object may not be operated on more than once in the same batch request.  Such requests will immediately fail. E.g., the same batch request may not include both of the following:\n\n* PUT /api/v2/story/4B2NVBFMWVBB3B4OJ74JN6WU64\n* DELETE /api/v2/story/4B2NVBFMWVBB3B4OJ74JN6WU64\n\nNo more than 100 individual request items may be included in a single batch request.\n\n## Update and Publish\nThe API does not support separate update+publish objects in the same request, but it does support the Story API v2 combined update and publish request.\n\nEach item object should use the following format:\n\n```\n{\n\tmethod: <string:\"PUT\" | \"DELETE\" | \"POST\">,\n\turl: <string:\"ie. api/v2/story\">,\n\tstory: <object:\"ANS story object (optional)\">,\n\tedition: <object:\"ANS story edition\"\n}\n```\n\n* Method and url are combined to resolve the request item as if an individual HTTP request had been made.\n* Story object is required for POST /api/v2/story and PUT /api/v2/story/:id\n* A story edition request object. Required for PUT /api/v2/story/:id/edition/:edition."
			  },
			  "response": []
			}
		  ],
		  "protocolProfileBehavior": {},
		  "_postman_isSubFolder": true
		}
	  ],
	  "description": "This is being deprecated by the Draft API.\n\nDocumentation is also available at: https://arcpublishing.atlassian.net/wiki/spaces/CA/pages/43188271/Story+API+v2+-+Story+Resource",
	  "event": [
		{
		  "listen": "prerequest",
		  "script": {
			"id": "96c6e764-cee6-447d-8937-d4f10c658c7a",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		},
		{
		  "listen": "test",
		  "script": {
			"id": "a7b8e563-7c30-4532-a054-b60b4de93e7e",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		}
	  ],
	  "protocolProfileBehavior": {}
	},
	{
	  "name": "URL Service API (Deprecated)",
	  "item": [
		{
		  "name": "Create Vanity Redirect Generic",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "POST",
			"header": [
			  {
				"key": "Content-Type",
				"name": "Content-Type",
				"value": "application/json",
				"type": "text"
			  }
			],
			"body": {
			  "mode": "raw",
			  "raw": ""
			},
			"url": {
			  "raw": "https://api.{{baseUrl}}/url/v2/redirect/vanity",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"url",
				"v2",
				"redirect",
				"vanity"
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Create Story Redirect Generic",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "POST",
			"header": [
			  {
				"key": "Content-Type",
				"name": "Content-Type",
				"type": "text",
				"value": "application/json"
			  }
			],
			"body": {
			  "mode": "raw",
			  "raw": ""
			},
			"url": {
			  "raw": "https://api.{{baseUrl}}/url/v2/redirect/story?website={{website}}",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"url",
				"v2",
				"redirect",
				"story"
			  ],
			  "query": [
				{
				  "key": "website",
				  "value": "{{website}}"
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Create URL Generic Copy",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "POST",
			"header": [
			  {
				"key": "Content-Type",
				"name": "Content-Type",
				"type": "text",
				"value": "application/json"
			  }
			],
			"body": {
			  "mode": "raw",
			  "raw": "{\n    \"_id\": \"<string>\",\n\t\"website_url\": \"/canonical-url-of-the-story-to-copy/\"\n}",
			  "options": {
				"raw": {}
			  }
			},
			"url": {
			  "raw": "https://api.{{baseUrl}}/url/v2/url/?website={{website}}&redirect_existing=on_change",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"url",
				"v2",
				"url",
				""
			  ],
			  "query": [
				{
				  "key": "website",
				  "value": "{{website}}",
				  "description": "The website to make a copy from"
				},
				{
				  "key": "redirect_existing",
				  "value": "on_change"
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Get URL Generic",
		  "protocolProfileBehavior": {
			"disableBodyPruning": true
		  },
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "GET",
			"header": [],
			"body": {
			  "mode": "formdata",
			  "formdata": []
			},
			"url": {
			  "raw": "https://api.{{baseUrl}}/url/v2/url?website={{website}}&url=/test/",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"url",
				"v2",
				"url"
			  ],
			  "query": [
				{
				  "key": "website",
				  "value": "{{website}}"
				},
				{
				  "key": "url",
				  "value": "/test/"
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Delete Redirect",
		  "request": {
			"method": "DELETE",
			"header": [
			  {
				"key": "Content-Type",
				"value": "application/json"
			  }
			],
			"body": {
			  "mode": "raw",
			  "raw": "{\ncontent_id: <_id>, \noriginal_url: <url>, \ndestination_url:<url>\n}"
			},
			"url": {
			  "raw": "https://api.{{baseUrl}}/url/v1/redirect/story",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"url",
				"v1",
				"redirect",
				"story"
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Get ALL Website Urls",
		  "protocolProfileBehavior": {
			"disableBodyPruning": true
		  },
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "GET",
			"header": [],
			"body": {
			  "mode": "formdata",
			  "formdata": []
			},
			"url": {
			  "raw": "https://api.{{baseUrl}}/url/v2/url/allwebsiteurls?content_id=test&website={{website}}",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"url",
				"v2",
				"url",
				"allwebsiteurls"
			  ],
			  "query": [
				{
				  "key": "content_id",
				  "value": "test"
				},
				{
				  "key": "website",
				  "value": "{{website}}"
				},
				{
				  "key": "",
				  "value": "",
				  "disabled": true
				}
			  ]
			}
		  },
		  "response": []
		},
		{
		  "name": "Delete URL",
		  "request": {
			"auth": {
			  "type": "bearer",
			  "bearer": [
				{
				  "key": "token",
				  "value": "{{token}}",
				  "type": "string"
				}
			  ]
			},
			"method": "DELETE",
			"header": [],
			"body": {
			  "mode": "formdata",
			  "formdata": []
			},
			"url": {
			  "raw": "https://api.{{baseUrl}}/url/v2/url?website={{website}}&url=/test/",
			  "protocol": "https",
			  "host": [
				"api",
				"{{baseUrl}}"
			  ],
			  "path": [
				"url",
				"v2",
				"url"
			  ],
			  "query": [
				{
				  "key": "website",
				  "value": "{{website}}"
				},
				{
				  "key": "url",
				  "value": "/test/"
				}
			  ]
			}
		  },
		  "response": []
		}
	  ],
	  "description": "This is being deprecated by the new Draft API. \n\nDocumentation is also available at: https://redirector.arcpublishing.com/alc/docs/swagger/?url=./arc-products/url-api.json",
	  "event": [
		{
		  "listen": "prerequest",
		  "script": {
			"id": "ee7f2bf3-f600-4ef2-9444-7a5fea75f29d",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		},
		{
		  "listen": "test",
		  "script": {
			"id": "e103c020-e3fa-4693-96df-94e360d4edf3",
			"type": "text/javascript",
			"exec": [
			  ""
			]
		  }
		}
	  ],
	  "protocolProfileBehavior": {}
	}
  ],
  "auth": {
	"type": "bearer",
	"bearer": [
	  {
		"key": "token",
		"value": "{{token}}",
		"type": "string"
	  }
	]
  },
  "event": [
	{
	  "listen": "prerequest",
	  "script": {
		"id": "ce65c3fc-d90b-415b-8452-fb6bfd21f947",
		"type": "text/javascript",
		"exec": [
		  ""
		]
	  }
	},
	{
	  "listen": "test",
	  "script": {
		"id": "e7e20292-5ce3-406a-b2b2-0641e6d7d7ce",
		"type": "text/javascript",
		"exec": [
		  ""
		]
	  }
	}
  ],
  "protocolProfileBehavior": {}
}